
ForestMEv2_P2P.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123cc  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000880  08012504  08012504  00022504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d84  08012d84  00030044  2**0
                  CONTENTS
  4 .ARM          00000008  08012d84  08012d84  00022d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d8c  08012d8c  00030044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d8c  08012d8c  00022d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d90  08012d90  00022d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08012d94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ae0  20000044  08012dd8  00030044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006b24  08012dd8  00036b24  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003006e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035a2a  00000000  00000000  000300b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008705  00000000  00000000  00065adb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003090  00000000  00000000  0006e1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002517  00000000  00000000  00071270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d98  00000000  00000000  00073787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003abd4  00000000  00000000  0009b51f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce300  00000000  00000000  000d60f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ca58  00000000  00000000  001a43f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000044  00000000  00000000  001b0e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000044 	.word	0x20000044
 8000154:	00000000 	.word	0x00000000
 8000158:	080124ec 	.word	0x080124ec

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000048 	.word	0x20000048
 8000174:	080124ec 	.word	0x080124ec

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_frsub>:
 8000188:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__addsf3>
 800018e:	bf00      	nop

08000190 <__aeabi_fsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000194 <__addsf3>:
 8000194:	0042      	lsls	r2, r0, #1
 8000196:	bf1f      	itttt	ne
 8000198:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800019c:	ea92 0f03 	teqne	r2, r3
 80001a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001a8:	d06a      	beq.n	8000280 <__addsf3+0xec>
 80001aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001b2:	bfc1      	itttt	gt
 80001b4:	18d2      	addgt	r2, r2, r3
 80001b6:	4041      	eorgt	r1, r0
 80001b8:	4048      	eorgt	r0, r1
 80001ba:	4041      	eorgt	r1, r0
 80001bc:	bfb8      	it	lt
 80001be:	425b      	neglt	r3, r3
 80001c0:	2b19      	cmp	r3, #25
 80001c2:	bf88      	it	hi
 80001c4:	4770      	bxhi	lr
 80001c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001d2:	bf18      	it	ne
 80001d4:	4240      	negne	r0, r0
 80001d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001e2:	bf18      	it	ne
 80001e4:	4249      	negne	r1, r1
 80001e6:	ea92 0f03 	teq	r2, r3
 80001ea:	d03f      	beq.n	800026c <__addsf3+0xd8>
 80001ec:	f1a2 0201 	sub.w	r2, r2, #1
 80001f0:	fa41 fc03 	asr.w	ip, r1, r3
 80001f4:	eb10 000c 	adds.w	r0, r0, ip
 80001f8:	f1c3 0320 	rsb	r3, r3, #32
 80001fc:	fa01 f103 	lsl.w	r1, r1, r3
 8000200:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000204:	d502      	bpl.n	800020c <__addsf3+0x78>
 8000206:	4249      	negs	r1, r1
 8000208:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800020c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000210:	d313      	bcc.n	800023a <__addsf3+0xa6>
 8000212:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000216:	d306      	bcc.n	8000226 <__addsf3+0x92>
 8000218:	0840      	lsrs	r0, r0, #1
 800021a:	ea4f 0131 	mov.w	r1, r1, rrx
 800021e:	f102 0201 	add.w	r2, r2, #1
 8000222:	2afe      	cmp	r2, #254	; 0xfe
 8000224:	d251      	bcs.n	80002ca <__addsf3+0x136>
 8000226:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800022a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800022e:	bf08      	it	eq
 8000230:	f020 0001 	biceq.w	r0, r0, #1
 8000234:	ea40 0003 	orr.w	r0, r0, r3
 8000238:	4770      	bx	lr
 800023a:	0049      	lsls	r1, r1, #1
 800023c:	eb40 0000 	adc.w	r0, r0, r0
 8000240:	3a01      	subs	r2, #1
 8000242:	bf28      	it	cs
 8000244:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000248:	d2ed      	bcs.n	8000226 <__addsf3+0x92>
 800024a:	fab0 fc80 	clz	ip, r0
 800024e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000252:	ebb2 020c 	subs.w	r2, r2, ip
 8000256:	fa00 f00c 	lsl.w	r0, r0, ip
 800025a:	bfaa      	itet	ge
 800025c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000260:	4252      	neglt	r2, r2
 8000262:	4318      	orrge	r0, r3
 8000264:	bfbc      	itt	lt
 8000266:	40d0      	lsrlt	r0, r2
 8000268:	4318      	orrlt	r0, r3
 800026a:	4770      	bx	lr
 800026c:	f092 0f00 	teq	r2, #0
 8000270:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000274:	bf06      	itte	eq
 8000276:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800027a:	3201      	addeq	r2, #1
 800027c:	3b01      	subne	r3, #1
 800027e:	e7b5      	b.n	80001ec <__addsf3+0x58>
 8000280:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000284:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000288:	bf18      	it	ne
 800028a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800028e:	d021      	beq.n	80002d4 <__addsf3+0x140>
 8000290:	ea92 0f03 	teq	r2, r3
 8000294:	d004      	beq.n	80002a0 <__addsf3+0x10c>
 8000296:	f092 0f00 	teq	r2, #0
 800029a:	bf08      	it	eq
 800029c:	4608      	moveq	r0, r1
 800029e:	4770      	bx	lr
 80002a0:	ea90 0f01 	teq	r0, r1
 80002a4:	bf1c      	itt	ne
 80002a6:	2000      	movne	r0, #0
 80002a8:	4770      	bxne	lr
 80002aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002ae:	d104      	bne.n	80002ba <__addsf3+0x126>
 80002b0:	0040      	lsls	r0, r0, #1
 80002b2:	bf28      	it	cs
 80002b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002b8:	4770      	bx	lr
 80002ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002be:	bf3c      	itt	cc
 80002c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002c4:	4770      	bxcc	lr
 80002c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002d2:	4770      	bx	lr
 80002d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002d8:	bf16      	itet	ne
 80002da:	4608      	movne	r0, r1
 80002dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002e0:	4601      	movne	r1, r0
 80002e2:	0242      	lsls	r2, r0, #9
 80002e4:	bf06      	itte	eq
 80002e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ea:	ea90 0f01 	teqeq	r0, r1
 80002ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002f2:	4770      	bx	lr

080002f4 <__aeabi_ui2f>:
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e004      	b.n	8000304 <__aeabi_i2f+0x8>
 80002fa:	bf00      	nop

080002fc <__aeabi_i2f>:
 80002fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000300:	bf48      	it	mi
 8000302:	4240      	negmi	r0, r0
 8000304:	ea5f 0c00 	movs.w	ip, r0
 8000308:	bf08      	it	eq
 800030a:	4770      	bxeq	lr
 800030c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000310:	4601      	mov	r1, r0
 8000312:	f04f 0000 	mov.w	r0, #0
 8000316:	e01c      	b.n	8000352 <__aeabi_l2f+0x2a>

08000318 <__aeabi_ul2f>:
 8000318:	ea50 0201 	orrs.w	r2, r0, r1
 800031c:	bf08      	it	eq
 800031e:	4770      	bxeq	lr
 8000320:	f04f 0300 	mov.w	r3, #0
 8000324:	e00a      	b.n	800033c <__aeabi_l2f+0x14>
 8000326:	bf00      	nop

08000328 <__aeabi_l2f>:
 8000328:	ea50 0201 	orrs.w	r2, r0, r1
 800032c:	bf08      	it	eq
 800032e:	4770      	bxeq	lr
 8000330:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000334:	d502      	bpl.n	800033c <__aeabi_l2f+0x14>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	ea5f 0c01 	movs.w	ip, r1
 8000340:	bf02      	ittt	eq
 8000342:	4684      	moveq	ip, r0
 8000344:	4601      	moveq	r1, r0
 8000346:	2000      	moveq	r0, #0
 8000348:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800034c:	bf08      	it	eq
 800034e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000352:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000356:	fabc f28c 	clz	r2, ip
 800035a:	3a08      	subs	r2, #8
 800035c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000360:	db10      	blt.n	8000384 <__aeabi_l2f+0x5c>
 8000362:	fa01 fc02 	lsl.w	ip, r1, r2
 8000366:	4463      	add	r3, ip
 8000368:	fa00 fc02 	lsl.w	ip, r0, r2
 800036c:	f1c2 0220 	rsb	r2, r2, #32
 8000370:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000374:	fa20 f202 	lsr.w	r2, r0, r2
 8000378:	eb43 0002 	adc.w	r0, r3, r2
 800037c:	bf08      	it	eq
 800037e:	f020 0001 	biceq.w	r0, r0, #1
 8000382:	4770      	bx	lr
 8000384:	f102 0220 	add.w	r2, r2, #32
 8000388:	fa01 fc02 	lsl.w	ip, r1, r2
 800038c:	f1c2 0220 	rsb	r2, r2, #32
 8000390:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000394:	fa21 f202 	lsr.w	r2, r1, r2
 8000398:	eb43 0002 	adc.w	r0, r3, r2
 800039c:	bf08      	it	eq
 800039e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_fmul>:
 80003a4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80003a8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003ac:	bf1e      	ittt	ne
 80003ae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003b2:	ea92 0f0c 	teqne	r2, ip
 80003b6:	ea93 0f0c 	teqne	r3, ip
 80003ba:	d06f      	beq.n	800049c <__aeabi_fmul+0xf8>
 80003bc:	441a      	add	r2, r3
 80003be:	ea80 0c01 	eor.w	ip, r0, r1
 80003c2:	0240      	lsls	r0, r0, #9
 80003c4:	bf18      	it	ne
 80003c6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003ca:	d01e      	beq.n	800040a <__aeabi_fmul+0x66>
 80003cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003d0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003d4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003d8:	fba0 3101 	umull	r3, r1, r0, r1
 80003dc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003e0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003e4:	bf3e      	ittt	cc
 80003e6:	0049      	lslcc	r1, r1, #1
 80003e8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003ec:	005b      	lslcc	r3, r3, #1
 80003ee:	ea40 0001 	orr.w	r0, r0, r1
 80003f2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003f6:	2afd      	cmp	r2, #253	; 0xfd
 80003f8:	d81d      	bhi.n	8000436 <__aeabi_fmul+0x92>
 80003fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000402:	bf08      	it	eq
 8000404:	f020 0001 	biceq.w	r0, r0, #1
 8000408:	4770      	bx	lr
 800040a:	f090 0f00 	teq	r0, #0
 800040e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000412:	bf08      	it	eq
 8000414:	0249      	lsleq	r1, r1, #9
 8000416:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800041a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800041e:	3a7f      	subs	r2, #127	; 0x7f
 8000420:	bfc2      	ittt	gt
 8000422:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000426:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800042a:	4770      	bxgt	lr
 800042c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000430:	f04f 0300 	mov.w	r3, #0
 8000434:	3a01      	subs	r2, #1
 8000436:	dc5d      	bgt.n	80004f4 <__aeabi_fmul+0x150>
 8000438:	f112 0f19 	cmn.w	r2, #25
 800043c:	bfdc      	itt	le
 800043e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000442:	4770      	bxle	lr
 8000444:	f1c2 0200 	rsb	r2, r2, #0
 8000448:	0041      	lsls	r1, r0, #1
 800044a:	fa21 f102 	lsr.w	r1, r1, r2
 800044e:	f1c2 0220 	rsb	r2, r2, #32
 8000452:	fa00 fc02 	lsl.w	ip, r0, r2
 8000456:	ea5f 0031 	movs.w	r0, r1, rrx
 800045a:	f140 0000 	adc.w	r0, r0, #0
 800045e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000462:	bf08      	it	eq
 8000464:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000468:	4770      	bx	lr
 800046a:	f092 0f00 	teq	r2, #0
 800046e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0040      	lsleq	r0, r0, #1
 8000476:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800047a:	3a01      	subeq	r2, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xce>
 800047e:	ea40 000c 	orr.w	r0, r0, ip
 8000482:	f093 0f00 	teq	r3, #0
 8000486:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800048a:	bf02      	ittt	eq
 800048c:	0049      	lsleq	r1, r1, #1
 800048e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000492:	3b01      	subeq	r3, #1
 8000494:	d0f9      	beq.n	800048a <__aeabi_fmul+0xe6>
 8000496:	ea41 010c 	orr.w	r1, r1, ip
 800049a:	e78f      	b.n	80003bc <__aeabi_fmul+0x18>
 800049c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	bf18      	it	ne
 80004a6:	ea93 0f0c 	teqne	r3, ip
 80004aa:	d00a      	beq.n	80004c2 <__aeabi_fmul+0x11e>
 80004ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80004b0:	bf18      	it	ne
 80004b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80004b6:	d1d8      	bne.n	800046a <__aeabi_fmul+0xc6>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004c0:	4770      	bx	lr
 80004c2:	f090 0f00 	teq	r0, #0
 80004c6:	bf17      	itett	ne
 80004c8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004cc:	4608      	moveq	r0, r1
 80004ce:	f091 0f00 	teqne	r1, #0
 80004d2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004d6:	d014      	beq.n	8000502 <__aeabi_fmul+0x15e>
 80004d8:	ea92 0f0c 	teq	r2, ip
 80004dc:	d101      	bne.n	80004e2 <__aeabi_fmul+0x13e>
 80004de:	0242      	lsls	r2, r0, #9
 80004e0:	d10f      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004e2:	ea93 0f0c 	teq	r3, ip
 80004e6:	d103      	bne.n	80004f0 <__aeabi_fmul+0x14c>
 80004e8:	024b      	lsls	r3, r1, #9
 80004ea:	bf18      	it	ne
 80004ec:	4608      	movne	r0, r1
 80004ee:	d108      	bne.n	8000502 <__aeabi_fmul+0x15e>
 80004f0:	ea80 0001 	eor.w	r0, r0, r1
 80004f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000500:	4770      	bx	lr
 8000502:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000506:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 800050a:	4770      	bx	lr

0800050c <__aeabi_fdiv>:
 800050c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000510:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000514:	bf1e      	ittt	ne
 8000516:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800051a:	ea92 0f0c 	teqne	r2, ip
 800051e:	ea93 0f0c 	teqne	r3, ip
 8000522:	d069      	beq.n	80005f8 <__aeabi_fdiv+0xec>
 8000524:	eba2 0203 	sub.w	r2, r2, r3
 8000528:	ea80 0c01 	eor.w	ip, r0, r1
 800052c:	0249      	lsls	r1, r1, #9
 800052e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000532:	d037      	beq.n	80005a4 <__aeabi_fdiv+0x98>
 8000534:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000538:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800053c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000540:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000544:	428b      	cmp	r3, r1
 8000546:	bf38      	it	cc
 8000548:	005b      	lslcc	r3, r3, #1
 800054a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 800054e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000552:	428b      	cmp	r3, r1
 8000554:	bf24      	itt	cs
 8000556:	1a5b      	subcs	r3, r3, r1
 8000558:	ea40 000c 	orrcs.w	r0, r0, ip
 800055c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000560:	bf24      	itt	cs
 8000562:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000566:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800056a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800056e:	bf24      	itt	cs
 8000570:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000574:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000578:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800057c:	bf24      	itt	cs
 800057e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000582:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000586:	011b      	lsls	r3, r3, #4
 8000588:	bf18      	it	ne
 800058a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800058e:	d1e0      	bne.n	8000552 <__aeabi_fdiv+0x46>
 8000590:	2afd      	cmp	r2, #253	; 0xfd
 8000592:	f63f af50 	bhi.w	8000436 <__aeabi_fmul+0x92>
 8000596:	428b      	cmp	r3, r1
 8000598:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800059c:	bf08      	it	eq
 800059e:	f020 0001 	biceq.w	r0, r0, #1
 80005a2:	4770      	bx	lr
 80005a4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80005a8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005ac:	327f      	adds	r2, #127	; 0x7f
 80005ae:	bfc2      	ittt	gt
 80005b0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80005b4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005b8:	4770      	bxgt	lr
 80005ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005be:	f04f 0300 	mov.w	r3, #0
 80005c2:	3a01      	subs	r2, #1
 80005c4:	e737      	b.n	8000436 <__aeabi_fmul+0x92>
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0040      	lsleq	r0, r0, #1
 80005d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005d6:	3a01      	subeq	r2, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xc2>
 80005da:	ea40 000c 	orr.w	r0, r0, ip
 80005de:	f093 0f00 	teq	r3, #0
 80005e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005e6:	bf02      	ittt	eq
 80005e8:	0049      	lsleq	r1, r1, #1
 80005ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005ee:	3b01      	subeq	r3, #1
 80005f0:	d0f9      	beq.n	80005e6 <__aeabi_fdiv+0xda>
 80005f2:	ea41 010c 	orr.w	r1, r1, ip
 80005f6:	e795      	b.n	8000524 <__aeabi_fdiv+0x18>
 80005f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005fc:	ea92 0f0c 	teq	r2, ip
 8000600:	d108      	bne.n	8000614 <__aeabi_fdiv+0x108>
 8000602:	0242      	lsls	r2, r0, #9
 8000604:	f47f af7d 	bne.w	8000502 <__aeabi_fmul+0x15e>
 8000608:	ea93 0f0c 	teq	r3, ip
 800060c:	f47f af70 	bne.w	80004f0 <__aeabi_fmul+0x14c>
 8000610:	4608      	mov	r0, r1
 8000612:	e776      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000614:	ea93 0f0c 	teq	r3, ip
 8000618:	d104      	bne.n	8000624 <__aeabi_fdiv+0x118>
 800061a:	024b      	lsls	r3, r1, #9
 800061c:	f43f af4c 	beq.w	80004b8 <__aeabi_fmul+0x114>
 8000620:	4608      	mov	r0, r1
 8000622:	e76e      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000624:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000628:	bf18      	it	ne
 800062a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800062e:	d1ca      	bne.n	80005c6 <__aeabi_fdiv+0xba>
 8000630:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000634:	f47f af5c 	bne.w	80004f0 <__aeabi_fmul+0x14c>
 8000638:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800063c:	f47f af3c 	bne.w	80004b8 <__aeabi_fmul+0x114>
 8000640:	e75f      	b.n	8000502 <__aeabi_fmul+0x15e>
 8000642:	bf00      	nop

08000644 <__aeabi_f2iz>:
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800064c:	d30f      	bcc.n	800066e <__aeabi_f2iz+0x2a>
 800064e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000652:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000656:	d90d      	bls.n	8000674 <__aeabi_f2iz+0x30>
 8000658:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800065c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000660:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000664:	fa23 f002 	lsr.w	r0, r3, r2
 8000668:	bf18      	it	ne
 800066a:	4240      	negne	r0, r0
 800066c:	4770      	bx	lr
 800066e:	f04f 0000 	mov.w	r0, #0
 8000672:	4770      	bx	lr
 8000674:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000678:	d101      	bne.n	800067e <__aeabi_f2iz+0x3a>
 800067a:	0242      	lsls	r2, r0, #9
 800067c:	d105      	bne.n	800068a <__aeabi_f2iz+0x46>
 800067e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000682:	bf08      	it	eq
 8000684:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000688:	4770      	bx	lr
 800068a:	f04f 0000 	mov.w	r0, #0
 800068e:	4770      	bx	lr

08000690 <__aeabi_uldivmod>:
 8000690:	b953      	cbnz	r3, 80006a8 <__aeabi_uldivmod+0x18>
 8000692:	b94a      	cbnz	r2, 80006a8 <__aeabi_uldivmod+0x18>
 8000694:	2900      	cmp	r1, #0
 8000696:	bf08      	it	eq
 8000698:	2800      	cmpeq	r0, #0
 800069a:	bf1c      	itt	ne
 800069c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80006a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80006a4:	f000 b970 	b.w	8000988 <__aeabi_idiv0>
 80006a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80006ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80006b0:	f000 f806 	bl	80006c0 <__udivmoddi4>
 80006b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80006b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80006bc:	b004      	add	sp, #16
 80006be:	4770      	bx	lr

080006c0 <__udivmoddi4>:
 80006c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c4:	9e08      	ldr	r6, [sp, #32]
 80006c6:	460d      	mov	r5, r1
 80006c8:	4604      	mov	r4, r0
 80006ca:	460f      	mov	r7, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d14a      	bne.n	8000766 <__udivmoddi4+0xa6>
 80006d0:	428a      	cmp	r2, r1
 80006d2:	4694      	mov	ip, r2
 80006d4:	d965      	bls.n	80007a2 <__udivmoddi4+0xe2>
 80006d6:	fab2 f382 	clz	r3, r2
 80006da:	b143      	cbz	r3, 80006ee <__udivmoddi4+0x2e>
 80006dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80006e0:	f1c3 0220 	rsb	r2, r3, #32
 80006e4:	409f      	lsls	r7, r3
 80006e6:	fa20 f202 	lsr.w	r2, r0, r2
 80006ea:	4317      	orrs	r7, r2
 80006ec:	409c      	lsls	r4, r3
 80006ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80006f2:	fa1f f58c 	uxth.w	r5, ip
 80006f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80006fa:	0c22      	lsrs	r2, r4, #16
 80006fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000700:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000704:	fb01 f005 	mul.w	r0, r1, r5
 8000708:	4290      	cmp	r0, r2
 800070a:	d90a      	bls.n	8000722 <__udivmoddi4+0x62>
 800070c:	eb1c 0202 	adds.w	r2, ip, r2
 8000710:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000714:	f080 811b 	bcs.w	800094e <__udivmoddi4+0x28e>
 8000718:	4290      	cmp	r0, r2
 800071a:	f240 8118 	bls.w	800094e <__udivmoddi4+0x28e>
 800071e:	3902      	subs	r1, #2
 8000720:	4462      	add	r2, ip
 8000722:	1a12      	subs	r2, r2, r0
 8000724:	b2a4      	uxth	r4, r4
 8000726:	fbb2 f0fe 	udiv	r0, r2, lr
 800072a:	fb0e 2210 	mls	r2, lr, r0, r2
 800072e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000732:	fb00 f505 	mul.w	r5, r0, r5
 8000736:	42a5      	cmp	r5, r4
 8000738:	d90a      	bls.n	8000750 <__udivmoddi4+0x90>
 800073a:	eb1c 0404 	adds.w	r4, ip, r4
 800073e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000742:	f080 8106 	bcs.w	8000952 <__udivmoddi4+0x292>
 8000746:	42a5      	cmp	r5, r4
 8000748:	f240 8103 	bls.w	8000952 <__udivmoddi4+0x292>
 800074c:	4464      	add	r4, ip
 800074e:	3802      	subs	r0, #2
 8000750:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000754:	1b64      	subs	r4, r4, r5
 8000756:	2100      	movs	r1, #0
 8000758:	b11e      	cbz	r6, 8000762 <__udivmoddi4+0xa2>
 800075a:	40dc      	lsrs	r4, r3
 800075c:	2300      	movs	r3, #0
 800075e:	e9c6 4300 	strd	r4, r3, [r6]
 8000762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000766:	428b      	cmp	r3, r1
 8000768:	d908      	bls.n	800077c <__udivmoddi4+0xbc>
 800076a:	2e00      	cmp	r6, #0
 800076c:	f000 80ec 	beq.w	8000948 <__udivmoddi4+0x288>
 8000770:	2100      	movs	r1, #0
 8000772:	e9c6 0500 	strd	r0, r5, [r6]
 8000776:	4608      	mov	r0, r1
 8000778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077c:	fab3 f183 	clz	r1, r3
 8000780:	2900      	cmp	r1, #0
 8000782:	d149      	bne.n	8000818 <__udivmoddi4+0x158>
 8000784:	42ab      	cmp	r3, r5
 8000786:	d302      	bcc.n	800078e <__udivmoddi4+0xce>
 8000788:	4282      	cmp	r2, r0
 800078a:	f200 80f7 	bhi.w	800097c <__udivmoddi4+0x2bc>
 800078e:	1a84      	subs	r4, r0, r2
 8000790:	eb65 0203 	sbc.w	r2, r5, r3
 8000794:	2001      	movs	r0, #1
 8000796:	4617      	mov	r7, r2
 8000798:	2e00      	cmp	r6, #0
 800079a:	d0e2      	beq.n	8000762 <__udivmoddi4+0xa2>
 800079c:	e9c6 4700 	strd	r4, r7, [r6]
 80007a0:	e7df      	b.n	8000762 <__udivmoddi4+0xa2>
 80007a2:	b902      	cbnz	r2, 80007a6 <__udivmoddi4+0xe6>
 80007a4:	deff      	udf	#255	; 0xff
 80007a6:	fab2 f382 	clz	r3, r2
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	f040 808f 	bne.w	80008ce <__udivmoddi4+0x20e>
 80007b0:	1a8a      	subs	r2, r1, r2
 80007b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007b6:	fa1f fe8c 	uxth.w	lr, ip
 80007ba:	2101      	movs	r1, #1
 80007bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80007c0:	fb07 2015 	mls	r0, r7, r5, r2
 80007c4:	0c22      	lsrs	r2, r4, #16
 80007c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007ca:	fb0e f005 	mul.w	r0, lr, r5
 80007ce:	4290      	cmp	r0, r2
 80007d0:	d908      	bls.n	80007e4 <__udivmoddi4+0x124>
 80007d2:	eb1c 0202 	adds.w	r2, ip, r2
 80007d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80007da:	d202      	bcs.n	80007e2 <__udivmoddi4+0x122>
 80007dc:	4290      	cmp	r0, r2
 80007de:	f200 80ca 	bhi.w	8000976 <__udivmoddi4+0x2b6>
 80007e2:	4645      	mov	r5, r8
 80007e4:	1a12      	subs	r2, r2, r0
 80007e6:	b2a4      	uxth	r4, r4
 80007e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80007ec:	fb07 2210 	mls	r2, r7, r0, r2
 80007f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80007f4:	fb0e fe00 	mul.w	lr, lr, r0
 80007f8:	45a6      	cmp	lr, r4
 80007fa:	d908      	bls.n	800080e <__udivmoddi4+0x14e>
 80007fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000800:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000804:	d202      	bcs.n	800080c <__udivmoddi4+0x14c>
 8000806:	45a6      	cmp	lr, r4
 8000808:	f200 80ba 	bhi.w	8000980 <__udivmoddi4+0x2c0>
 800080c:	4610      	mov	r0, r2
 800080e:	eba4 040e 	sub.w	r4, r4, lr
 8000812:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000816:	e79f      	b.n	8000758 <__udivmoddi4+0x98>
 8000818:	f1c1 0720 	rsb	r7, r1, #32
 800081c:	408b      	lsls	r3, r1
 800081e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000822:	ea4c 0c03 	orr.w	ip, ip, r3
 8000826:	fa05 f401 	lsl.w	r4, r5, r1
 800082a:	fa20 f307 	lsr.w	r3, r0, r7
 800082e:	40fd      	lsrs	r5, r7
 8000830:	4323      	orrs	r3, r4
 8000832:	fa00 f901 	lsl.w	r9, r0, r1
 8000836:	ea4f 401c 	mov.w	r0, ip, lsr #16
 800083a:	fa1f fe8c 	uxth.w	lr, ip
 800083e:	fbb5 f8f0 	udiv	r8, r5, r0
 8000842:	0c1c      	lsrs	r4, r3, #16
 8000844:	fb00 5518 	mls	r5, r0, r8, r5
 8000848:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800084c:	fb08 f50e 	mul.w	r5, r8, lr
 8000850:	42a5      	cmp	r5, r4
 8000852:	fa02 f201 	lsl.w	r2, r2, r1
 8000856:	d90b      	bls.n	8000870 <__udivmoddi4+0x1b0>
 8000858:	eb1c 0404 	adds.w	r4, ip, r4
 800085c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000860:	f080 8087 	bcs.w	8000972 <__udivmoddi4+0x2b2>
 8000864:	42a5      	cmp	r5, r4
 8000866:	f240 8084 	bls.w	8000972 <__udivmoddi4+0x2b2>
 800086a:	f1a8 0802 	sub.w	r8, r8, #2
 800086e:	4464      	add	r4, ip
 8000870:	1b64      	subs	r4, r4, r5
 8000872:	b29d      	uxth	r5, r3
 8000874:	fbb4 f3f0 	udiv	r3, r4, r0
 8000878:	fb00 4413 	mls	r4, r0, r3, r4
 800087c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000880:	fb03 fe0e 	mul.w	lr, r3, lr
 8000884:	45a6      	cmp	lr, r4
 8000886:	d908      	bls.n	800089a <__udivmoddi4+0x1da>
 8000888:	eb1c 0404 	adds.w	r4, ip, r4
 800088c:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 8000890:	d26b      	bcs.n	800096a <__udivmoddi4+0x2aa>
 8000892:	45a6      	cmp	lr, r4
 8000894:	d969      	bls.n	800096a <__udivmoddi4+0x2aa>
 8000896:	3b02      	subs	r3, #2
 8000898:	4464      	add	r4, ip
 800089a:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800089e:	fba0 8302 	umull	r8, r3, r0, r2
 80008a2:	eba4 040e 	sub.w	r4, r4, lr
 80008a6:	429c      	cmp	r4, r3
 80008a8:	46c6      	mov	lr, r8
 80008aa:	461d      	mov	r5, r3
 80008ac:	d355      	bcc.n	800095a <__udivmoddi4+0x29a>
 80008ae:	d052      	beq.n	8000956 <__udivmoddi4+0x296>
 80008b0:	b156      	cbz	r6, 80008c8 <__udivmoddi4+0x208>
 80008b2:	ebb9 030e 	subs.w	r3, r9, lr
 80008b6:	eb64 0405 	sbc.w	r4, r4, r5
 80008ba:	fa04 f707 	lsl.w	r7, r4, r7
 80008be:	40cb      	lsrs	r3, r1
 80008c0:	40cc      	lsrs	r4, r1
 80008c2:	431f      	orrs	r7, r3
 80008c4:	e9c6 7400 	strd	r7, r4, [r6]
 80008c8:	2100      	movs	r1, #0
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	f1c3 0120 	rsb	r1, r3, #32
 80008d2:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d6:	fa20 f201 	lsr.w	r2, r0, r1
 80008da:	fa25 f101 	lsr.w	r1, r5, r1
 80008de:	409d      	lsls	r5, r3
 80008e0:	432a      	orrs	r2, r5
 80008e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008e6:	fa1f fe8c 	uxth.w	lr, ip
 80008ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80008ee:	fb07 1510 	mls	r5, r7, r0, r1
 80008f2:	0c11      	lsrs	r1, r2, #16
 80008f4:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008f8:	fb00 f50e 	mul.w	r5, r0, lr
 80008fc:	428d      	cmp	r5, r1
 80008fe:	fa04 f403 	lsl.w	r4, r4, r3
 8000902:	d908      	bls.n	8000916 <__udivmoddi4+0x256>
 8000904:	eb1c 0101 	adds.w	r1, ip, r1
 8000908:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800090c:	d22f      	bcs.n	800096e <__udivmoddi4+0x2ae>
 800090e:	428d      	cmp	r5, r1
 8000910:	d92d      	bls.n	800096e <__udivmoddi4+0x2ae>
 8000912:	3802      	subs	r0, #2
 8000914:	4461      	add	r1, ip
 8000916:	1b49      	subs	r1, r1, r5
 8000918:	b292      	uxth	r2, r2
 800091a:	fbb1 f5f7 	udiv	r5, r1, r7
 800091e:	fb07 1115 	mls	r1, r7, r5, r1
 8000922:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000926:	fb05 f10e 	mul.w	r1, r5, lr
 800092a:	4291      	cmp	r1, r2
 800092c:	d908      	bls.n	8000940 <__udivmoddi4+0x280>
 800092e:	eb1c 0202 	adds.w	r2, ip, r2
 8000932:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000936:	d216      	bcs.n	8000966 <__udivmoddi4+0x2a6>
 8000938:	4291      	cmp	r1, r2
 800093a:	d914      	bls.n	8000966 <__udivmoddi4+0x2a6>
 800093c:	3d02      	subs	r5, #2
 800093e:	4462      	add	r2, ip
 8000940:	1a52      	subs	r2, r2, r1
 8000942:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000946:	e739      	b.n	80007bc <__udivmoddi4+0xfc>
 8000948:	4631      	mov	r1, r6
 800094a:	4630      	mov	r0, r6
 800094c:	e709      	b.n	8000762 <__udivmoddi4+0xa2>
 800094e:	4639      	mov	r1, r7
 8000950:	e6e7      	b.n	8000722 <__udivmoddi4+0x62>
 8000952:	4610      	mov	r0, r2
 8000954:	e6fc      	b.n	8000750 <__udivmoddi4+0x90>
 8000956:	45c1      	cmp	r9, r8
 8000958:	d2aa      	bcs.n	80008b0 <__udivmoddi4+0x1f0>
 800095a:	ebb8 0e02 	subs.w	lr, r8, r2
 800095e:	eb63 050c 	sbc.w	r5, r3, ip
 8000962:	3801      	subs	r0, #1
 8000964:	e7a4      	b.n	80008b0 <__udivmoddi4+0x1f0>
 8000966:	4645      	mov	r5, r8
 8000968:	e7ea      	b.n	8000940 <__udivmoddi4+0x280>
 800096a:	4603      	mov	r3, r0
 800096c:	e795      	b.n	800089a <__udivmoddi4+0x1da>
 800096e:	4640      	mov	r0, r8
 8000970:	e7d1      	b.n	8000916 <__udivmoddi4+0x256>
 8000972:	46d0      	mov	r8, sl
 8000974:	e77c      	b.n	8000870 <__udivmoddi4+0x1b0>
 8000976:	3d02      	subs	r5, #2
 8000978:	4462      	add	r2, ip
 800097a:	e733      	b.n	80007e4 <__udivmoddi4+0x124>
 800097c:	4608      	mov	r0, r1
 800097e:	e70b      	b.n	8000798 <__udivmoddi4+0xd8>
 8000980:	4464      	add	r4, ip
 8000982:	3802      	subs	r0, #2
 8000984:	e743      	b.n	800080e <__udivmoddi4+0x14e>
 8000986:	bf00      	nop

08000988 <__aeabi_idiv0>:
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800098c:	b480      	push	{r7}
 800098e:	b085      	sub	sp, #20
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800099a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80009a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4013      	ands	r3, r2
 80009ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009b0:	68fb      	ldr	r3, [r7, #12]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr

080009bc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80009d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4013      	ands	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009f2:	1d3b      	adds	r3, r7, #4
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80009fc:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <MX_ADC_Init+0xc8>)
 80009fe:	4a2e      	ldr	r2, [pc, #184]	; (8000ab8 <MX_ADC_Init+0xcc>)
 8000a00:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 8000a02:	4b2c      	ldr	r3, [pc, #176]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a04:	f44f 12a0 	mov.w	r2, #1310720	; 0x140000
 8000a08:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a1e:	2204      	movs	r2, #4
 8000a20:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a48:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000a7a:	480e      	ldr	r0, [pc, #56]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a7c:	f002 f8ec 	bl	8002c58 <HAL_ADC_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_ADC_Init+0x9e>
  {
    Error_Handler();
 8000a86:	f000 fd21 	bl	80014cc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_ADC_Init+0xd0>)
 8000a8c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <MX_ADC_Init+0xc8>)
 8000a9c:	f002 fb60 	bl	8003160 <HAL_ADC_ConfigChannel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000aa6:	f000 fd11 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000060 	.word	0x20000060
 8000ab8:	40012400 	.word	0x40012400
 8000abc:	20000100 	.word	0x20000100

08000ac0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b096      	sub	sp, #88	; 0x58
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 030c 	add.w	r3, r7, #12
 8000adc:	2238      	movs	r2, #56	; 0x38
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f011 fcd7 	bl	8012494 <memset>
  if(adcHandle->Instance==ADC)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a2a      	ldr	r2, [pc, #168]	; (8000b94 <HAL_ADC_MspInit+0xd4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d14d      	bne.n	8000b8c <HAL_ADC_MspInit+0xcc>

  /* USER CODE END ADC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000af0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000af4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_HSI;
 8000af6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000afa:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 f939 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000b0c:	f000 fcde 	bl	80014cc <Error_Handler>
    }

    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b10:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b14:	f7ff ff52 	bl	80009bc <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f7ff ff37 	bl	800098c <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PA12     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000b1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b22:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b24:	2303      	movs	r3, #3
 8000b26:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b30:	4619      	mov	r1, r3
 8000b32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b36:	f003 fafd 	bl	8004134 <HAL_GPIO_Init>

    /* ADC DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b3c:	4a17      	ldr	r2, [pc, #92]	; (8000b9c <HAL_ADC_MspInit+0xdc>)
 8000b3e:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b42:	2205      	movs	r2, #5
 8000b44:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b54:	2280      	movs	r2, #128	; 0x80
 8000b56:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b66:	2220      	movs	r2, #32
 8000b68:	61da      	str	r2, [r3, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000b70:	4809      	ldr	r0, [pc, #36]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b72:	f002 fef5 	bl	8003960 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000b7c:	f000 fca6 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a05      	ldr	r2, [pc, #20]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b84:	651a      	str	r2, [r3, #80]	; 0x50
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_ADC_MspInit+0xd8>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	3758      	adds	r7, #88	; 0x58
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40012400 	.word	0x40012400
 8000b98:	200000c4 	.word	0x200000c4
 8000b9c:	40020008 	.word	0x40020008

08000ba0 <batext_power_on>:
FATFS FatFs; 	//Fatfs handle
FIL fil; 		//File handle
FRESULT fres; //Result after operation

void batext_power_on(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af02      	add	r7, sp, #8
	APP_PRINTF("Begin power on\r\n");
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <batext_power_on+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2100      	movs	r1, #0
 8000bac:	2000      	movs	r0, #0
 8000bae:	f011 f9f9 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2110      	movs	r1, #16
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f003 fd00 	bl	80045be <HAL_GPIO_WritePin>
	debug_print("BatExt power ON\r\n");
 8000bbe:	481d      	ldr	r0, [pc, #116]	; (8000c34 <batext_power_on+0x94>)
 8000bc0:	f000 fc76 	bl	80014b0 <debug_print>
	HAL_Delay(100); // for card insert cap charge
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f001 f90b 	bl	8001de0 <HAL_Delay>
	if(!batext_is_card_inserted()) {
 8000bca:	f000 f905 	bl	8000dd8 <batext_is_card_inserted>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d103      	bne.n	8000bdc <batext_power_on+0x3c>
		debug_print("Error while powering on : No card inserted\r\n");
 8000bd4:	4818      	ldr	r0, [pc, #96]	; (8000c38 <batext_power_on+0x98>)
 8000bd6:	f000 fc6b 	bl	80014b0 <debug_print>
		return;
 8000bda:	e026      	b.n	8000c2a <batext_power_on+0x8a>
	} else {
		debug_print("Success : Card is inserted\r\n");
 8000bdc:	4817      	ldr	r0, [pc, #92]	; (8000c3c <batext_power_on+0x9c>)
 8000bde:	f000 fc67 	bl	80014b0 <debug_print>
	}
	batext_SD_init();
 8000be2:	f000 f903 	bl	8000dec <batext_SD_init>
	HAL_Delay(1000); // more delays between steps may be required at initialisation otherwise it sometimes fails
 8000be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bea:	f001 f8f9 	bl	8001de0 <HAL_Delay>
	batext_AFE_init();
 8000bee:	f000 f843 	bl	8000c78 <batext_AFE_init>
	batext_choose_gain(3);
 8000bf2:	2003      	movs	r0, #3
 8000bf4:	f000 f88a 	bl	8000d0c <batext_choose_gain>

	HAL_Delay(100);
 8000bf8:	2064      	movs	r0, #100	; 0x64
 8000bfa:	f001 f8f1 	bl	8001de0 <HAL_Delay>
	fres = f_open(&fil, "TEST", FA_WRITE | FA_OPEN_APPEND);
 8000bfe:	2232      	movs	r2, #50	; 0x32
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <batext_power_on+0xa0>)
 8000c02:	4810      	ldr	r0, [pc, #64]	; (8000c44 <batext_power_on+0xa4>)
 8000c04:	f00c f96a 	bl	800cedc <f_open>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <batext_power_on+0xa8>)
 8000c0e:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) {
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <batext_power_on+0xa8>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d008      	beq.n	8000c2a <batext_power_on+0x8a>
		APP_PRINTF("f_open error (%i)\r\n", fres);
 8000c18:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <batext_power_on+0xa8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <batext_power_on+0xac>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	2100      	movs	r1, #0
 8000c24:	2000      	movs	r0, #0
 8000c26:	f011 f9bd 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	}
}
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	08012504 	.word	0x08012504
 8000c34:	08012518 	.word	0x08012518
 8000c38:	0801252c 	.word	0x0801252c
 8000c3c:	0801255c 	.word	0x0801255c
 8000c40:	0801257c 	.word	0x0801257c
 8000c44:	20000354 	.word	0x20000354
 8000c48:	20000584 	.word	0x20000584
 8000c4c:	08012584 	.word	0x08012584

08000c50 <batext_power_off>:
void batext_power_off(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	batext_AFE_deinit();
 8000c54:	f000 f838 	bl	8000cc8 <batext_AFE_deinit>
	batext_SD_deinit();
 8000c58:	f000 f92c 	bl	8000eb4 <batext_SD_deinit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2110      	movs	r1, #16
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f003 fcab 	bl	80045be <HAL_GPIO_WritePin>
	debug_print("BatExt power OFF\r\n");
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <batext_power_off+0x24>)
 8000c6a:	f000 fc21 	bl	80014b0 <debug_print>
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08012598 	.word	0x08012598

08000c78 <batext_AFE_init>:
static volatile SAMPLE* ADCData[2] = {&ADCDoubleBuf[0], &ADCDoubleBuf[ADC_BUF_SIZE]};
static volatile uint8_t ADCDataRdy[2] = {0, 0};


void batext_AFE_init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	/*if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK) {
		debug_print("Error while calibrating the ADC\r\n");
		Error_Handler();
	}*/
	if (HAL_TIM_Base_Start(&htim1) != HAL_OK) {
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <batext_AFE_init+0x3c>)
 8000c7e:	f007 f843 	bl	8007d08 <HAL_TIM_Base_Start>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d004      	beq.n	8000c92 <batext_AFE_init+0x1a>
		debug_print("Error while enabling timer TIM1\r\n");
 8000c88:	480b      	ldr	r0, [pc, #44]	; (8000cb8 <batext_AFE_init+0x40>)
 8000c8a:	f000 fc11 	bl	80014b0 <debug_print>
		Error_Handler();
 8000c8e:	f000 fc1d 	bl	80014cc <Error_Handler>
	}
	if (HAL_ADC_Start_DMA(&hadc, (uint32_t *)ADCDoubleBuf, 2*ADC_BUF_SIZE) != HAL_OK) {
 8000c92:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8000c96:	4909      	ldr	r1, [pc, #36]	; (8000cbc <batext_AFE_init+0x44>)
 8000c98:	4809      	ldr	r0, [pc, #36]	; (8000cc0 <batext_AFE_init+0x48>)
 8000c9a:	f002 f971 	bl	8002f80 <HAL_ADC_Start_DMA>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <batext_AFE_init+0x36>
		debug_print("Error while starting the DMA\r\n");
 8000ca4:	4807      	ldr	r0, [pc, #28]	; (8000cc4 <batext_AFE_init+0x4c>)
 8000ca6:	f000 fc03 	bl	80014b0 <debug_print>
		Error_Handler();
 8000caa:	f000 fc0f 	bl	80014cc <Error_Handler>
	}
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20006490 	.word	0x20006490
 8000cb8:	080125ac 	.word	0x080125ac
 8000cbc:	20000588 	.word	0x20000588
 8000cc0:	20000060 	.word	0x20000060
 8000cc4:	080125d0 	.word	0x080125d0

08000cc8 <batext_AFE_deinit>:

void batext_AFE_deinit(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	if (HAL_ADC_Stop_DMA(&hadc) != HAL_OK) {
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <batext_AFE_deinit+0x34>)
 8000cce:	f002 f9dd 	bl	800308c <HAL_ADC_Stop_DMA>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d004      	beq.n	8000ce2 <batext_AFE_deinit+0x1a>
		debug_print("Error while stopping the DMA\r\n");
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <batext_AFE_deinit+0x38>)
 8000cda:	f000 fbe9 	bl	80014b0 <debug_print>
		Error_Handler();
 8000cde:	f000 fbf5 	bl	80014cc <Error_Handler>
	}
	if (HAL_TIM_Base_Stop(&htim1) != HAL_OK) {
 8000ce2:	4808      	ldr	r0, [pc, #32]	; (8000d04 <batext_AFE_deinit+0x3c>)
 8000ce4:	f007 f854 	bl	8007d90 <HAL_TIM_Base_Stop>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d004      	beq.n	8000cf8 <batext_AFE_deinit+0x30>
		debug_print("Error while disabling timer TIM1\r\n");
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <batext_AFE_deinit+0x40>)
 8000cf0:	f000 fbde 	bl	80014b0 <debug_print>
		Error_Handler();
 8000cf4:	f000 fbea 	bl	80014cc <Error_Handler>
	}
}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000060 	.word	0x20000060
 8000d00:	080125f0 	.word	0x080125f0
 8000d04:	20006490 	.word	0x20006490
 8000d08:	08012610 	.word	0x08012610

08000d0c <batext_choose_gain>:

/*
 *	gain : 0 disconnected - 1 33 dB - 2 43 dB - 3 53 dB
 */
void batext_choose_gain(uint8_t gain)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, gain & 0x01);
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	461a      	mov	r2, r3
 8000d20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d28:	f003 fc49 	bl	80045be <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, (gain & 0x02) >> 1);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	105b      	asrs	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	461a      	mov	r2, r3
 8000d3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f003 fc3c 	bl	80045be <HAL_GPIO_WritePin>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <ADC_Callback>:

static void ADC_Callback(int buf_cplt) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	if (ADCDataRdy[1-buf_cplt]) {
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f1c3 0301 	rsb	r3, r3, #1
 8000d5e:	4a10      	ldr	r2, [pc, #64]	; (8000da0 <ADC_Callback+0x50>)
 8000d60:	5cd3      	ldrb	r3, [r2, r3]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d004      	beq.n	8000d72 <ADC_Callback+0x22>
		debug_print("Error: ADC Data buffer full\r\n");
 8000d68:	480e      	ldr	r0, [pc, #56]	; (8000da4 <ADC_Callback+0x54>)
 8000d6a:	f000 fba1 	bl	80014b0 <debug_print>
		Error_Handler();
 8000d6e:	f000 fbad 	bl	80014cc <Error_Handler>
	}
	ADCDataRdy[buf_cplt] = 1;
 8000d72:	4a0b      	ldr	r2, [pc, #44]	; (8000da0 <ADC_Callback+0x50>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4413      	add	r3, r2
 8000d78:	2201      	movs	r2, #1
 8000d7a:	701a      	strb	r2, [r3, #0]

	//APP_PRINTF("ADC Callback : buffer %d\r\n", buf_cplt);

//	start_cycle_count();
	batext_SD_write((const void *) ADCData[buf_cplt], ADC_BUF_SIZE*S_SIZE); // 2 bytes per uint16
 8000d7c:	4a0a      	ldr	r2, [pc, #40]	; (8000da8 <ADC_Callback+0x58>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d84:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f000 f8a7 	bl	8000edc <batext_SD_write>
//	stop_cycle_count("SD Write");
	//APP_PRINTF("Wrote %d bytes\r\n", ADC_BUF_SIZE*S_SIZE);

	ADCDataRdy[buf_cplt] = 0;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <ADC_Callback+0x50>)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4413      	add	r3, r2
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20006348 	.word	0x20006348
 8000da4:	08012634 	.word	0x08012634
 8000da8:	20000000 	.word	0x20000000

08000dac <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	ADC_Callback(1);
 8000db4:	2001      	movs	r0, #1
 8000db6:	f7ff ffcb 	bl	8000d50 <ADC_Callback>
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b082      	sub	sp, #8
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
	ADC_Callback(0);
 8000dca:	2000      	movs	r0, #0
 8000dcc:	f7ff ffc0 	bl	8000d50 <ADC_Callback>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <batext_is_card_inserted>:
 *
 *******************/


int batext_is_card_inserted(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BatExt_CD_GPIO_Port, BatExt_CD_Pin);
 8000ddc:	2101      	movs	r1, #1
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de2:	f003 fbd5 	bl	8004590 <HAL_GPIO_ReadPin>
 8000de6:	4603      	mov	r3, r0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	bd80      	pop	{r7, pc}

08000dec <batext_SD_init>:


void batext_SD_init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
	// Mount
	HAL_Delay(1000); // to let time for SD to settle if just inserted
 8000df2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000df6:	f000 fff3 	bl	8001de0 <HAL_Delay>
	fres = f_mount(&FatFs, "", 1); //1=mount now
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	4927      	ldr	r1, [pc, #156]	; (8000e9c <batext_SD_init+0xb0>)
 8000dfe:	4828      	ldr	r0, [pc, #160]	; (8000ea0 <batext_SD_init+0xb4>)
 8000e00:	f00c f826 	bl	800ce50 <f_mount>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b26      	ldr	r3, [pc, #152]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e0a:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000e0c:	4b25      	ldr	r3, [pc, #148]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00a      	beq.n	8000e2a <batext_SD_init+0x3e>
		APP_PRINTF("f_mount error (%i)\r\n", fres);
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	4b23      	ldr	r3, [pc, #140]	; (8000ea8 <batext_SD_init+0xbc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2000      	movs	r0, #0
 8000e22:	f011 f8bf 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		Error_Handler();
 8000e26:	f000 fb51 	bl	80014cc <Error_Handler>
	}

	// Statistiques
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS* getFreeFs;
	fres = f_getfree("", &free_clusters, &getFreeFs);
 8000e2a:	463a      	mov	r2, r7
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4619      	mov	r1, r3
 8000e30:	481a      	ldr	r0, [pc, #104]	; (8000e9c <batext_SD_init+0xb0>)
 8000e32:	f00c fc2e 	bl	800d692 <f_getfree>
 8000e36:	4603      	mov	r3, r0
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	if (fres != FR_OK) {
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00a      	beq.n	8000e5c <batext_SD_init+0x70>
		APP_PRINTF("f_getfree error (%i)\r\n", fres);
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <batext_SD_init+0xb8>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <batext_SD_init+0xc0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	2100      	movs	r1, #0
 8000e52:	2000      	movs	r0, #0
 8000e54:	f011 f8a6 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		Error_Handler();
 8000e58:	f000 fb38 	bl	80014cc <Error_Handler>
	}
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	3b02      	subs	r3, #2
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	8952      	ldrh	r2, [r2, #10]
 8000e66:	fb02 f303 	mul.w	r3, r2, r3
 8000e6a:	60fb      	str	r3, [r7, #12]
	free_sectors = free_clusters * getFreeFs->csize;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	895b      	ldrh	r3, [r3, #10]
 8000e70:	461a      	mov	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	60bb      	str	r3, [r7, #8]
	APP_PRINTF("SD card stats:\r\n%u KiB total drive space.\r\n%u KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	085b      	lsrs	r3, r3, #1
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	0852      	lsrs	r2, r2, #1
 8000e82:	9201      	str	r2, [sp, #4]
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <batext_SD_init+0xc4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f011 f889 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	08012654 	.word	0x08012654
 8000ea0:	20000124 	.word	0x20000124
 8000ea4:	20000584 	.word	0x20000584
 8000ea8:	08012658 	.word	0x08012658
 8000eac:	08012670 	.word	0x08012670
 8000eb0:	08012688 	.word	0x08012688

08000eb4 <batext_SD_deinit>:


void batext_SD_deinit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	f_close(&fil);
 8000eb8:	4806      	ldr	r0, [pc, #24]	; (8000ed4 <batext_SD_deinit+0x20>)
 8000eba:	f00c fbc0 	bl	800d63e <f_close>
	HAL_Delay(1000);
 8000ebe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec2:	f000 ff8d 	bl	8001de0 <HAL_Delay>

	f_mount(NULL, "", 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4903      	ldr	r1, [pc, #12]	; (8000ed8 <batext_SD_deinit+0x24>)
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f00b ffc0 	bl	800ce50 <f_mount>
}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000354 	.word	0x20000354
 8000ed8:	08012654 	.word	0x08012654

08000edc <batext_SD_write>:


int batext_SD_write(const void *data, uint32_t size)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af02      	add	r7, sp, #8
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
	UINT written;
	fres = f_write(&fil, data, size, &written);
 8000ee6:	f107 030c 	add.w	r3, r7, #12
 8000eea:	683a      	ldr	r2, [r7, #0]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4827      	ldr	r0, [pc, #156]	; (8000f8c <batext_SD_write+0xb0>)
 8000ef0:	f00c f9b2 	bl	800d258 <f_write>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4b25      	ldr	r3, [pc, #148]	; (8000f90 <batext_SD_write+0xb4>)
 8000efa:	701a      	strb	r2, [r3, #0]
	if(fres != FR_OK) {
 8000efc:	4b24      	ldr	r3, [pc, #144]	; (8000f90 <batext_SD_write+0xb4>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d034      	beq.n	8000f6e <batext_SD_write+0x92>
		APP_PRINTF("f_write error (%i), trying to recover\r\n", fres);
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <batext_SD_write+0xb4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <batext_SD_write+0xb8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2000      	movs	r0, #0
 8000f12:	f011 f847 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		batext_SD_deinit();
 8000f16:	f7ff ffcd 	bl	8000eb4 <batext_SD_deinit>
		batext_SD_init();
 8000f1a:	f7ff ff67 	bl	8000dec <batext_SD_init>
		HAL_Delay(1000);
 8000f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f22:	f000 ff5d 	bl	8001de0 <HAL_Delay>
		fres = f_open(&fil, "TEST", FA_WRITE | FA_OPEN_APPEND);
 8000f26:	2232      	movs	r2, #50	; 0x32
 8000f28:	491b      	ldr	r1, [pc, #108]	; (8000f98 <batext_SD_write+0xbc>)
 8000f2a:	4818      	ldr	r0, [pc, #96]	; (8000f8c <batext_SD_write+0xb0>)
 8000f2c:	f00b ffd6 	bl	800cedc <f_open>
 8000f30:	4603      	mov	r3, r0
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <batext_SD_write+0xb4>)
 8000f36:	701a      	strb	r2, [r3, #0]
		if(fres != FR_OK) {
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <batext_SD_write+0xb4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <batext_SD_write+0x76>
			APP_PRINTF("f_open error (%i)\r\n", fres);
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <batext_SD_write+0xb4>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <batext_SD_write+0xc0>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f011 f829 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		}
		fres = f_write(&fil, data, size, &written); //If we still fail, it seems dead
 8000f52:	f107 030c 	add.w	r3, r7, #12
 8000f56:	683a      	ldr	r2, [r7, #0]
 8000f58:	6879      	ldr	r1, [r7, #4]
 8000f5a:	480c      	ldr	r0, [pc, #48]	; (8000f8c <batext_SD_write+0xb0>)
 8000f5c:	f00c f97c 	bl	800d258 <f_write>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <batext_SD_write+0xb4>)
 8000f66:	701a      	strb	r2, [r3, #0]
		return fres;
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <batext_SD_write+0xb4>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	e00a      	b.n	8000f84 <batext_SD_write+0xa8>
	}
	if(written != size) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	429a      	cmp	r2, r3
 8000f74:	d005      	beq.n	8000f82 <batext_SD_write+0xa6>
		APP_PRINTF("f_write error : did not write all the bytes\r\n");
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <batext_SD_write+0xc4>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f011 f811 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	}
	return FR_OK;
 8000f82:	2300      	movs	r3, #0
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000354 	.word	0x20000354
 8000f90:	20000584 	.word	0x20000584
 8000f94:	080126c8 	.word	0x080126c8
 8000f98:	0801257c 	.word	0x0801257c
 8000f9c:	08012584 	.word	0x08012584
 8000fa0:	080126f0 	.word	0x080126f0

08000fa4 <LL_AHB1_GRP1_EnableClock>:
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
}
 8000fca:	bf00      	nop
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000fd8:	2004      	movs	r0, #4
 8000fda:	f7ff ffe3 	bl	8000fa4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f7ff ffe0 	bl	8000fa4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	200b      	movs	r0, #11
 8000fea:	f002 fc82 	bl	80038f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fee:	200b      	movs	r0, #11
 8000ff0:	f002 fc99 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f002 fc7a 	bl	80038f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ffe:	200c      	movs	r0, #12
 8001000:	f002 fc91 	bl	8003926 <HAL_NVIC_EnableIRQ>

}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}

08001008 <LL_AHB2_GRP1_EnableClock>:
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001016:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001024:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	1d3b      	adds	r3, r7, #4
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff ffdb 	bl	8001008 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001052:	2001      	movs	r0, #1
 8001054:	f7ff ffd8 	bl	8001008 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001058:	2004      	movs	r0, #4
 800105a:	f7ff ffd5 	bl	8001008 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BatExt_CS_GPIO_Port, BatExt_CS_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001064:	4828      	ldr	r0, [pc, #160]	; (8001108 <MX_GPIO_Init+0xd0>)
 8001066:	f003 faaa 	bl	80045be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BatExt_PWR_GPIO_Port, BatExt_PWR_Pin, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2110      	movs	r1, #16
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f003 faa4 	bl	80045be <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|BatExt_gain1_Pin|BatExt_gain2_Pin, GPIO_PIN_RESET);
 8001076:	2200      	movs	r2, #0
 8001078:	f44f 6142 	mov.w	r1, #3104	; 0xc20
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f003 fa9d 	bl	80045be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BatExt_CS_Pin;
 8001084:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001088:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BatExt_CS_GPIO_Port, &GPIO_InitStruct);
 8001096:	1d3b      	adds	r3, r7, #4
 8001098:	4619      	mov	r1, r3
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <MX_GPIO_Init+0xd0>)
 800109c:	f003 f84a 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BatExt_CD_Pin;
 80010a0:	2301      	movs	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BatExt_CD_GPIO_Port, &GPIO_InitStruct);
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	4619      	mov	r1, r3
 80010b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b4:	f003 f83e 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BatExt_PWR_Pin|LED_Pin|BatExt_gain1_Pin|BatExt_gain2_Pin;
 80010b8:	f44f 6343 	mov.w	r3, #3120	; 0xc30
 80010bc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010be:	2301      	movs	r3, #1
 80010c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d2:	f003 f82f 	bl	8004134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 80010d6:	23c0      	movs	r3, #192	; 0xc0
 80010d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f003 f822 	bl	8004134 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010f0:	2200      	movs	r2, #0
 80010f2:	2100      	movs	r1, #0
 80010f4:	2016      	movs	r0, #22
 80010f6:	f002 fbfc 	bl	80038f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010fa:	2016      	movs	r0, #22
 80010fc:	f002 fc13 	bl	8003926 <HAL_NVIC_EnableIRQ>

}
 8001100:	bf00      	nop
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	48000400 	.word	0x48000400

0800110c <LL_AHB2_GRP1_EnableClock>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800111a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001124:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001128:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001130:	68fb      	ldr	r3, [r7, #12]
}
 8001132:	bf00      	nop
 8001134:	3714      	adds	r7, #20
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <LL_APB1_GRP1_EnableClock>:
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001148:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4313      	orrs	r3, r2
 8001152:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001160:	68fb      	ldr	r3, [r7, #12]
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_I2C1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <MX_I2C1_Init+0x7c>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a8:	f003 fa52 	bl	8004650 <HAL_I2C_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b2:	f000 f98b 	bl	80014cc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011ba:	f003 fad8 	bl	800476e <HAL_I2CEx_ConfigAnalogFilter>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f000 f982 	bl	80014cc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011cc:	f003 fb19 	bl	8004802 <HAL_I2CEx_ConfigDigitalFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f979 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	2000634c 	.word	0x2000634c
 80011e4:	40005400 	.word	0x40005400
 80011e8:	20303e5d 	.word	0x20303e5d

080011ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2238      	movs	r2, #56	; 0x38
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f011 f941 	bl	8012494 <memset>
  if(i2cHandle->Instance==I2C1)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_I2C_MspInit+0x84>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d125      	bne.n	8001268 <HAL_I2C_MspInit+0x7c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800121c:	2340      	movs	r3, #64	; 0x40
 800121e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001220:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001224:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4618      	mov	r0, r3
 800122c:	f004 fda4 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001236:	f000 f949 	bl	80014cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	2002      	movs	r0, #2
 800123c:	f7ff ff66 	bl	800110c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001240:	23c0      	movs	r3, #192	; 0xc0
 8001242:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001244:	2312      	movs	r3, #18
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001250:	2304      	movs	r3, #4
 8001252:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <HAL_I2C_MspInit+0x88>)
 800125c:	f002 ff6a 	bl	8004134 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001260:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001264:	f7ff ff6a 	bl	800113c <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3758      	adds	r7, #88	; 0x58
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40005400 	.word	0x40005400
 8001274:	48000400 	.word	0x48000400

08001278 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001288:	f023 0218 	bic.w	r2, r3, #24
 800128c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4313      	orrs	r3, r2
 8001294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
	...

080012a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a8:	f001 fb16 	bl	80028d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ac:	f000 f81e 	bl	80012ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b0:	f7ff fec2 	bl	8001038 <MX_GPIO_Init>
  MX_DMA_Init();
 80012b4:	f7ff fe8e 	bl	8000fd4 <MX_DMA_Init>
  MX_I2C1_Init();
 80012b8:	f7ff ff58 	bl	800116c <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80012bc:	f001 f8d4 	bl	8002468 <MX_LPUART1_UART_Init>
  MX_SubGHz_Phy_Init();
 80012c0:	f00f fd17 	bl	8010cf2 <MX_SubGHz_Phy_Init>
  MX_ADC_Init();
 80012c4:	f7ff fb92 	bl	80009ec <MX_ADC_Init>
  MX_TIM1_Init();
 80012c8:	f000 fdd6 	bl	8001e78 <MX_TIM1_Init>
  MX_SPI1_Init();
 80012cc:	f000 fb50 	bl	8001970 <MX_SPI1_Init>
  MX_FATFS_Init();
 80012d0:	f009 fb40 	bl	800a954 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  // Print banner and blink LED //
  debug_print("\n\nBonjourre Brock !\n\r\n");
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <main+0x44>)
 80012d6:	f000 f8eb 	bl	80014b0 <debug_print>

  // Init BME680 sensor with or without selftest //
  //my_sensor_init(&hi2c1, 0);
  blink(200);
 80012da:	20c8      	movs	r0, #200	; 0xc8
 80012dc:	f000 f864 	bl	80013a8 <blink>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 80012e0:	f00f fd0f 	bl	8010d02 <MX_SubGHz_Phy_Process>
 80012e4:	e7fc      	b.n	80012e0 <main+0x3c>
 80012e6:	bf00      	nop
 80012e8:	08012720 	.word	0x08012720

080012ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09a      	sub	sp, #104	; 0x68
 80012f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	2248      	movs	r2, #72	; 0x48
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f011 f8ca 	bl	8012494 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
 8001310:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001312:	f003 fac1 	bl	8004898 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001316:	2000      	movs	r0, #0
 8001318:	f7ff ffae 	bl	8001278 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <SystemClock_Config+0xb8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001324:	4a1f      	ldr	r2, [pc, #124]	; (80013a4 <SystemClock_Config+0xb8>)
 8001326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <SystemClock_Config+0xb8>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001338:	2326      	movs	r3, #38	; 0x26
 800133a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800133c:	2381      	movs	r3, #129	; 0x81
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001340:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800134a:	2340      	movs	r3, #64	; 0x40
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800134e:	2300      	movs	r3, #0
 8001350:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001352:	23b0      	movs	r3, #176	; 0xb0
 8001354:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fde6 	bl	8004f30 <HAL_RCC_OscConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800136a:	f000 f8af 	bl	80014cc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800136e:	234f      	movs	r3, #79	; 0x4f
 8001370:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001386:	f107 0308 	add.w	r3, r7, #8
 800138a:	2102      	movs	r1, #2
 800138c:	4618      	mov	r0, r3
 800138e:	f004 f951 	bl	8005634 <HAL_RCC_ClockConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001398:	f000 f898 	bl	80014cc <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3768      	adds	r7, #104	; 0x68
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	58000400 	.word	0x58000400

080013a8 <blink>:

/* USER CODE BEGIN 4 */


void blink(int time_ms){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013b0:	2120      	movs	r1, #32
 80013b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b6:	f003 f919 	bl	80045ec <HAL_GPIO_TogglePin>
	HAL_Delay(time_ms);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 fd0f 	bl	8001de0 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80013c2:	2120      	movs	r1, #32
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f003 f910 	bl	80045ec <HAL_GPIO_TogglePin>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_GPIO_EXTI_Callback>:

/* GPIO button press callback */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	80fb      	strh	r3, [r7, #6]
	//debug_print("GPIO EXTI callback - ");
	if(GPIO_Pin == Button1_Pin) {
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	2b40      	cmp	r3, #64	; 0x40
 80013e2:	d109      	bne.n	80013f8 <HAL_GPIO_EXTI_Callback+0x24>
		debug_print("Button 1\r\n");
 80013e4:	4810      	ldr	r0, [pc, #64]	; (8001428 <HAL_GPIO_EXTI_Callback+0x54>)
 80013e6:	f000 f863 	bl	80014b0 <debug_print>
		batext_power_on();
 80013ea:	f7ff fbd9 	bl	8000ba0 <batext_power_on>
		blink(500);
 80013ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013f2:	f7ff ffd9 	bl	80013a8 <blink>
		batext_power_off();
		blink(500);
	} else {
		debug_print("other?\r\n");
	}
}
 80013f6:	e012      	b.n	800141e <HAL_GPIO_EXTI_Callback+0x4a>
	} else if (GPIO_Pin == Button2_Pin) {
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	2b80      	cmp	r3, #128	; 0x80
 80013fc:	d10c      	bne.n	8001418 <HAL_GPIO_EXTI_Callback+0x44>
		debug_print("Button 2\r\n");
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_GPIO_EXTI_Callback+0x58>)
 8001400:	f000 f856 	bl	80014b0 <debug_print>
		debug_print("Shutting down\r\n");
 8001404:	480a      	ldr	r0, [pc, #40]	; (8001430 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001406:	f000 f853 	bl	80014b0 <debug_print>
		batext_power_off();
 800140a:	f7ff fc21 	bl	8000c50 <batext_power_off>
		blink(500);
 800140e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001412:	f7ff ffc9 	bl	80013a8 <blink>
}
 8001416:	e002      	b.n	800141e <HAL_GPIO_EXTI_Callback+0x4a>
		debug_print("other?\r\n");
 8001418:	4806      	ldr	r0, [pc, #24]	; (8001434 <HAL_GPIO_EXTI_Callback+0x60>)
 800141a:	f000 f849 	bl	80014b0 <debug_print>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	08012738 	.word	0x08012738
 800142c:	08012744 	.word	0x08012744
 8001430:	08012750 	.word	0x08012750
 8001434:	08012760 	.word	0x08012760

08001438 <HAL_RTCEx_WakeUpTimerEventCallback>:


void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	bme_data = get_BME_data();
	make_packet(bme_data);
	send_packet();
	blink_led(1);
#elif(SEND_SYNC_PACKETS && !RTC_FETCH_SEND_BME)
	send_sync_packet();
 8001440:	f000 f870 	bl	8001524 <send_sync_packet>
#endif
}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <change_SF>:


int change_SF()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af02      	add	r7, sp, #8
	if(++currentSF > 12) {
 8001452:	4b12      	ldr	r3, [pc, #72]	; (800149c <change_SF+0x50>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	4a10      	ldr	r2, [pc, #64]	; (800149c <change_SF+0x50>)
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <change_SF+0x50>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b0c      	cmp	r3, #12
 8001462:	dd02      	ble.n	800146a <change_SF+0x1e>
		currentSF = 7;
 8001464:	4b0d      	ldr	r3, [pc, #52]	; (800149c <change_SF+0x50>)
 8001466:	2207      	movs	r2, #7
 8001468:	601a      	str	r2, [r3, #0]
	}
	SubghzApp_SetLoRaConfig(currentTxPower, currentSF);
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <change_SF+0x54>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <change_SF+0x50>)
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f00f fcb5 	bl	8010de4 <SubghzApp_SetLoRaConfig>
#if(SEND_SYNC_PACKETS)
	APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
 800147a:	23b4      	movs	r3, #180	; 0xb4
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <change_SF+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	2100      	movs	r1, #0
 8001484:	2000      	movs	r0, #0
 8001486:	f010 fd8d 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Rx(RXTIMEOUT);
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <change_SF+0x5c>)
 800148c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <change_SF+0x60>)
 8001490:	4798      	blx	r3
#endif
	return currentSF;
 8001492:	4b02      	ldr	r3, [pc, #8]	; (800149c <change_SF+0x50>)
 8001494:	681b      	ldr	r3, [r3, #0]
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000000c 	.word	0x2000000c
 80014a0:	20000008 	.word	0x20000008
 80014a4:	0801276c 	.word	0x0801276c
 80014a8:	08012c34 	.word	0x08012c34
 80014ac:	0002bf20 	.word	0x0002bf20

080014b0 <debug_print>:
	return currentTxPower;
}


void debug_print(const char* out)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
#if(VERBOSE)
	APP_PRINTF(out);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	2100      	movs	r1, #0
 80014be:	2000      	movs	r0, #0
 80014c0:	f010 fd70 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
#endif
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <Error_Handler+0x8>
	...

080014d8 <send_packet>:
	}
#endif
}

void send_packet()
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af02      	add	r7, sp, #8
	APP_PRINTF("Sending %d bytes...\r\n", packet_length);
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <send_packet+0x38>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <send_packet+0x3c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2000      	movs	r0, #0
 80014ec:	f010 fd5a 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	if(Radio.Send(packet_buffer, packet_length)) {
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <send_packet+0x40>)
 80014f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <send_packet+0x38>)
 80014f6:	7812      	ldrb	r2, [r2, #0]
 80014f8:	4611      	mov	r1, r2
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <send_packet+0x44>)
 80014fc:	4798      	blx	r3
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <send_packet+0x32>
		debug_print("Send packet failed.\r\n");
 8001504:	4806      	ldr	r0, [pc, #24]	; (8001520 <send_packet+0x48>)
 8001506:	f7ff ffd3 	bl	80014b0 <debug_print>
	}
}
 800150a:	bf00      	nop
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200063e0 	.word	0x200063e0
 8001514:	080127c8 	.word	0x080127c8
 8001518:	08012c34 	.word	0x08012c34
 800151c:	200063a0 	.word	0x200063a0
 8001520:	080127e0 	.word	0x080127e0

08001524 <send_sync_packet>:
	send_packet();
}

#if(SEND_SYNC_PACKETS)
void send_sync_packet()
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af02      	add	r7, sp, #8
	if(sync_num == 1) {
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <send_sync_packet+0x68>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d103      	bne.n	800153a <send_sync_packet+0x16>
		myRTC_start(SYNC_PACKET_DELAY);
 8001532:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001536:	f000 f9b3 	bl	80018a0 <myRTC_start>
	}
	if(sync_num <= SYNC_PACKET_NUMBER) {
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <send_sync_packet+0x68>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b06      	cmp	r3, #6
 8001540:	d80f      	bhi.n	8001562 <send_sync_packet+0x3e>
		packet_length = 1;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <send_sync_packet+0x6c>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
		packet_buffer[0] = sync_num;
 8001548:	4b10      	ldr	r3, [pc, #64]	; (800158c <send_sync_packet+0x68>)
 800154a:	781a      	ldrb	r2, [r3, #0]
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <send_sync_packet+0x70>)
 800154e:	701a      	strb	r2, [r3, #0]
		send_packet();
 8001550:	f7ff ffc2 	bl	80014d8 <send_packet>
		sync_num++;
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <send_sync_packet+0x68>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <send_sync_packet+0x68>)
 800155e:	701a      	strb	r2, [r3, #0]
		sync_num = 1;
		myRTC_stop();
		APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
		Radio.Rx(RXTIMEOUT);
	}
}
 8001560:	e010      	b.n	8001584 <send_sync_packet+0x60>
		sync_num = 1;
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <send_sync_packet+0x68>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
		myRTC_stop();
 8001568:	f000 f9be 	bl	80018e8 <myRTC_stop>
		APP_PRINTF("Radio in RX mode for %ds...\r\n", RXTIMEOUT/1000);
 800156c:	23b4      	movs	r3, #180	; 0xb4
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <send_sync_packet+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f010 fd14 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		Radio.Rx(RXTIMEOUT);
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <send_sync_packet+0x78>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	4807      	ldr	r0, [pc, #28]	; (80015a0 <send_sync_packet+0x7c>)
 8001582:	4798      	blx	r3
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	20000010 	.word	0x20000010
 8001590:	200063e0 	.word	0x200063e0
 8001594:	200063a0 	.word	0x200063a0
 8001598:	080127f8 	.word	0x080127f8
 800159c:	08012c34 	.word	0x08012c34
 80015a0:	0002bf20 	.word	0x0002bf20

080015a4 <decode_print_packet>:
#endif

void decode_print_packet(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 80015a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015a6:	b093      	sub	sp, #76	; 0x4c
 80015a8:	af08      	add	r7, sp, #32
 80015aa:	6178      	str	r0, [r7, #20]
 80015ac:	4608      	mov	r0, r1
 80015ae:	4611      	mov	r1, r2
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	827b      	strh	r3, [r7, #18]
 80015b6:	460b      	mov	r3, r1
 80015b8:	823b      	strh	r3, [r7, #16]
 80015ba:	4613      	mov	r3, r2
 80015bc:	73fb      	strb	r3, [r7, #15]
	float rssi_f = -((float)rssi)/2;
 80015be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fe9a 	bl	80002fc <__aeabi_i2f>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80015ce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ff9a 	bl	800050c <__aeabi_fdiv>
 80015d8:	4603      	mov	r3, r0
 80015da:	623b      	str	r3, [r7, #32]
	float snr_f = ((float)LoraSnr_FskCfo)/4;
 80015dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fe8b 	bl	80002fc <__aeabi_i2f>
 80015e6:	4603      	mov	r3, r0
 80015e8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff8d 	bl	800050c <__aeabi_fdiv>
 80015f2:	4603      	mov	r3, r0
 80015f4:	61fb      	str	r3, [r7, #28]
	APP_PRINTF("PACKET RECEIVED --- RSSI = %d (%d.%d dBm)     SNR = %d (%d.%d dB)     SIZE=%d bytes\n                    PAYLOAD=0x",
 80015f6:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 80015fa:	6a38      	ldr	r0, [r7, #32]
 80015fc:	f7ff f822 	bl	8000644 <__aeabi_f2iz>
 8001600:	60b8      	str	r0, [r7, #8]
 8001602:	4935      	ldr	r1, [pc, #212]	; (80016d8 <decode_print_packet+0x134>)
 8001604:	6a38      	ldr	r0, [r7, #32]
 8001606:	f7fe fecd 	bl	80003a4 <__aeabi_fmul>
 800160a:	4603      	mov	r3, r0
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f819 	bl	8000644 <__aeabi_f2iz>
 8001612:	4602      	mov	r2, r0
 8001614:	4b31      	ldr	r3, [pc, #196]	; (80016dc <decode_print_packet+0x138>)
 8001616:	fb83 1302 	smull	r1, r3, r3, r2
 800161a:	1099      	asrs	r1, r3, #2
 800161c:	17d3      	asrs	r3, r2, #31
 800161e:	1acc      	subs	r4, r1, r3
 8001620:	4623      	mov	r3, r4
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4423      	add	r3, r4
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	1ad4      	subs	r4, r2, r3
 800162a:	f997 600f 	ldrsb.w	r6, [r7, #15]
 800162e:	69f8      	ldr	r0, [r7, #28]
 8001630:	f7ff f808 	bl	8000644 <__aeabi_f2iz>
 8001634:	6078      	str	r0, [r7, #4]
 8001636:	492a      	ldr	r1, [pc, #168]	; (80016e0 <decode_print_packet+0x13c>)
 8001638:	69f8      	ldr	r0, [r7, #28]
 800163a:	f7fe feb3 	bl	80003a4 <__aeabi_fmul>
 800163e:	4603      	mov	r3, r0
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe ffff 	bl	8000644 <__aeabi_f2iz>
 8001646:	4602      	mov	r2, r0
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <decode_print_packet+0x140>)
 800164a:	fb83 1302 	smull	r1, r3, r3, r2
 800164e:	1159      	asrs	r1, r3, #5
 8001650:	17d3      	asrs	r3, r2, #31
 8001652:	1acb      	subs	r3, r1, r3
 8001654:	2164      	movs	r1, #100	; 0x64
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	8a7a      	ldrh	r2, [r7, #18]
 800165e:	9206      	str	r2, [sp, #24]
 8001660:	9305      	str	r3, [sp, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	9304      	str	r3, [sp, #16]
 8001666:	9603      	str	r6, [sp, #12]
 8001668:	9402      	str	r4, [sp, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	9500      	str	r5, [sp, #0]
 8001670:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <decode_print_packet+0x144>)
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2000      	movs	r0, #0
 8001678:	f010 fc94 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
			((int)(rssi_f*10))%10,
			LoraSnr_FskCfo,
			(int)(snr_f),
			((int)(snr_f*100))%100,
			size);
	for(uint16_t i = 0; i < size; ++i) {
 800167c:	2300      	movs	r3, #0
 800167e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001680:	e00d      	b.n	800169e <decode_print_packet+0xfa>
		APP_PRINTF("%02x", payload[i]);
 8001682:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	4b17      	ldr	r3, [pc, #92]	; (80016ec <decode_print_packet+0x148>)
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2000      	movs	r0, #0
 8001694:	f010 fc86 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	for(uint16_t i = 0; i < size; ++i) {
 8001698:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800169a:	3301      	adds	r3, #1
 800169c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800169e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80016a0:	8a7b      	ldrh	r3, [r7, #18]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d3ed      	bcc.n	8001682 <decode_print_packet+0xde>
	}
	APP_PRINTF("\r\n");
 80016a6:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <decode_print_packet+0x14c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	2100      	movs	r1, #0
 80016ac:	2000      	movs	r0, #0
 80016ae:	f010 fc79 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
		myRTC_start(RTC_DELAY);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
	}
#endif
#if(SEND_SYNC_PACKETS)
	if(payload[0] == 0x06) {
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d10a      	bne.n	80016d0 <decode_print_packet+0x12c>
		int sf = change_SF();
 80016ba:	f7ff fec7 	bl	800144c <change_SF>
 80016be:	61b8      	str	r0, [r7, #24]
		APP_PRINTF("Changed LoRa config : SF=%d\r\n", sf);
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <decode_print_packet+0x150>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2000      	movs	r0, #0
 80016cc:	f010 fc6a 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
	}
#endif
}
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	41200000 	.word	0x41200000
 80016dc:	66666667 	.word	0x66666667
 80016e0:	42c80000 	.word	0x42c80000
 80016e4:	51eb851f 	.word	0x51eb851f
 80016e8:	08012818 	.word	0x08012818
 80016ec:	0801288c 	.word	0x0801288c
 80016f0:	08012894 	.word	0x08012894
 80016f4:	08012898 	.word	0x08012898

080016f8 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80016fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001704:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001708:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800170c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_APB1_GRP1_EnableClock>:
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001720:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001724:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001726:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4313      	orrs	r3, r2
 800172e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4013      	ands	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800173c:	68fb      	ldr	r3, [r7, #12]
}
 800173e:	bf00      	nop
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr

08001748 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08c      	sub	sp, #48	; 0x30
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	222c      	movs	r2, #44	; 0x2c
 8001752:	2100      	movs	r1, #0
 8001754:	4618      	mov	r0, r3
 8001756:	f010 fe9d 	bl	8012494 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <MX_RTC_Init+0xc8>)
 800175c:	4a2d      	ldr	r2, [pc, #180]	; (8001814 <MX_RTC_Init+0xcc>)
 800175e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001760:	4b2b      	ldr	r3, [pc, #172]	; (8001810 <MX_RTC_Init+0xc8>)
 8001762:	221f      	movs	r2, #31
 8001764:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <MX_RTC_Init+0xc8>)
 8001768:	2200      	movs	r2, #0
 800176a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <MX_RTC_Init+0xc8>)
 800176e:	2200      	movs	r2, #0
 8001770:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <MX_RTC_Init+0xc8>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <MX_RTC_Init+0xc8>)
 800177a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001780:	4b23      	ldr	r3, [pc, #140]	; (8001810 <MX_RTC_Init+0xc8>)
 8001782:	2200      	movs	r2, #0
 8001784:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <MX_RTC_Init+0xc8>)
 8001788:	f44f 7280 	mov.w	r2, #256	; 0x100
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800178e:	4820      	ldr	r0, [pc, #128]	; (8001810 <MX_RTC_Init+0xc8>)
 8001790:	f004 fc0c 	bl	8005fac <HAL_RTC_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800179a:	f7ff fe97 	bl	80014cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800179e:	481c      	ldr	r0, [pc, #112]	; (8001810 <MX_RTC_Init+0xc8>)
 80017a0:	f004 fff6 	bl	8006790 <HAL_RTCEx_SetSSRU_IT>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80017aa:	f7ff fe8f 	bl	80014cc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 80017ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017b2:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 80017bc:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80017c0:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 80017c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2200      	movs	r2, #0
 80017cc:	4619      	mov	r1, r3
 80017ce:	4810      	ldr	r0, [pc, #64]	; (8001810 <MX_RTC_Init+0xc8>)
 80017d0:	f004 fc6e 	bl	80060b0 <HAL_RTC_SetAlarm_IT>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_RTC_Init+0x96>
  {
    Error_Handler();
 80017da:	f7ff fe77 	bl	80014cc <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 6143, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 80017de:	2300      	movs	r3, #0
 80017e0:	2200      	movs	r2, #0
 80017e2:	f241 71ff 	movw	r1, #6143	; 0x17ff
 80017e6:	480a      	ldr	r0, [pc, #40]	; (8001810 <MX_RTC_Init+0xc8>)
 80017e8:	f004 feac 	bl	8006544 <HAL_RTCEx_SetWakeUpTimer_IT>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80017f2:	f7ff fe6b 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  // deactivating is important because RTC is not stopped at reset
  if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc)) {
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <MX_RTC_Init+0xc8>)
 80017f8:	f004 ff2a 	bl	8006650 <HAL_RTCEx_DeactivateWakeUpTimer>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_RTC_Init+0xbe>
  		Error_Handler();
 8001802:	f7ff fe63 	bl	80014cc <Error_Handler>
  	}
  /* USER CODE END RTC_Init 2 */

}
 8001806:	bf00      	nop
 8001808:	3730      	adds	r7, #48	; 0x30
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200063e4 	.word	0x200063e4
 8001814:	40002800 	.word	0x40002800

08001818 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b090      	sub	sp, #64	; 0x40
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	2238      	movs	r2, #56	; 0x38
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f010 fe33 	bl	8012494 <memset>
  if(rtcHandle->Instance==RTC)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_RTC_MspInit+0x84>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d12d      	bne.n	8001894 <HAL_RTC_MspInit+0x7c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800183e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f004 fa95 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001854:	f7ff fe3a 	bl	80014cc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001858:	f7ff ff4e 	bl	80016f8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800185c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001860:	f7ff ff5a 	bl	8001718 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2002      	movs	r0, #2
 800186a:	f002 f842 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800186e:	2002      	movs	r0, #2
 8001870:	f002 f859 	bl	8003926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2003      	movs	r0, #3
 800187a:	f002 f83a 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800187e:	2003      	movs	r0, #3
 8001880:	f002 f851 	bl	8003926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	202a      	movs	r0, #42	; 0x2a
 800188a:	f002 f832 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800188e:	202a      	movs	r0, #42	; 0x2a
 8001890:	f002 f849 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001894:	bf00      	nop
 8001896:	3740      	adds	r7, #64	; 0x40
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40002800 	.word	0x40002800

080018a0 <myRTC_start>:
  }
}

/* USER CODE BEGIN 1 */
void myRTC_start(int timems)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, (uint32_t)(timems*2048/1000), RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK) {
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	02db      	lsls	r3, r3, #11
 80018ac:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <myRTC_start+0x3c>)
 80018ae:	fb82 1203 	smull	r1, r2, r2, r3
 80018b2:	1192      	asrs	r2, r2, #6
 80018b4:	17db      	asrs	r3, r3, #31
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4619      	mov	r1, r3
 80018ba:	2300      	movs	r3, #0
 80018bc:	2200      	movs	r2, #0
 80018be:	4808      	ldr	r0, [pc, #32]	; (80018e0 <myRTC_start+0x40>)
 80018c0:	f004 fe40 	bl	8006544 <HAL_RTCEx_SetWakeUpTimer_IT>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <myRTC_start+0x2e>
	    Error_Handler();
 80018ca:	f7ff fdff 	bl	80014cc <Error_Handler>
	  }
	debug_print("myRTC start\r\n");
 80018ce:	4805      	ldr	r0, [pc, #20]	; (80018e4 <myRTC_start+0x44>)
 80018d0:	f7ff fdee 	bl	80014b0 <debug_print>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	10624dd3 	.word	0x10624dd3
 80018e0:	200063e4 	.word	0x200063e4
 80018e4:	080128b8 	.word	0x080128b8

080018e8 <myRTC_stop>:

void myRTC_stop()
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	if (HAL_RTCEx_DeactivateWakeUpTimer(&hrtc)) {
 80018ec:	4806      	ldr	r0, [pc, #24]	; (8001908 <myRTC_stop+0x20>)
 80018ee:	f004 feaf 	bl	8006650 <HAL_RTCEx_DeactivateWakeUpTimer>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <myRTC_stop+0x14>
		Error_Handler();
 80018f8:	f7ff fde8 	bl	80014cc <Error_Handler>
	}
	debug_print("myRTC stop\r\n");
 80018fc:	4803      	ldr	r0, [pc, #12]	; (800190c <myRTC_stop+0x24>)
 80018fe:	f7ff fdd7 	bl	80014b0 <debug_print>
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200063e4 	.word	0x200063e4
 800190c:	080128c8 	.word	0x080128c8

08001910 <LL_AHB2_GRP1_EnableClock>:
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800191e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4313      	orrs	r3, r2
 8001926:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001934:	68fb      	ldr	r3, [r7, #12]
}
 8001936:	bf00      	nop
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <LL_APB2_GRP1_EnableClock>:
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4313      	orrs	r3, r2
 8001956:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001958:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800195c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001964:	68fb      	ldr	r3, [r7, #12]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr

08001970 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001976:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <MX_SPI1_Init+0x78>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_SPI1_Init+0x74>)
 800197c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001980:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_SPI1_Init+0x74>)
 800198a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800198e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001996:	4b13      	ldr	r3, [pc, #76]	; (80019e4 <MX_SPI1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800199c:	4b11      	ldr	r3, [pc, #68]	; (80019e4 <MX_SPI1_Init+0x74>)
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80019bc:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019be:	2207      	movs	r2, #7
 80019c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019ca:	2208      	movs	r2, #8
 80019cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_SPI1_Init+0x74>)
 80019d0:	f004 ff6c 	bl	80068ac <HAL_SPI_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80019da:	f7ff fd77 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	2000641c 	.word	0x2000641c
 80019e8:	40013000 	.word	0x40013000

080019ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0x80>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d12a      	bne.n	8001a64 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a0e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a12:	f7ff ff95 	bl	8001940 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7ff ff7a 	bl	8001910 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f7ff ff77 	bl	8001910 <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    PA1     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a22:	2330      	movs	r3, #48	; 0x30
 8001a24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a32:	2305      	movs	r3, #5
 8001a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_SPI_MspInit+0x84>)
 8001a3e:	f002 fb79 	bl	8004134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a42:	2302      	movs	r3, #2
 8001a44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a52:	2305      	movs	r3, #5
 8001a54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f002 fb68 	bl	8004134 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a64:	bf00      	nop
 8001a66:	3720      	adds	r7, #32
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40013000 	.word	0x40013000
 8001a70:	48000400 	.word	0x48000400

08001a74 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001a78:	4b03      	ldr	r3, [pc, #12]	; (8001a88 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8001a80:	bf00      	nop
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	58000400 	.word	0x58000400

08001a8c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001aa8:	f000 ff36 	bl	8002918 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8001aac:	f7ff ffe2 	bl	8001a74 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f002 ff83 	bl	80049bc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8001abe:	f000 ff39 	bl	8002934 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001ac2:	f000 fe69 	bl	8002798 <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8001ace:	f000 ff23 	bl	8002918 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f002 feed 	bl	80048b4 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}

08001ade <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001ae2:	f000 ff27 	bl	8002934 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	2005      	movs	r0, #5
 8001af4:	f001 fefd 	bl	80038f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001af8:	2005      	movs	r0, #5
 8001afa:	f001 ff14 	bl	8003926 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <NMI_Handler+0x4>

08001b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <HardFault_Handler+0x4>

08001b0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b12:	e7fe      	b.n	8001b12 <MemManage_Handler+0x4>

08001b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <BusFault_Handler+0x4>

08001b1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <UsageFault_Handler+0x4>

08001b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr

08001b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8001b56:	f004 fe57 	bl	8006808 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200063e4 	.word	0x200063e4

08001b64 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC Wakeup Interrupt.
  */
void RTC_WKUP_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001b68:	4802      	ldr	r0, [pc, #8]	; (8001b74 <RTC_WKUP_IRQHandler+0x10>)
 8001b6a:	f004 fdc5 	bl	80066f8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	200063e4 	.word	0x200063e4

08001b78 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC Interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <DMA1_Channel1_IRQHandler+0x10>)
 8001b8a:	f002 f963 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200000c4 	.word	0x200000c4

08001b98 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 2 Interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001b9c:	4802      	ldr	r0, [pc, #8]	; (8001ba8 <DMA1_Channel2_IRQHandler+0x10>)
 8001b9e:	f002 f959 	bl	8003e54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20006578 	.word	0x20006578

08001bac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001bb0:	2040      	movs	r0, #64	; 0x40
 8001bb2:	f002 fd35 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001bb6:	2080      	movs	r0, #128	; 0x80
 8001bb8:	f002 fd32 	bl	8004620 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM1_UP_IRQHandler+0x10>)
 8001bc6:	f006 f909 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20006490 	.word	0x20006490

08001bd4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 Trigger and Communication Interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bd8:	4802      	ldr	r0, [pc, #8]	; (8001be4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8001bda:	f006 f8ff 	bl	8007ddc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8001bde:	bf00      	nop
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	20006490 	.word	0x20006490

08001be8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001bec:	4802      	ldr	r0, [pc, #8]	; (8001bf8 <LPUART1_IRQHandler+0x10>)
 8001bee:	f006 fdbb 	bl	8008768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200064e4 	.word	0x200064e4

08001bfc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c00:	4802      	ldr	r0, [pc, #8]	; (8001c0c <RTC_Alarm_IRQHandler+0x10>)
 8001c02:	f004 fbbd 	bl	8006380 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200063e4 	.word	0x200063e4

08001c10 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001c14:	4802      	ldr	r0, [pc, #8]	; (8001c20 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001c16:	f005 fe81 	bl	800791c <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20006480 	.word	0x20006480

08001c24 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c30:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c40:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4013      	ands	r3, r2
 8001c46:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c48:	68fb      	ldr	r3, [r7, #12]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SUBGHZ_Init+0x20>)
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001c5e:	4805      	ldr	r0, [pc, #20]	; (8001c74 <MX_SUBGHZ_Init+0x20>)
 8001c60:	f005 fbda 	bl	8007418 <HAL_SUBGHZ_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8001c6a:	f7ff fc2f 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20006480 	.word	0x20006480

08001c78 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff ffcf 	bl	8001c24 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2032      	movs	r0, #50	; 0x32
 8001c8c:	f001 fe31 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001c90:	2032      	movs	r0, #50	; 0x32
 8001c92:	f001 fe48 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <LL_RCC_SetClkAfterWakeFromStop>:
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001ca6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001cb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001cc8:	2000      	movs	r0, #0
 8001cca:	f7ff ffe8 	bl	8001c9e <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001cce:	f00f febd 	bl	8011a4c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <SystemApp_Init+0x40>)
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001cd8:	f000 f8a2 	bl	8001e20 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001cdc:	f010 f946 	bl	8011f6c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <SystemApp_Init+0x44>)
 8001ce2:	f010 f9df 	bl	80120a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f010 f9ea 	bl	80120c0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001cec:	f00f f9b4 	bl	8011058 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	2001      	movs	r0, #1
 8001cf4:	f00f f9f0 	bl	80110d8 <UTIL_LPM_SetOffMode>

#if defined (LOW_POWER_DISABLE) && (LOW_POWER_DISABLE == 1)
  /* Disable Stop Mode */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f00f f9bc 	bl	8011078 <UTIL_LPM_SetStopMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000648c 	.word	0x2000648c
 8001d08:	08001d19 	.word	0x08001d19

08001d0c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001d10:	f00f fa12 	bl	8011138 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af02      	add	r7, sp, #8
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00f fab0 	bl	801128c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <TimestampNow+0x3c>)
 8001d36:	2110      	movs	r1, #16
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f81d 	bl	8001d78 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7fe fa1a 	bl	8000178 <strlen>
 8001d44:	4603      	mov	r3, r0
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001d4c:	bf00      	nop
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	080128d8 	.word	0x080128d8

08001d58 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f00f f98a 	bl	8011078 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f00f f982 	bl	8011078 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001d78:	b40c      	push	{r2, r3}
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b084      	sub	sp, #16
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001d84:	f107 031c 	add.w	r3, r7, #28
 8001d88:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f00f fbc7 	bl	8011524 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001da0:	b002      	add	sp, #8
 8001da2:	4770      	bx	lr

08001da4 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001dc2:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <HAL_GetTick+0x24>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d002      	beq.n	8001dd0 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001dca:	f000 f989 	bl	80020e0 <TIMER_IF_GetTimerValue>
 8001dce:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001dd0:	687b      	ldr	r3, [r7, #4]
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000648c 	.word	0x2000648c

08001de0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f000 f9ff 	bl	80021ee <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001e00:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <LL_EXTI_EnableIT_32_63+0x24>)
 8001e02:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001e06:	4905      	ldr	r1, [pc, #20]	; (8001e1c <LL_EXTI_EnableIT_32_63+0x24>)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	58000800 	.word	0x58000800

08001e20 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  HAL_DBGMCU_DisableDBGSleepMode();
  HAL_DBGMCU_DisableDBGStopMode();
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8001e24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e28:	f7ff ffe6 	bl	8001df8 <LL_EXTI_EnableIT_32_63>
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001e2c:	f000 fd90 	bl	8002950 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001e30:	f000 fd94 	bl	800295c <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 8001e34:	f000 fd98 	bl	8002968 <HAL_DBGMCU_EnableDBGStandbyMode>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <LL_APB2_GRP1_EnableClock>:
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e54:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr

08001e78 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0310 	add.w	r3, r7, #16
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
 8001e92:	605a      	str	r2, [r3, #4]
 8001e94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001e98:	4a20      	ldr	r2, [pc, #128]	; (8001f1c <MX_TIM1_Init+0xa4>)
 8001e9a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e9c:	4b1e      	ldr	r3, [pc, #120]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 159;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001eaa:	229f      	movs	r2, #159	; 0x9f
 8001eac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ec0:	4815      	ldr	r0, [pc, #84]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001ec2:	f005 fec9 	bl	8007c58 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ecc:	f7ff fafe 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	4619      	mov	r1, r3
 8001edc:	480e      	ldr	r0, [pc, #56]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001ede:	f006 f89c 	bl	800801a <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ee8:	f7ff faf0 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001eec:	2320      	movs	r3, #32
 8001eee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 8001ef0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ef4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	4619      	mov	r1, r3
 8001efe:	4806      	ldr	r0, [pc, #24]	; (8001f18 <MX_TIM1_Init+0xa0>)
 8001f00:	f006 fa7c 	bl	80083fc <HAL_TIMEx_MasterConfigSynchronization>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f0a:	f7ff fadf 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f0e:	bf00      	nop
 8001f10:	3720      	adds	r7, #32
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20006490 	.word	0x20006490
 8001f1c:	40012c00 	.word	0x40012c00

08001f20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_TIM_Base_MspInit+0x44>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d113      	bne.n	8001f5a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f36:	f7ff ff87 	bl	8001e48 <LL_APB2_GRP1_EnableClock>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2018      	movs	r0, #24
 8001f40:	f001 fcd7 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f44:	2018      	movs	r0, #24
 8001f46:	f001 fcee 	bl	8003926 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2019      	movs	r0, #25
 8001f50:	f001 fccf 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001f54:	2019      	movs	r0, #25
 8001f56:	f001 fce6 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40012c00 	.word	0x40012c00

08001f68 <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
	...

08001f80 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001f8a:	4b14      	ldr	r3, [pc, #80]	; (8001fdc <TIMER_IF_Init+0x5c>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	f083 0301 	eor.w	r3, r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <TIMER_IF_Init+0x60>)
 8001f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f9e:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001fa0:	f7ff fbd2 	bl	8001748 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001fa4:	f000 f856 	bl	8002054 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fac:	480c      	ldr	r0, [pc, #48]	; (8001fe0 <TIMER_IF_Init+0x60>)
 8001fae:	f004 f98b 	bl	80062c8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <TIMER_IF_Init+0x60>)
 8001fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fb8:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001fba:	4809      	ldr	r0, [pc, #36]	; (8001fe0 <TIMER_IF_Init+0x60>)
 8001fbc:	f004 fbb6 	bl	800672c <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f000 f9d3 	bl	800236c <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001fc6:	f000 f85f 	bl	8002088 <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <TIMER_IF_Init+0x5c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200064dc 	.word	0x200064dc
 8001fe0:	200063e4 	.word	0x200063e4

08001fe4 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	; 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001ff2:	f107 0308 	add.w	r3, r7, #8
 8001ff6:	222c      	movs	r2, #44	; 0x2c
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f010 fa4a 	bl	8012494 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8002000:	f000 f828 	bl	8002054 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <TIMER_IF_StartTimer+0x68>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	4413      	add	r3, r2
 800200c:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	43db      	mvns	r3, r3
 8002016:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800201c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002020:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8002022:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002026:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002028:	f107 0308 	add.w	r3, r7, #8
 800202c:	2201      	movs	r2, #1
 800202e:	4619      	mov	r1, r3
 8002030:	4807      	ldr	r0, [pc, #28]	; (8002050 <TIMER_IF_StartTimer+0x6c>)
 8002032:	f004 f83d 	bl	80060b0 <HAL_RTC_SetAlarm_IT>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 800203c:	f7ff fa46 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8002040:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002044:	4618      	mov	r0, r3
 8002046:	3738      	adds	r7, #56	; 0x38
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	200064e0 	.word	0x200064e0
 8002050:	200063e4 	.word	0x200063e4

08002054 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 800205e:	4b08      	ldr	r3, [pc, #32]	; (8002080 <TIMER_IF_StopTimer+0x2c>)
 8002060:	2201      	movs	r2, #1
 8002062:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002068:	4806      	ldr	r0, [pc, #24]	; (8002084 <TIMER_IF_StopTimer+0x30>)
 800206a:	f004 f92d 	bl	80062c8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <TIMER_IF_StopTimer+0x30>)
 8002070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002074:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8002076:	79fb      	ldrb	r3, [r7, #7]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40002800 	.word	0x40002800
 8002084:	200063e4 	.word	0x200063e4

08002088 <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 800208c:	f000 f98e 	bl	80023ac <GetTimerTicks>
 8002090:	4603      	mov	r3, r0
 8002092:	4a03      	ldr	r2, [pc, #12]	; (80020a0 <TIMER_IF_SetTimerContext+0x18>)
 8002094:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8002096:	4b02      	ldr	r3, [pc, #8]	; (80020a0 <TIMER_IF_SetTimerContext+0x18>)
 8002098:	681b      	ldr	r3, [r3, #0]
}
 800209a:	4618      	mov	r0, r3
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200064e0 	.word	0x200064e0

080020a4 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 80020a8:	4b02      	ldr	r3, [pc, #8]	; (80020b4 <TIMER_IF_GetTimerContext+0x10>)
 80020aa:	681b      	ldr	r3, [r3, #0]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bc80      	pop	{r7}
 80020b2:	4770      	bx	lr
 80020b4:	200064e0 	.word	0x200064e0

080020b8 <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 80020c2:	f000 f973 	bl	80023ac <GetTimerTicks>
 80020c6:	4602      	mov	r2, r0
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <TIMER_IF_GetTimerElapsedTime+0x24>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 80020d0:	687b      	ldr	r3, [r7, #4]
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	200064e0 	.word	0x200064e0

080020e0 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 80020ea:	4b06      	ldr	r3, [pc, #24]	; (8002104 <TIMER_IF_GetTimerValue+0x24>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 80020f2:	f000 f95b 	bl	80023ac <GetTimerTicks>
 80020f6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	200064dc 	.word	0x200064dc

08002108 <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800210e:	2300      	movs	r3, #0
 8002110:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002112:	2303      	movs	r3, #3
 8002114:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8002116:	687b      	ldr	r3, [r7, #4]
}
 8002118:	4618      	mov	r0, r3
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002122:	b5b0      	push	{r4, r5, r7, lr}
 8002124:	b084      	sub	sp, #16
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800212a:	2100      	movs	r1, #0
 800212c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	2000      	movs	r0, #0
 8002132:	460a      	mov	r2, r1
 8002134:	4603      	mov	r3, r0
 8002136:	0d95      	lsrs	r5, r2, #22
 8002138:	0294      	lsls	r4, r2, #10
 800213a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800213e:	f04f 0300 	mov.w	r3, #0
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe faa3 	bl	8000690 <__aeabi_uldivmod>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4613      	mov	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}

0800215c <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 800215c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002160:	b085      	sub	sp, #20
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8002166:	2100      	movs	r1, #0
 8002168:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	2000      	movs	r0, #0
 800216e:	460c      	mov	r4, r1
 8002170:	4605      	mov	r5, r0
 8002172:	4620      	mov	r0, r4
 8002174:	4629      	mov	r1, r5
 8002176:	f04f 0a00 	mov.w	sl, #0
 800217a:	f04f 0b00 	mov.w	fp, #0
 800217e:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002182:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002186:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800218a:	4650      	mov	r0, sl
 800218c:	4659      	mov	r1, fp
 800218e:	1b02      	subs	r2, r0, r4
 8002190:	eb61 0305 	sbc.w	r3, r1, r5
 8002194:	f04f 0000 	mov.w	r0, #0
 8002198:	f04f 0100 	mov.w	r1, #0
 800219c:	0099      	lsls	r1, r3, #2
 800219e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80021a2:	0090      	lsls	r0, r2, #2
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	eb12 0804 	adds.w	r8, r2, r4
 80021ac:	eb43 0905 	adc.w	r9, r3, r5
 80021b0:	f04f 0200 	mov.w	r2, #0
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021c0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021c4:	4690      	mov	r8, r2
 80021c6:	4699      	mov	r9, r3
 80021c8:	4640      	mov	r0, r8
 80021ca:	4649      	mov	r1, r9
 80021cc:	f04f 0200 	mov.w	r2, #0
 80021d0:	f04f 0300 	mov.w	r3, #0
 80021d4:	0a82      	lsrs	r2, r0, #10
 80021d6:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021da:	0a8b      	lsrs	r3, r1, #10
 80021dc:	4613      	mov	r3, r2
 80021de:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80021e0:	68fb      	ldr	r3, [r7, #12]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80021ec:	4770      	bx	lr

080021ee <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b084      	sub	sp, #16
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff ff93 	bl	8002122 <TIMER_IF_Convert_ms2Tick>
 80021fc:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 80021fe:	f000 f8d5 	bl	80023ac <GetTimerTicks>
 8002202:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002204:	e000      	b.n	8002208 <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 8002206:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002208:	f000 f8d0 	bl	80023ac <GetTimerTicks>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f6      	bhi.n	8002206 <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800222a:	f00f fd5d 	bl	8011ce8 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800223e:	f000 f8a5 	bl	800238c <TIMER_IF_BkUp_Read_MSBticks>
 8002242:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f000 f88f 	bl	800236c <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 8002256:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800225a:	b08c      	sub	sp, #48	; 0x30
 800225c:	af00      	add	r7, sp, #0
 800225e:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002264:	f000 f8a2 	bl	80023ac <GetTimerTicks>
 8002268:	62b8      	str	r0, [r7, #40]	; 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800226a:	f000 f88f 	bl	800238c <TIMER_IF_BkUp_Read_MSBticks>
 800226e:	6278      	str	r0, [r7, #36]	; 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	2200      	movs	r2, #0
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	60fa      	str	r2, [r7, #12]
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	f04f 0300 	mov.w	r3, #0
 8002280:	68b9      	ldr	r1, [r7, #8]
 8002282:	000b      	movs	r3, r1
 8002284:	2200      	movs	r2, #0
 8002286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002288:	2000      	movs	r0, #0
 800228a:	460c      	mov	r4, r1
 800228c:	4605      	mov	r5, r0
 800228e:	eb12 0804 	adds.w	r8, r2, r4
 8002292:	eb43 0905 	adc.w	r9, r3, r5
 8002296:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 800229a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	0a82      	lsrs	r2, r0, #10
 80022a8:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80022ac:	0a8b      	lsrs	r3, r1, #10
 80022ae:	4613      	mov	r3, r2
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	2200      	movs	r2, #0
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80022c0:	f04f 0b00 	mov.w	fp, #0
 80022c4:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff ff46 	bl	800215c <TIMER_IF_Convert_Tick2ms>
 80022d0:	4603      	mov	r3, r0
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80022d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3730      	adds	r7, #48	; 0x30
 80022de:	46bd      	mov	sp, r7
 80022e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080022e4 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	2100      	movs	r1, #0
 80022f0:	4803      	ldr	r0, [pc, #12]	; (8002300 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 80022f2:	f004 faad 	bl	8006850 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200063e4 	.word	0x200063e4

08002304 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	2101      	movs	r1, #1
 8002310:	4803      	ldr	r0, [pc, #12]	; (8002320 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002312:	f004 fa9d 	bl	8006850 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200063e4 	.word	0x200063e4

08002324 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800232a:	2300      	movs	r3, #0
 800232c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800232e:	2100      	movs	r1, #0
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002332:	f004 faa5 	bl	8006880 <HAL_RTCEx_BKUPRead>
 8002336:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	200063e4 	.word	0x200063e4

08002348 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002352:	2101      	movs	r1, #1
 8002354:	4804      	ldr	r0, [pc, #16]	; (8002368 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8002356:	f004 fa93 	bl	8006880 <HAL_RTCEx_BKUPRead>
 800235a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200063e4 	.word	0x200063e4

0800236c <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	2102      	movs	r1, #2
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800237a:	f004 fa69 	bl	8006850 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200063e4 	.word	0x200063e4

0800238c <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002392:	2102      	movs	r1, #2
 8002394:	4804      	ldr	r0, [pc, #16]	; (80023a8 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 8002396:	f004 fa73 	bl	8006880 <HAL_RTCEx_BKUPRead>
 800239a:	6078      	str	r0, [r7, #4]
  return MSBticks;
 800239c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200063e4 	.word	0x200063e4

080023ac <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80023b2:	480b      	ldr	r0, [pc, #44]	; (80023e0 <GetTimerTicks+0x34>)
 80023b4:	f7ff fdd8 	bl	8001f68 <LL_RTC_TIME_GetSubSecond>
 80023b8:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023ba:	e003      	b.n	80023c4 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80023bc:	4808      	ldr	r0, [pc, #32]	; (80023e0 <GetTimerTicks+0x34>)
 80023be:	f7ff fdd3 	bl	8001f68 <LL_RTC_TIME_GetSubSecond>
 80023c2:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80023c4:	4806      	ldr	r0, [pc, #24]	; (80023e0 <GetTimerTicks+0x34>)
 80023c6:	f7ff fdcf 	bl	8001f68 <LL_RTC_TIME_GetSubSecond>
 80023ca:	4602      	mov	r2, r0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d1f4      	bne.n	80023bc <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40002800 	.word	0x40002800

080023e4 <LL_AHB2_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002400:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4013      	ands	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002408:	68fb      	ldr	r3, [r7, #12]
}
 800240a:	bf00      	nop
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <LL_APB1_GRP2_EnableClock>:
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800241c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002420:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002422:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800242c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002430:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4013      	ands	r3, r2
 8002436:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <LL_APB1_GRP2_DisableClock>:
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 800244c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	43db      	mvns	r3, r3
 8002456:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800245a:	4013      	ands	r3, r2
 800245c:	65cb      	str	r3, [r1, #92]	; 0x5c
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <MX_LPUART1_UART_Init+0x94>)
 8002470:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 8002474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002478:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800247a:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 8002482:	2200      	movs	r2, #0
 8002484:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 800248e:	220c      	movs	r2, #12
 8002490:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002498:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024a4:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80024aa:	4b13      	ldr	r3, [pc, #76]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80024b0:	4811      	ldr	r0, [pc, #68]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024b2:	f006 f83d 	bl	8008530 <HAL_UART_Init>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80024bc:	f7ff f806 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c0:	2100      	movs	r1, #0
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024c4:	f008 f95c 	bl	800a780 <HAL_UARTEx_SetTxFifoThreshold>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80024ce:	f7fe fffd 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d2:	2100      	movs	r1, #0
 80024d4:	4808      	ldr	r0, [pc, #32]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024d6:	f008 f991 	bl	800a7fc <HAL_UARTEx_SetRxFifoThreshold>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80024e0:	f7fe fff4 	bl	80014cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80024e4:	4804      	ldr	r0, [pc, #16]	; (80024f8 <MX_LPUART1_UART_Init+0x90>)
 80024e6:	f008 f913 	bl	800a710 <HAL_UARTEx_DisableFifoMode>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80024f0:	f7fe ffec 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	200064e4 	.word	0x200064e4
 80024fc:	40008000 	.word	0x40008000

08002500 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b096      	sub	sp, #88	; 0x58
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	2238      	movs	r2, #56	; 0x38
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00f ffb7 	bl	8012494 <memset>
  if(uartHandle->Instance==LPUART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a2e      	ldr	r2, [pc, #184]	; (80025e4 <HAL_UART_MspInit+0xe4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d155      	bne.n	80025dc <HAL_UART_MspInit+0xdc>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002530:	2320      	movs	r3, #32
 8002532:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4618      	mov	r0, r3
 800253e:	f003 fc1b 	bl	8005d78 <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002548:	f7fe ffc0 	bl	80014cc <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800254c:	2001      	movs	r0, #1
 800254e:	f7ff ff61 	bl	8002414 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	2001      	movs	r0, #1
 8002554:	f7ff ff46 	bl	80023e4 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002558:	230c      	movs	r3, #12
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255c:	2302      	movs	r3, #2
 800255e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002564:	2300      	movs	r3, #0
 8002566:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002568:	2308      	movs	r3, #8
 800256a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002570:	4619      	mov	r1, r3
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f001 fddd 	bl	8004134 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 800257c:	4a1b      	ldr	r2, [pc, #108]	; (80025ec <HAL_UART_MspInit+0xec>)
 800257e:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 8002582:	2216      	movs	r2, #22
 8002584:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 8002588:	2210      	movs	r2, #16
 800258a:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 800258e:	2200      	movs	r2, #0
 8002590:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 8002594:	2280      	movs	r2, #128	; 0x80
 8002596:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 800259a:	2200      	movs	r2, #0
 800259c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025aa:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80025b0:	480d      	ldr	r0, [pc, #52]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025b2:	f001 f9d5 	bl	8003960 <HAL_DMA_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80025bc:	f7fe ff86 	bl	80014cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a09      	ldr	r2, [pc, #36]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80025c6:	4a08      	ldr	r2, [pc, #32]	; (80025e8 <HAL_UART_MspInit+0xe8>)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	2026      	movs	r0, #38	; 0x26
 80025d2:	f001 f98e 	bl	80038f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80025d6:	2026      	movs	r0, #38	; 0x26
 80025d8:	f001 f9a5 	bl	8003926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80025dc:	bf00      	nop
 80025de:	3758      	adds	r7, #88	; 0x58
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40008000 	.word	0x40008000
 80025e8:	20006578 	.word	0x20006578
 80025ec:	4002001c 	.word	0x4002001c

080025f0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==LPUART1)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a0b      	ldr	r2, [pc, #44]	; (800262c <HAL_UART_MspDeInit+0x3c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d10f      	bne.n	8002622 <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN LPUART1_MspDeInit 0 */

  /* USER CODE END LPUART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LPUART1_CLK_DISABLE();
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff ff1e 	bl	8002444 <LL_APB1_GRP2_DisableClock>

    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002608:	210c      	movs	r1, #12
 800260a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260e:	f001 fef1 	bl	80043f4 <HAL_GPIO_DeInit>

    /* LPUART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fa4a 	bl	8003ab0 <HAL_DMA_DeInit>

    /* LPUART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 800261c:	2026      	movs	r0, #38	; 0x26
 800261e:	f001 f990 	bl	8003942 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN LPUART1_MspDeInit 1 */

  /* USER CODE END LPUART1_MspDeInit 1 */
  }
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40008000 	.word	0x40008000

08002630 <LL_APB1_GRP2_ForceReset>:
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR2, Periphs);
 8002638:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800263c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800263e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4313      	orrs	r3, r2
 8002646:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <LL_APB1_GRP2_ReleaseReset>:
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR2, Periphs);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	43db      	mvns	r3, r3
 8002664:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002668:	4013      	ands	r3, r2
 800266a:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
	...

08002678 <LL_EXTI_EnableIT_0_31>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <LL_EXTI_EnableIT_0_31+0x24>)
 8002682:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002686:	4905      	ldr	r1, [pc, #20]	; (800269c <LL_EXTI_EnableIT_0_31+0x24>)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4313      	orrs	r3, r2
 800268c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	bc80      	pop	{r7}
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	58000800 	.word	0x58000800

080026a0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <vcom_Init+0x28>)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80026ae:	f7fe fc91 	bl	8000fd4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80026b2:	f7ff fed9 	bl	8002468 <MX_LPUART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_28);
 80026b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80026ba:	f7ff ffdd 	bl	8002678 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80026be:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	200065dc 	.word	0x200065dc

080026cc <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_LPUART1_FORCE_RESET();
 80026d0:	2001      	movs	r0, #1
 80026d2:	f7ff ffad 	bl	8002630 <LL_APB1_GRP2_ForceReset>
  __HAL_RCC_LPUART1_RELEASE_RESET();
 80026d6:	2001      	movs	r0, #1
 80026d8:	f7ff ffbb 	bl	8002652 <LL_APB1_GRP2_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&hlpuart1);
 80026dc:	4804      	ldr	r0, [pc, #16]	; (80026f0 <vcom_DeInit+0x24>)
 80026de:	f7ff ff87 	bl	80025f0 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 80026e2:	200f      	movs	r0, #15
 80026e4:	f001 f92d 	bl	8003942 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 80026e8:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200064e4 	.word	0x200064e4

080026f4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	461a      	mov	r2, r3
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4804      	ldr	r0, [pc, #16]	; (8002718 <vcom_Trace_DMA+0x24>)
 8002708:	f005 ffae 	bl	8008668 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 800270c:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200064e4 	.word	0x200064e4

0800271c <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002724:	4a19      	ldr	r2, [pc, #100]	; (800278c <vcom_ReceiveInit+0x70>)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800272a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800272e:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&hlpuart1, WakeUpSelection);
 8002730:	f107 0308 	add.w	r3, r7, #8
 8002734:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002738:	4815      	ldr	r0, [pc, #84]	; (8002790 <vcom_ReceiveInit+0x74>)
 800273a:	f007 ff5c 	bl	800a5f6 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_BUSY) == SET);
 800273e:	bf00      	nop
 8002740:	4b13      	ldr	r3, [pc, #76]	; (8002790 <vcom_ReceiveInit+0x74>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800274a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800274e:	d0f7      	beq.n	8002740 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&hlpuart1, USART_ISR_REACK) == RESET);
 8002750:	bf00      	nop
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <vcom_ReceiveInit+0x74>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002760:	d1f7      	bne.n	8002752 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&hlpuart1, UART_IT_WUF);
 8002762:	4b0b      	ldr	r3, [pc, #44]	; (8002790 <vcom_ReceiveInit+0x74>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <vcom_ReceiveInit+0x74>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002770:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&hlpuart1);
 8002772:	4807      	ldr	r0, [pc, #28]	; (8002790 <vcom_ReceiveInit+0x74>)
 8002774:	f007 ff9a 	bl	800a6ac <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&hlpuart1, &charRx, 1);
 8002778:	2201      	movs	r2, #1
 800277a:	4906      	ldr	r1, [pc, #24]	; (8002794 <vcom_ReceiveInit+0x78>)
 800277c:	4804      	ldr	r0, [pc, #16]	; (8002790 <vcom_ReceiveInit+0x74>)
 800277e:	f005 ff27 	bl	80085d0 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8002782:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200065e0 	.word	0x200065e0
 8002790:	200064e4 	.word	0x200064e4
 8002794:	200065d8 	.word	0x200065d8

08002798 <vcom_Resume>:

void vcom_Resume(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 800279c:	4804      	ldr	r0, [pc, #16]	; (80027b0 <vcom_Resume+0x18>)
 800279e:	f001 f8df 	bl	8003960 <HAL_DMA_Init>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <vcom_Resume+0x14>
  {
    Error_Handler();
 80027a8:	f7fe fe90 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20006578 	.word	0x20006578

080027b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == LPUART1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a05      	ldr	r2, [pc, #20]	; (80027d8 <HAL_UART_TxCpltCallback+0x24>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d103      	bne.n	80027ce <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_UART_TxCpltCallback+0x28>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2000      	movs	r0, #0
 80027cc:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80027ce:	bf00      	nop
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40008000 	.word	0x40008000
 80027dc:	200065dc 	.word	0x200065dc

080027e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == LPUART1)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a0d      	ldr	r2, [pc, #52]	; (8002824 <HAL_UART_RxCpltCallback+0x44>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80027f2:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <HAL_UART_RxCpltCallback+0x48>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_UART_RxCpltCallback+0x30>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_UART_RxCpltCallback+0x48>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2200      	movs	r2, #0
 800280a:	2101      	movs	r1, #1
 800280c:	4807      	ldr	r0, [pc, #28]	; (800282c <HAL_UART_RxCpltCallback+0x4c>)
 800280e:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002810:	2201      	movs	r2, #1
 8002812:	4906      	ldr	r1, [pc, #24]	; (800282c <HAL_UART_RxCpltCallback+0x4c>)
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f005 fedb 	bl	80085d0 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 800281a:	bf00      	nop
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40008000 	.word	0x40008000
 8002828:	200065e0 	.word	0x200065e0
 800282c:	200065d8 	.word	0x200065d8

08002830 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002830:	480d      	ldr	r0, [pc, #52]	; (8002868 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002832:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002834:	f7ff fb02 	bl	8001e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002838:	480c      	ldr	r0, [pc, #48]	; (800286c <LoopForever+0x6>)
  ldr r1, =_edata
 800283a:	490d      	ldr	r1, [pc, #52]	; (8002870 <LoopForever+0xa>)
  ldr r2, =_sidata
 800283c:	4a0d      	ldr	r2, [pc, #52]	; (8002874 <LoopForever+0xe>)
  movs r3, #0
 800283e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002840:	e002      	b.n	8002848 <LoopCopyDataInit>

08002842 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002842:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002844:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002846:	3304      	adds	r3, #4

08002848 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002848:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800284c:	d3f9      	bcc.n	8002842 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002850:	4c0a      	ldr	r4, [pc, #40]	; (800287c <LoopForever+0x16>)
  movs r3, #0
 8002852:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002854:	e001      	b.n	800285a <LoopFillZerobss>

08002856 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002856:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002858:	3204      	adds	r2, #4

0800285a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800285c:	d3fb      	bcc.n	8002856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800285e:	f00f fe21 	bl	80124a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002862:	f7fe fd1f 	bl	80012a4 <main>

08002866 <LoopForever>:

LoopForever:
    b LoopForever
 8002866:	e7fe      	b.n	8002866 <LoopForever>
  ldr   r0, =_estack
 8002868:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800286c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002870:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8002874:	08012d94 	.word	0x08012d94
  ldr r2, =_sbss
 8002878:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 800287c:	20006b24 	.word	0x20006b24

08002880 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC_IRQHandler>
	...

08002884 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8002888:	4b04      	ldr	r3, [pc, #16]	; (800289c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	4a03      	ldr	r2, [pc, #12]	; (800289c <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 800288e:	f043 0301 	orr.w	r3, r3, #1
 8002892:	6053      	str	r3, [r2, #4]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	e0042000 	.word	0xe0042000

080028a0 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <LL_DBGMCU_EnableDBGStopMode+0x18>)
 80028aa:	f043 0302 	orr.w	r3, r3, #2
 80028ae:	6053      	str	r3, [r2, #4]
}
 80028b0:	bf00      	nop
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	e0042000 	.word	0xe0042000

080028bc <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4a03      	ldr	r2, [pc, #12]	; (80028d4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80028c6:	f043 0304 	orr.w	r3, r3, #4
 80028ca:	6053      	str	r3, [r2, #4]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr
 80028d4:	e0042000 	.word	0xe0042000

080028d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e2:	2003      	movs	r0, #3
 80028e4:	f000 fffa 	bl	80038dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028e8:	f003 f868 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a09      	ldr	r2, [pc, #36]	; (8002914 <HAL_Init+0x3c>)
 80028f0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f2:	200f      	movs	r0, #15
 80028f4:	f7ff fa56 	bl	8001da4 <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	71fb      	strb	r3, [r7, #7]
 8002902:	e001      	b.n	8002908 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002904:	f7ff f8f1 	bl	8001aea <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002908:	79fb      	ldrb	r3, [r7, #7]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000014 	.word	0x20000014

08002918 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <HAL_SuspendTick+0x18>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a03      	ldr	r2, [pc, #12]	; (8002930 <HAL_SuspendTick+0x18>)
 8002922:	f023 0302 	bic.w	r3, r3, #2
 8002926:	6013      	str	r3, [r2, #0]
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr
 8002930:	e000e010 	.word	0xe000e010

08002934 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002938:	4b04      	ldr	r3, [pc, #16]	; (800294c <HAL_ResumeTick+0x18>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <HAL_ResumeTick+0x18>)
 800293e:	f043 0302 	orr.w	r3, r3, #2
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	e000e010 	.word	0xe000e010

08002950 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8002954:	f7ff ff96 	bl	8002884 <LL_DBGMCU_EnableDBGSleepMode>
}
 8002958:	bf00      	nop
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8002960:	f7ff ff9e 	bl	80028a0 <LL_DBGMCU_EnableDBGStopMode>
}
 8002964:	bf00      	nop
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 800296c:	f7ff ffa6 	bl	80028bc <LL_DBGMCU_EnableDBGStandbyMode>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	601a      	str	r2, [r3, #0]
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	60f8      	str	r0, [r7, #12]
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	695a      	ldr	r2, [r3, #20]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f003 0304 	and.w	r3, r3, #4
 80029c8:	2107      	movs	r1, #7
 80029ca:	fa01 f303 	lsl.w	r3, r1, r3
 80029ce:	43db      	mvns	r3, r3
 80029d0:	401a      	ands	r2, r3
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	431a      	orrs	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	f003 0304 	and.w	r3, r3, #4
 8002a02:	2107      	movs	r1, #7
 8002a04:	fa01 f303 	lsl.w	r3, r1, r3
 8002a08:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bc80      	pop	{r7}
 8002a1c:	4770      	bx	lr

08002a1e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e000      	b.n	8002a38 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	210f      	movs	r1, #15
 8002a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5e:	43db      	mvns	r3, r3
 8002a60:	401a      	ands	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 010f 	and.w	r1, r3, #15
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	f003 031f 	and.w	r3, r3, #31
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	431a      	orrs	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002a7a:	bf00      	nop
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bc80      	pop	{r7}
 8002a82:	4770      	bx	lr

08002a84 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bc80      	pop	{r7}
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002abc:	43db      	mvns	r3, r3
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bc80      	pop	{r7}
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	695a      	ldr	r2, [r3, #20]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	021b      	lsls	r3, r3, #8
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	401a      	ands	r2, r3
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0219      	lsls	r1, r3, #8
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	400b      	ands	r3, r1
 8002aee:	f023 437c 	bic.w	r3, r3, #4227858432	; 0xfc000000
 8002af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002af6:	431a      	orrs	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002afc:	bf00      	nop
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bc80      	pop	{r7}
 8002b04:	4770      	bx	lr

08002b06 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002b16:	f023 0317 	bic.w	r3, r3, #23
 8002b1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b62:	f023 0317 	bic.w	r3, r3, #23
 8002b66:	f043 0201 	orr.w	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bc80      	pop	{r7}
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b88:	f023 0317 	bic.w	r3, r3, #23
 8002b8c:	f043 0202 	orr.w	r2, r3, #2
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_IsEnabled+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_IsEnabled+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bc80      	pop	{r7}
 8002bc0:	4770      	bx	lr

08002bc2 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b083      	sub	sp, #12
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d101      	bne.n	8002bda <LL_ADC_IsDisableOngoing+0x18>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <LL_ADC_IsDisableOngoing+0x1a>
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bc80      	pop	{r7}
 8002be4:	4770      	bx	lr

08002be6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	f023 0317 	bic.w	r3, r3, #23
 8002bfa:	f043 0204 	orr.w	r2, r3, #4
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c1c:	f023 0317 	bic.w	r3, r3, #23
 8002c20:	f043 0210 	orr.w	r2, r3, #16
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bc80      	pop	{r7}
 8002c30:	4770      	bx	lr

08002c32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b083      	sub	sp, #12
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d101      	bne.n	8002c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bc80      	pop	{r7}
 8002c54:	4770      	bx	lr
	...

08002c58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e17e      	b.n	8002f78 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d109      	bne.n	8002c9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fd ff19 	bl	8000ac0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff ff43 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff ff28 	bl	8002b06 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cb6:	4b9e      	ldr	r3, [pc, #632]	; (8002f30 <HAL_ADC_Init+0x2d8>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	099b      	lsrs	r3, r3, #6
 8002cbc:	4a9d      	ldr	r2, [pc, #628]	; (8002f34 <HAL_ADC_Init+0x2dc>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	099b      	lsrs	r3, r3, #6
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	005b      	lsls	r3, r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1f9      	bne.n	8002ccc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff ff25 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff92 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 8002d0e:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f040 8124 	bne.w	8002f66 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f040 8120 	bne.w	8002f66 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7ff ff2f 	bl	8002b9e <LL_ADC_IsEnabled>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f040 80a7 	bne.w	8002e96 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7e1b      	ldrb	r3, [r3, #24]
 8002d50:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d52:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e5b      	ldrb	r3, [r3, #25]
 8002d58:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002d5a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7e9b      	ldrb	r3, [r3, #26]
 8002d60:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002d62:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_ADC_Init+0x11a>
 8002d6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d70:	e000      	b.n	8002d74 <HAL_ADC_Init+0x11c>
 8002d72:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002d74:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002d7a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	da04      	bge.n	8002d8e <HAL_ADC_Init+0x136>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d8c:	e001      	b.n	8002d92 <HAL_ADC_Init+0x13a>
 8002d8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002d92:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002d9a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d9c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d114      	bne.n	8002dd8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7e9b      	ldrb	r3, [r3, #26]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d104      	bne.n	8002dc0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dbc:	61bb      	str	r3, [r7, #24]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002dec:	4313      	orrs	r3, r2
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002dfe:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	6812      	ldr	r2, [r2, #0]
 8002e06:	69b9      	ldr	r1, [r7, #24]
 8002e08:	430b      	orrs	r3, r1
 8002e0a:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	697a      	ldr	r2, [r7, #20]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d111      	bne.n	8002e4e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002e36:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002e3c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002e42:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	691a      	ldr	r2, [r3, #16]
 8002e54:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <HAL_ADC_Init+0x2e0>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	6979      	ldr	r1, [r7, #20]
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002e6a:	d014      	beq.n	8002e96 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d00f      	beq.n	8002e96 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e7e:	d00a      	beq.n	8002e96 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_ADC_Init+0x2e4>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e90:	492a      	ldr	r1, [pc, #168]	; (8002f3c <HAL_ADC_Init+0x2e4>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	f7ff fd86 	bl	80029b2 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6818      	ldr	r0, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4923      	ldr	r1, [pc, #140]	; (8002f40 <HAL_ADC_Init+0x2e8>)
 8002eb2:	f7ff fd7e 	bl	80029b2 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f062 020f 	orn	r2, r2, #15
 8002ecc:	629a      	str	r2, [r3, #40]	; 0x28
 8002ece:	e017      	b.n	8002f00 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ed8:	d112      	bne.n	8002f00 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69db      	ldr	r3, [r3, #28]
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	f003 031c 	and.w	r3, r3, #28
 8002eec:	f06f 020f 	mvn.w	r2, #15
 8002ef0:	fa02 f103 	lsl.w	r1, r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7ff fd71 	bl	80029ee <LL_ADC_GetSamplingTimeCommonChannels>
 8002f0c:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d116      	bne.n	8002f44 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f20:	f023 0303 	bic.w	r3, r3, #3
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f2c:	e023      	b.n	8002f76 <HAL_ADC_Init+0x31e>
 8002f2e:	bf00      	nop
 8002f30:	20000014 	.word	0x20000014
 8002f34:	053e2d63 	.word	0x053e2d63
 8002f38:	1ffffc02 	.word	0x1ffffc02
 8002f3c:	40012708 	.word	0x40012708
 8002f40:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f48:	f023 0312 	bic.w	r3, r3, #18
 8002f4c:	f043 0210 	orr.w	r2, r3, #16
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f58:	f043 0201 	orr.w	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002f64:	e007      	b.n	8002f76 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002f76:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3720      	adds	r7, #32
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7ff fe4e 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d169      	bne.n	8003070 <HAL_ADC_Start_DMA+0xf0>
  {
    __HAL_LOCK(hadc);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Start_DMA+0x2a>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e065      	b.n	8003076 <HAL_ADC_Start_DMA+0xf6>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d114      	bne.n	8002fea <HAL_ADC_Start_DMA+0x6a>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fdea 	bl	8002b9e <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d004      	beq.n	8002fda <HAL_ADC_Start_DMA+0x5a>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff fdcf 	bl	8002b78 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fa36 	bl	800345c <ADC_Enable>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002ff4:	7dfb      	ldrb	r3, [r7, #23]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d13c      	bne.n	8003074 <HAL_ADC_Start_DMA+0xf4>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ffe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_ADC_Start_DMA+0x100>)
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003020:	4a18      	ldr	r2, [pc, #96]	; (8003084 <HAL_ADC_Start_DMA+0x104>)
 8003022:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_ADC_Start_DMA+0x108>)
 800302a:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	221c      	movs	r2, #28
 8003032:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0210 	orr.w	r2, r2, #16
 800304a:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3340      	adds	r3, #64	; 0x40
 8003056:	4619      	mov	r1, r3
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f000 fdbe 	bl	8003bdc <HAL_DMA_Start_IT>
 8003060:	4603      	mov	r3, r0
 8003062:	75fb      	strb	r3, [r7, #23]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff fdbc 	bl	8002be6 <LL_ADC_REG_StartConversion>
 800306e:	e001      	b.n	8003074 <HAL_ADC_Start_DMA+0xf4>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003070:	2302      	movs	r3, #2
 8003072:	75fb      	strb	r3, [r7, #23]
  }

  return tmp_hal_status;
 8003074:	7dfb      	ldrb	r3, [r7, #23]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	08003627 	.word	0x08003627
 8003084:	080036ef 	.word	0x080036ef
 8003088:	0800370b 	.word	0x0800370b

0800308c <HAL_ADC_Stop_DMA>:
  *         ADC peripheral.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_ADC_Stop_DMA+0x16>
 800309e:	2302      	movs	r3, #2
 80030a0:	e050      	b.n	8003144 <HAL_ADC_Stop_DMA+0xb8>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f990 	bl	80033d0 <ADC_ConversionStop>
 80030b0:	4603      	mov	r3, r0
 80030b2:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030b4:	7bfb      	ldrb	r3, [r7, #15]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d13f      	bne.n	800313a <HAL_ADC_Stop_DMA+0xae>
  {
    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d10f      	bne.n	80030e8 <HAL_ADC_Stop_DMA+0x5c>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fe03 	bl	8003cd8 <HAL_DMA_Abort>
 80030d2:	4603      	mov	r3, r0
 80030d4:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_ADC_Stop_DMA+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	659a      	str	r2, [r3, #88]	; 0x58
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa32 	bl	8003568 <ADC_Disable>
 8003104:	4603      	mov	r3, r0
 8003106:	73fb      	strb	r3, [r7, #15]
 8003108:	e002      	b.n	8003110 <HAL_ADC_Stop_DMA+0x84>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 fa2c 	bl	8003568 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_ADC_Stop_DMA+0x9e>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800311e:	f023 0301 	bic.w	r3, r3, #1
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }

    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0201 	bic.w	r2, r2, #1
 8003138:	60da      	str	r2, [r3, #12]
  }

  __HAL_UNLOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8003142:	7bfb      	ldrb	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr
	...

08003160 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800316e:	2300      	movs	r3, #0
 8003170:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003180:	2b01      	cmp	r3, #1
 8003182:	d101      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x28>
 8003184:	2302      	movs	r3, #2
 8003186:	e110      	b.n	80033aa <HAL_ADC_ConfigChannel+0x24a>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f7ff fd4c 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	f040 80f7 	bne.w	8003390 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	f000 80b1 	beq.w	800330e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	691b      	ldr	r3, [r3, #16]
 80031b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b4:	d004      	beq.n	80031c0 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_ADC_ConfigChannel+0x254>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d108      	bne.n	80031d2 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f7ff fc5a 	bl	8002a84 <LL_ADC_REG_SetSequencerChAdd>
 80031d0:	e041      	b.n	8003256 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f003 031f 	and.w	r3, r3, #31
 80031de:	210f      	movs	r1, #15
 80031e0:	fa01 f303 	lsl.w	r3, r1, r3
 80031e4:	43db      	mvns	r3, r3
 80031e6:	401a      	ands	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d105      	bne.n	8003200 <HAL_ADC_ConfigChannel+0xa0>
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	0e9b      	lsrs	r3, r3, #26
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	e011      	b.n	8003224 <HAL_ADC_ConfigChannel+0xc4>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	6849      	ldr	r1, [r1, #4]
 8003228:	f001 011f 	and.w	r1, r1, #31
 800322c:	408b      	lsls	r3, r1
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	1c5a      	adds	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69db      	ldr	r3, [r3, #28]
 8003240:	429a      	cmp	r2, r3
 8003242:	d808      	bhi.n	8003256 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	6859      	ldr	r1, [r3, #4]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	f7ff fbf6 	bl	8002a42 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6819      	ldr	r1, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	461a      	mov	r2, r3
 8003264:	f7ff fc33 	bl	8002ace <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f280 8097 	bge.w	80033a0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003272:	4851      	ldr	r0, [pc, #324]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003274:	f7ff fb90 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 8003278:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a4f      	ldr	r2, [pc, #316]	; (80033bc <HAL_ADC_ConfigChannel+0x25c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d120      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11b      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003294:	4619      	mov	r1, r3
 8003296:	4848      	ldr	r0, [pc, #288]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003298:	f7ff fb6c 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800329c:	4b48      	ldr	r3, [pc, #288]	; (80033c0 <HAL_ADC_ConfigChannel+0x260>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	099b      	lsrs	r3, r3, #6
 80032a2:	4a48      	ldr	r2, [pc, #288]	; (80033c4 <HAL_ADC_ConfigChannel+0x264>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	1c5a      	adds	r2, r3, #1
 80032ac:	4613      	mov	r3, r2
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032b6:	e002      	b.n	80032be <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f9      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80032c4:	e06c      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a3f      	ldr	r2, [pc, #252]	; (80033c8 <HAL_ADC_ConfigChannel+0x268>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d10c      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x18a>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d107      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e0:	4619      	mov	r1, r3
 80032e2:	4835      	ldr	r0, [pc, #212]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 80032e4:	f7ff fb46 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
 80032e8:	e05a      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a37      	ldr	r2, [pc, #220]	; (80033cc <HAL_ADC_ConfigChannel+0x26c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d155      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d150      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003304:	4619      	mov	r1, r3
 8003306:	482c      	ldr	r0, [pc, #176]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003308:	f7ff fb34 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
 800330c:	e048      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003316:	d004      	beq.n	8003322 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800331c:	4a25      	ldr	r2, [pc, #148]	; (80033b4 <HAL_ADC_ConfigChannel+0x254>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d107      	bne.n	8003332 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f7ff fbbb 	bl	8002aa8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	da32      	bge.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800333a:	481f      	ldr	r0, [pc, #124]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 800333c:	f7ff fb2c 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 8003340:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_ADC_ConfigChannel+0x25c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d107      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003352:	4619      	mov	r1, r3
 8003354:	4818      	ldr	r0, [pc, #96]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003356:	f7ff fb0d 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
 800335a:	e021      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a19      	ldr	r2, [pc, #100]	; (80033c8 <HAL_ADC_ConfigChannel+0x268>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d107      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800336c:	4619      	mov	r1, r3
 800336e:	4812      	ldr	r0, [pc, #72]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 8003370:	f7ff fb00 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
 8003374:	e014      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a14      	ldr	r2, [pc, #80]	; (80033cc <HAL_ADC_ConfigChannel+0x26c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d10f      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003380:	69bb      	ldr	r3, [r7, #24]
 8003382:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003386:	4619      	mov	r1, r3
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <HAL_ADC_ConfigChannel+0x258>)
 800338a:	f7ff faf3 	bl	8002974 <LL_ADC_SetCommonPathInternalCh>
 800338e:	e007      	b.n	80033a0 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f043 0220 	orr.w	r2, r3, #32
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	80000004 	.word	0x80000004
 80033b8:	40012708 	.word	0x40012708
 80033bc:	b0001000 	.word	0xb0001000
 80033c0:	20000014 	.word	0x20000014
 80033c4:	053e2d63 	.word	0x053e2d63
 80033c8:	b8004000 	.word	0xb8004000
 80033cc:	b4002000 	.word	0xb4002000

080033d0 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7ff fc28 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d033      	beq.n	8003450 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fbe8 	bl	8002bc2 <LL_ADC_IsDisableOngoing>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d104      	bne.n	8003402 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff fc05 	bl	8002c0c <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003402:	f7fe fcd9 	bl	8001db8 <HAL_GetTick>
 8003406:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003408:	e01b      	b.n	8003442 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800340a:	f7fe fcd5 	bl	8001db8 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d914      	bls.n	8003442 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	f043 0210 	orr.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003436:	f043 0201 	orr.w	r2, r3, #1
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e007      	b.n	8003452 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1dc      	bne.n	800340a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003464:	2300      	movs	r3, #0
 8003466:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7ff fb96 	bl	8002b9e <LL_ADC_IsEnabled>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d169      	bne.n	800354c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689a      	ldr	r2, [r3, #8]
 800347e:	4b36      	ldr	r3, [pc, #216]	; (8003558 <ADC_Enable+0xfc>)
 8003480:	4013      	ands	r3, r2
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00d      	beq.n	80034a2 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	f043 0210 	orr.w	r2, r3, #16
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003496:	f043 0201 	orr.w	r2, r3, #1
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e055      	b.n	800354e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fb53 	bl	8002b52 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80034ac:	482b      	ldr	r0, [pc, #172]	; (800355c <ADC_Enable+0x100>)
 80034ae:	f7ff fa73 	bl	8002998 <LL_ADC_GetCommonPathInternalCh>
 80034b2:	4603      	mov	r3, r0
 80034b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00f      	beq.n	80034dc <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034bc:	4b28      	ldr	r3, [pc, #160]	; (8003560 <ADC_Enable+0x104>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	099b      	lsrs	r3, r3, #6
 80034c2:	4a28      	ldr	r2, [pc, #160]	; (8003564 <ADC_Enable+0x108>)
 80034c4:	fba2 2303 	umull	r2, r3, r2, r3
 80034c8:	099b      	lsrs	r3, r3, #6
 80034ca:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80034cc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034ce:	e002      	b.n	80034d6 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1f9      	bne.n	80034d0 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	7e5b      	ldrb	r3, [r3, #25]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d033      	beq.n	800354c <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80034e4:	f7fe fc68 	bl	8001db8 <HAL_GetTick>
 80034e8:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034ea:	e028      	b.n	800353e <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fb54 	bl	8002b9e <LL_ADC_IsEnabled>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d104      	bne.n	8003506 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7ff fb26 	bl	8002b52 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003506:	f7fe fc57 	bl	8001db8 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d914      	bls.n	800353e <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d00d      	beq.n	800353e <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003526:	f043 0210 	orr.w	r2, r3, #16
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003532:	f043 0201 	orr.w	r2, r3, #1
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b01      	cmp	r3, #1
 800354a:	d1cf      	bne.n	80034ec <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3710      	adds	r7, #16
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	80000017 	.word	0x80000017
 800355c:	40012708 	.word	0x40012708
 8003560:	20000014 	.word	0x20000014
 8003564:	053e2d63 	.word	0x053e2d63

08003568 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4618      	mov	r0, r3
 8003576:	f7ff fb24 	bl	8002bc2 <LL_ADC_IsDisableOngoing>
 800357a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fb0c 	bl	8002b9e <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d047      	beq.n	800361c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d144      	bne.n	800361c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f003 0305 	and.w	r3, r3, #5
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10c      	bne.n	80035ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fae7 	bl	8002b78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2203      	movs	r2, #3
 80035b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80035b2:	f7fe fc01 	bl	8001db8 <HAL_GetTick>
 80035b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035b8:	e029      	b.n	800360e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e023      	b.n	800361e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80035d6:	f7fe fbef 	bl	8001db8 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b02      	cmp	r3, #2
 80035e2:	d914      	bls.n	800360e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f6:	f043 0210 	orr.w	r2, r3, #16
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003602:	f043 0201 	orr.w	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e007      	b.n	800361e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1dc      	bne.n	80035d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}

08003626 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b084      	sub	sp, #16
 800362a:	af00      	add	r7, sp, #0
 800362c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003632:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003638:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800363c:	2b00      	cmp	r3, #0
 800363e:	d143      	bne.n	80036c8 <ADC_DMAConvCplt+0xa2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003644:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff f9e4 	bl	8002a1e <LL_ADC_REG_IsTriggerSourceSWStart>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d031      	beq.n	80036c0 <ADC_DMAConvCplt+0x9a>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	7e9b      	ldrb	r3, [r3, #26]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d12d      	bne.n	80036c0 <ADC_DMAConvCplt+0x9a>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b08      	cmp	r3, #8
 8003670:	d126      	bne.n	80036c0 <ADC_DMAConvCplt+0x9a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fadb 	bl	8002c32 <LL_ADC_REG_IsConversionOngoing>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d112      	bne.n	80036a8 <ADC_DMAConvCplt+0x82>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 020c 	bic.w	r2, r2, #12
 8003690:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	f043 0201 	orr.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	659a      	str	r2, [r3, #88]	; 0x58
 80036a6:	e00b      	b.n	80036c0 <ADC_DMAConvCplt+0x9a>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	f043 0220 	orr.w	r2, r3, #32
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f7fd fb73 	bl	8000dac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80036c6:	e00e      	b.n	80036e6 <ADC_DMAConvCplt+0xc0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <ADC_DMAConvCplt+0xb6>
      HAL_ADC_ErrorCallback(hadc);
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f7ff fd39 	bl	800314c <HAL_ADC_ErrorCallback>
}
 80036da:	e004      	b.n	80036e6 <ADC_DMAConvCplt+0xc0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	4798      	blx	r3
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f7fd fb60 	bl	8000dc2 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003702:	bf00      	nop
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800370a:	b580      	push	{r7, lr}
 800370c:	b084      	sub	sp, #16
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff fd0b 	bl	800314c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800375c:	4013      	ands	r3, r2
 800375e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800376c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003772:	4a04      	ldr	r2, [pc, #16]	; (8003784 <__NVIC_SetPriorityGrouping+0x44>)
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	60d3      	str	r3, [r2, #12]
}
 8003778:	bf00      	nop
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	bc80      	pop	{r7}
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003788:	b480      	push	{r7}
 800378a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <__NVIC_GetPriorityGrouping+0x18>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	0a1b      	lsrs	r3, r3, #8
 8003792:	f003 0307 	and.w	r3, r3, #7
}
 8003796:	4618      	mov	r0, r3
 8003798:	46bd      	mov	sp, r7
 800379a:	bc80      	pop	{r7}
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	db0b      	blt.n	80037ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	f003 021f 	and.w	r2, r3, #31
 80037bc:	4906      	ldr	r1, [pc, #24]	; (80037d8 <__NVIC_EnableIRQ+0x34>)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	095b      	lsrs	r3, r3, #5
 80037c4:	2001      	movs	r0, #1
 80037c6:	fa00 f202 	lsl.w	r2, r0, r2
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bc80      	pop	{r7}
 80037d6:	4770      	bx	lr
 80037d8:	e000e100 	.word	0xe000e100

080037dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	4603      	mov	r3, r0
 80037e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	db12      	blt.n	8003814 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	f003 021f 	and.w	r2, r3, #31
 80037f4:	490a      	ldr	r1, [pc, #40]	; (8003820 <__NVIC_DisableIRQ+0x44>)
 80037f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fa:	095b      	lsrs	r3, r3, #5
 80037fc:	2001      	movs	r0, #1
 80037fe:	fa00 f202 	lsl.w	r2, r0, r2
 8003802:	3320      	adds	r3, #32
 8003804:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003808:	f3bf 8f4f 	dsb	sy
}
 800380c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800380e:	f3bf 8f6f 	isb	sy
}
 8003812:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	bc80      	pop	{r7}
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	e000e100 	.word	0xe000e100

08003824 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003834:	2b00      	cmp	r3, #0
 8003836:	db0a      	blt.n	800384e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	b2da      	uxtb	r2, r3
 800383c:	490c      	ldr	r1, [pc, #48]	; (8003870 <__NVIC_SetPriority+0x4c>)
 800383e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003842:	0112      	lsls	r2, r2, #4
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	440b      	add	r3, r1
 8003848:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800384c:	e00a      	b.n	8003864 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	b2da      	uxtb	r2, r3
 8003852:	4908      	ldr	r1, [pc, #32]	; (8003874 <__NVIC_SetPriority+0x50>)
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	3b04      	subs	r3, #4
 800385c:	0112      	lsls	r2, r2, #4
 800385e:	b2d2      	uxtb	r2, r2
 8003860:	440b      	add	r3, r1
 8003862:	761a      	strb	r2, [r3, #24]
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	bc80      	pop	{r7}
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003878:	b480      	push	{r7}
 800387a:	b089      	sub	sp, #36	; 0x24
 800387c:	af00      	add	r7, sp, #0
 800387e:	60f8      	str	r0, [r7, #12]
 8003880:	60b9      	str	r1, [r7, #8]
 8003882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 0307 	and.w	r3, r3, #7
 800388a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f1c3 0307 	rsb	r3, r3, #7
 8003892:	2b04      	cmp	r3, #4
 8003894:	bf28      	it	cs
 8003896:	2304      	movcs	r3, #4
 8003898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	3304      	adds	r3, #4
 800389e:	2b06      	cmp	r3, #6
 80038a0:	d902      	bls.n	80038a8 <NVIC_EncodePriority+0x30>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3b03      	subs	r3, #3
 80038a6:	e000      	b.n	80038aa <NVIC_EncodePriority+0x32>
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	43da      	mvns	r2, r3
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	401a      	ands	r2, r3
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43d9      	mvns	r1, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038d0:	4313      	orrs	r3, r2
         );
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3724      	adds	r7, #36	; 0x24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f7ff ff2b 	bl	8003740 <__NVIC_SetPriorityGrouping>
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b086      	sub	sp, #24
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	4603      	mov	r3, r0
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	607a      	str	r2, [r7, #4]
 80038fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003900:	f7ff ff42 	bl	8003788 <__NVIC_GetPriorityGrouping>
 8003904:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	6978      	ldr	r0, [r7, #20]
 800390c:	f7ff ffb4 	bl	8003878 <NVIC_EncodePriority>
 8003910:	4602      	mov	r2, r0
 8003912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f7ff ff83 	bl	8003824 <__NVIC_SetPriority>
}
 800391e:	bf00      	nop
 8003920:	3718      	adds	r7, #24
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}

08003926 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b082      	sub	sp, #8
 800392a:	af00      	add	r7, sp, #0
 800392c:	4603      	mov	r3, r0
 800392e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff ff35 	bl	80037a4 <__NVIC_EnableIRQ>
}
 800393a:	bf00      	nop
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800394c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff43 	bl	80037dc <__NVIC_DisableIRQ>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
	...

08003960 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e08e      	b.n	8003a90 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	461a      	mov	r2, r3
 8003978:	4b47      	ldr	r3, [pc, #284]	; (8003a98 <HAL_DMA_Init+0x138>)
 800397a:	429a      	cmp	r2, r3
 800397c:	d80f      	bhi.n	800399e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	4b45      	ldr	r3, [pc, #276]	; (8003a9c <HAL_DMA_Init+0x13c>)
 8003986:	4413      	add	r3, r2
 8003988:	4a45      	ldr	r2, [pc, #276]	; (8003aa0 <HAL_DMA_Init+0x140>)
 800398a:	fba2 2303 	umull	r2, r3, r2, r3
 800398e:	091b      	lsrs	r3, r3, #4
 8003990:	009a      	lsls	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a42      	ldr	r2, [pc, #264]	; (8003aa4 <HAL_DMA_Init+0x144>)
 800399a:	641a      	str	r2, [r3, #64]	; 0x40
 800399c:	e00e      	b.n	80039bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <HAL_DMA_Init+0x148>)
 80039a6:	4413      	add	r3, r2
 80039a8:	4a3d      	ldr	r2, [pc, #244]	; (8003aa0 <HAL_DMA_Init+0x140>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	091b      	lsrs	r3, r3, #4
 80039b0:	009a      	lsls	r2, r3, #2
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a3c      	ldr	r2, [pc, #240]	; (8003aac <HAL_DMA_Init+0x14c>)
 80039ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6812      	ldr	r2, [r2, #0]
 80039ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	431a      	orrs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 fb24 	bl	800405c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1c:	d102      	bne.n	8003a24 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a30:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a3a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d010      	beq.n	8003a66 <HAL_DMA_Init+0x106>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d80c      	bhi.n	8003a66 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fb4d 	bl	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a62:	605a      	str	r2, [r3, #4]
 8003a64:	e008      	b.n	8003a78 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = NULL;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40020407 	.word	0x40020407
 8003a9c:	bffdfff8 	.word	0xbffdfff8
 8003aa0:	cccccccd 	.word	0xcccccccd
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	bffdfbf8 	.word	0xbffdfbf8
 8003aac:	40020400 	.word	0x40020400

08003ab0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e07b      	b.n	8003bba <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	4b3a      	ldr	r3, [pc, #232]	; (8003bc4 <HAL_DMA_DeInit+0x114>)
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d80f      	bhi.n	8003afe <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	4b38      	ldr	r3, [pc, #224]	; (8003bc8 <HAL_DMA_DeInit+0x118>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	4a38      	ldr	r2, [pc, #224]	; (8003bcc <HAL_DMA_DeInit+0x11c>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	009a      	lsls	r2, r3, #2
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a35      	ldr	r2, [pc, #212]	; (8003bd0 <HAL_DMA_DeInit+0x120>)
 8003afa:	641a      	str	r2, [r3, #64]	; 0x40
 8003afc:	e00e      	b.n	8003b1c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	4b33      	ldr	r3, [pc, #204]	; (8003bd4 <HAL_DMA_DeInit+0x124>)
 8003b06:	4413      	add	r3, r2
 8003b08:	4a30      	ldr	r2, [pc, #192]	; (8003bcc <HAL_DMA_DeInit+0x11c>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	091b      	lsrs	r3, r3, #4
 8003b10:	009a      	lsls	r2, r3, #2
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2f      	ldr	r2, [pc, #188]	; (8003bd8 <HAL_DMA_DeInit+0x128>)
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	f003 021c 	and.w	r2, r3, #28
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	2101      	movs	r1, #1
 8003b32:	fa01 f202 	lsl.w	r2, r1, r2
 8003b36:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa8f 	bl	800405c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00f      	beq.n	8003b78 <HAL_DMA_DeInit+0xc8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	2b04      	cmp	r3, #4
 8003b5e:	d80b      	bhi.n	8003b78 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 fac3 	bl	80040ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b76:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = NULL;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40020407 	.word	0x40020407
 8003bc8:	bffdfff8 	.word	0xbffdfff8
 8003bcc:	cccccccd 	.word	0xcccccccd
 8003bd0:	40020000 	.word	0x40020000
 8003bd4:	bffdfbf8 	.word	0xbffdfbf8
 8003bd8:	40020400 	.word	0x40020400

08003bdc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
 8003be8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <HAL_DMA_Start_IT+0x20>
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	e069      	b.n	8003cd0 <HAL_DMA_Start_IT+0xf4>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d155      	bne.n	8003cbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	68b9      	ldr	r1, [r7, #8]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f9d3 	bl	8003fe0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d008      	beq.n	8003c54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 020e 	orr.w	r2, r2, #14
 8003c50:	601a      	str	r2, [r3, #0]
 8003c52:	e00f      	b.n	8003c74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0204 	bic.w	r2, r2, #4
 8003c62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 020a 	orr.w	r2, r2, #10
 8003c72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != NULL)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d007      	beq.n	8003caa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ca8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	e008      	b.n	8003cce <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e04f      	b.n	8003d8a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d008      	beq.n	8003d08 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e040      	b.n	8003d8a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 020e 	bic.w	r2, r2, #14
 8003d16:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d26:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f022 0201 	bic.w	r2, r2, #1
 8003d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3c:	f003 021c 	and.w	r2, r3, #28
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	2101      	movs	r1, #1
 8003d46:	fa01 f202 	lsl.w	r2, r1, r2
 8003d4a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003d54:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003d76:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr

08003d94 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d005      	beq.n	8003db8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e047      	b.n	8003e48 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 020e 	bic.w	r2, r2, #14
 8003dc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003de6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dec:	f003 021c 	and.w	r2, r3, #28
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df4:	2101      	movs	r1, #1
 8003df6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	687a      	ldr	r2, [r7, #4]
 8003e02:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00c      	beq.n	8003e28 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	4798      	blx	r3
    }
  }
  return status;
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e70:	f003 031c 	and.w	r3, r3, #28
 8003e74:	2204      	movs	r2, #4
 8003e76:	409a      	lsls	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d027      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x7c>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d022      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d107      	bne.n	8003ea8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0204 	bic.w	r2, r2, #4
 8003ea6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eac:	f003 021c 	and.w	r2, r3, #28
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	2104      	movs	r1, #4
 8003eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003eba:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8081 	beq.w	8003fc8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003ece:	e07b      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed4:	f003 031c 	and.w	r3, r3, #28
 8003ed8:	2202      	movs	r2, #2
 8003eda:	409a      	lsls	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d03d      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x10c>
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d038      	beq.n	8003f60 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10b      	bne.n	8003f14 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 020a 	bic.w	r2, r2, #10
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b2e      	ldr	r3, [pc, #184]	; (8003fd4 <HAL_DMA_IRQHandler+0x180>)
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d909      	bls.n	8003f34 <HAL_DMA_IRQHandler+0xe0>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	f003 031c 	and.w	r3, r3, #28
 8003f28:	4a2b      	ldr	r2, [pc, #172]	; (8003fd8 <HAL_DMA_IRQHandler+0x184>)
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f30:	6053      	str	r3, [r2, #4]
 8003f32:	e008      	b.n	8003f46 <HAL_DMA_IRQHandler+0xf2>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f38:	f003 031c 	and.w	r3, r3, #28
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <HAL_DMA_IRQHandler+0x188>)
 8003f3e:	2102      	movs	r1, #2
 8003f40:	fa01 f303 	lsl.w	r3, r1, r3
 8003f44:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d038      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003f5e:	e033      	b.n	8003fc8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f64:	f003 031c 	and.w	r3, r3, #28
 8003f68:	2208      	movs	r2, #8
 8003f6a:	409a      	lsls	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d02a      	beq.n	8003fca <HAL_DMA_IRQHandler+0x176>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d025      	beq.n	8003fca <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 020e 	bic.w	r2, r2, #14
 8003f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f003 021c 	and.w	r2, r3, #28
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8003fa0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d004      	beq.n	8003fca <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
}
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40020080 	.word	0x40020080
 8003fd8:	40020400 	.word	0x40020400
 8003fdc:	40020000 	.word	0x40020000

08003fe0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003ff6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004008:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f003 021c 	and.w	r2, r3, #28
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2101      	movs	r1, #1
 8004018:	fa01 f202 	lsl.w	r2, r1, r2
 800401c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	2b10      	cmp	r3, #16
 800402c:	d108      	bne.n	8004040 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800403e:	e007      	b.n	8004050 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	60da      	str	r2, [r3, #12]
}
 8004050:	bf00      	nop
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
	...

0800405c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	461a      	mov	r2, r3
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800406c:	429a      	cmp	r2, r3
 800406e:	d813      	bhi.n	8004098 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	089b      	lsrs	r3, r3, #2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800407c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004080:	687a      	ldr	r2, [r7, #4]
 8004082:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	3b08      	subs	r3, #8
 800408c:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	091b      	lsrs	r3, r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
 8004096:	e011      	b.n	80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409c:	089b      	lsrs	r3, r3, #2
 800409e:	009a      	lsls	r2, r3, #2
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80040a2:	4413      	add	r3, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	3b08      	subs	r3, #8
 80040b0:	4a0b      	ldr	r2, [pc, #44]	; (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	3307      	adds	r3, #7
 80040ba:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80040c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	2201      	movs	r2, #1
 80040ca:	409a      	lsls	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040d0:	bf00      	nop
 80040d2:	3714      	adds	r7, #20
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40020407 	.word	0x40020407
 80040e0:	cccccccd 	.word	0xcccccccd
 80040e4:	4002081c 	.word	0x4002081c
 80040e8:	40020880 	.word	0x40020880

080040ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040fc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4b0a      	ldr	r3, [pc, #40]	; (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	461a      	mov	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a08      	ldr	r2, [pc, #32]	; (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004110:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	3b01      	subs	r3, #1
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2201      	movs	r2, #1
 800411c:	409a      	lsls	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	1000823f 	.word	0x1000823f
 8004130:	40020940 	.word	0x40020940

08004134 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800413e:	2300      	movs	r3, #0
 8004140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004142:	e140      	b.n	80043c6 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	2101      	movs	r1, #1
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	fa01 f303 	lsl.w	r3, r1, r3
 8004150:	4013      	ands	r3, r2
 8004152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8132 	beq.w	80043c0 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	2b01      	cmp	r3, #1
 8004166:	d005      	beq.n	8004174 <HAL_GPIO_Init+0x40>
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f003 0303 	and.w	r3, r3, #3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d130      	bne.n	80041d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	2203      	movs	r2, #3
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	43db      	mvns	r3, r3
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4013      	ands	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	68da      	ldr	r2, [r3, #12]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	4313      	orrs	r3, r2
 800419c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	693a      	ldr	r2, [r7, #16]
 80041a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041aa:	2201      	movs	r2, #1
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	fa02 f303 	lsl.w	r3, r2, r3
 80041b2:	43db      	mvns	r3, r3
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4013      	ands	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	091b      	lsrs	r3, r3, #4
 80041c0:	f003 0201 	and.w	r2, r3, #1
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	fa02 f303 	lsl.w	r3, r2, r3
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b03      	cmp	r3, #3
 80041e0:	d017      	beq.n	8004212 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	2203      	movs	r2, #3
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	43db      	mvns	r3, r3
 80041f4:	693a      	ldr	r2, [r7, #16]
 80041f6:	4013      	ands	r3, r2
 80041f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	689a      	ldr	r2, [r3, #8]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	4313      	orrs	r3, r2
 800420a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 0303 	and.w	r3, r3, #3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d123      	bne.n	8004266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800422a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f003 0307 	and.w	r3, r3, #7
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	220f      	movs	r2, #15
 8004236:	fa02 f303 	lsl.w	r3, r2, r3
 800423a:	43db      	mvns	r3, r3
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	4013      	ands	r3, r2
 8004240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	08da      	lsrs	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	3208      	adds	r2, #8
 8004260:	6939      	ldr	r1, [r7, #16]
 8004262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0203 	and.w	r2, r3, #3
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 808c 	beq.w	80043c0 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80042a8:	4a4e      	ldr	r2, [pc, #312]	; (80043e4 <HAL_GPIO_Init+0x2b0>)
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	089b      	lsrs	r3, r3, #2
 80042ae:	3302      	adds	r3, #2
 80042b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	2207      	movs	r2, #7
 80042c0:	fa02 f303 	lsl.w	r3, r2, r3
 80042c4:	43db      	mvns	r3, r3
 80042c6:	693a      	ldr	r2, [r7, #16]
 80042c8:	4013      	ands	r3, r2
 80042ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042d2:	d00d      	beq.n	80042f0 <HAL_GPIO_Init+0x1bc>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a44      	ldr	r2, [pc, #272]	; (80043e8 <HAL_GPIO_Init+0x2b4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <HAL_GPIO_Init+0x1b8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_GPIO_Init+0x2b8>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_GPIO_Init+0x1b4>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e004      	b.n	80042f2 <HAL_GPIO_Init+0x1be>
 80042e8:	2307      	movs	r3, #7
 80042ea:	e002      	b.n	80042f2 <HAL_GPIO_Init+0x1be>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e000      	b.n	80042f2 <HAL_GPIO_Init+0x1be>
 80042f0:	2300      	movs	r3, #0
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	f002 0203 	and.w	r2, r2, #3
 80042f8:	0092      	lsls	r2, r2, #2
 80042fa:	4093      	lsls	r3, r2
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004302:	4938      	ldr	r1, [pc, #224]	; (80043e4 <HAL_GPIO_Init+0x2b0>)
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	3302      	adds	r3, #2
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004310:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43db      	mvns	r3, r3
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004334:	4a2e      	ldr	r2, [pc, #184]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800433a:	4b2d      	ldr	r3, [pc, #180]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800435e:	4a24      	ldr	r2, [pc, #144]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004364:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 8004366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800436a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800438a:	4a19      	ldr	r2, [pc, #100]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004392:	4b17      	ldr	r3, [pc, #92]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 8004394:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004398:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	43db      	mvns	r3, r3
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4013      	ands	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80043b8:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <HAL_GPIO_Init+0x2bc>)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	3301      	adds	r3, #1
 80043c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	fa22 f303 	lsr.w	r3, r2, r3
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f aeb7 	bne.w	8004144 <HAL_GPIO_Init+0x10>
  }
}
 80043d6:	bf00      	nop
 80043d8:	bf00      	nop
 80043da:	371c      	adds	r7, #28
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr
 80043e2:	bf00      	nop
 80043e4:	40010000 	.word	0x40010000
 80043e8:	48000400 	.word	0x48000400
 80043ec:	48000800 	.word	0x48000800
 80043f0:	58000800 	.word	0x58000800

080043f4 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b087      	sub	sp, #28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004402:	e0af      	b.n	8004564 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004404:	2201      	movs	r2, #1
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	fa02 f303 	lsl.w	r3, r2, r3
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	4013      	ands	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80a2 	beq.w	800455e <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800441a:	4a59      	ldr	r2, [pc, #356]	; (8004580 <HAL_GPIO_DeInit+0x18c>)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	089b      	lsrs	r3, r3, #2
 8004420:	3302      	adds	r3, #2
 8004422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004426:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	2207      	movs	r2, #7
 8004432:	fa02 f303 	lsl.w	r3, r2, r3
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004442:	d00d      	beq.n	8004460 <HAL_GPIO_DeInit+0x6c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a4f      	ldr	r2, [pc, #316]	; (8004584 <HAL_GPIO_DeInit+0x190>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d007      	beq.n	800445c <HAL_GPIO_DeInit+0x68>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a4e      	ldr	r2, [pc, #312]	; (8004588 <HAL_GPIO_DeInit+0x194>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d101      	bne.n	8004458 <HAL_GPIO_DeInit+0x64>
 8004454:	2302      	movs	r3, #2
 8004456:	e004      	b.n	8004462 <HAL_GPIO_DeInit+0x6e>
 8004458:	2307      	movs	r3, #7
 800445a:	e002      	b.n	8004462 <HAL_GPIO_DeInit+0x6e>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_GPIO_DeInit+0x6e>
 8004460:	2300      	movs	r3, #0
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	f002 0203 	and.w	r2, r2, #3
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	4093      	lsls	r3, r2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	429a      	cmp	r2, r3
 8004470:	d136      	bne.n	80044e0 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <HAL_GPIO_DeInit+0x198>)
 8004474:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	43db      	mvns	r3, r3
 800447c:	4943      	ldr	r1, [pc, #268]	; (800458c <HAL_GPIO_DeInit+0x198>)
 800447e:	4013      	ands	r3, r2
 8004480:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <HAL_GPIO_DeInit+0x198>)
 8004486:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	43db      	mvns	r3, r3
 800448e:	493f      	ldr	r1, [pc, #252]	; (800458c <HAL_GPIO_DeInit+0x198>)
 8004490:	4013      	ands	r3, r2
 8004492:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <HAL_GPIO_DeInit+0x198>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	43db      	mvns	r3, r3
 800449e:	493b      	ldr	r1, [pc, #236]	; (800458c <HAL_GPIO_DeInit+0x198>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80044a4:	4b39      	ldr	r3, [pc, #228]	; (800458c <HAL_GPIO_DeInit+0x198>)
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	4937      	ldr	r1, [pc, #220]	; (800458c <HAL_GPIO_DeInit+0x198>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	2207      	movs	r2, #7
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80044c2:	4a2f      	ldr	r2, [pc, #188]	; (8004580 <HAL_GPIO_DeInit+0x18c>)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	089b      	lsrs	r3, r3, #2
 80044c8:	3302      	adds	r3, #2
 80044ca:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	43da      	mvns	r2, r3
 80044d2:	482b      	ldr	r0, [pc, #172]	; (8004580 <HAL_GPIO_DeInit+0x18c>)
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	089b      	lsrs	r3, r3, #2
 80044d8:	400a      	ands	r2, r1
 80044da:	3302      	adds	r3, #2
 80044dc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	2103      	movs	r1, #3
 80044ea:	fa01 f303 	lsl.w	r3, r1, r3
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	08da      	lsrs	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	3208      	adds	r2, #8
 80044fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	220f      	movs	r2, #15
 800450a:	fa02 f303 	lsl.w	r3, r2, r3
 800450e:	43db      	mvns	r3, r3
 8004510:	697a      	ldr	r2, [r7, #20]
 8004512:	08d2      	lsrs	r2, r2, #3
 8004514:	4019      	ands	r1, r3
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	3208      	adds	r2, #8
 800451a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	005b      	lsls	r3, r3, #1
 8004526:	2103      	movs	r1, #3
 8004528:	fa01 f303 	lsl.w	r3, r1, r3
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	2101      	movs	r1, #1
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	fa01 f303 	lsl.w	r3, r1, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	401a      	ands	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	2103      	movs	r1, #3
 8004552:	fa01 f303 	lsl.w	r3, r1, r3
 8004556:	43db      	mvns	r3, r3
 8004558:	401a      	ands	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60da      	str	r2, [r3, #12]
    }

    position++;
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	3301      	adds	r3, #1
 8004562:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
 800456c:	2b00      	cmp	r3, #0
 800456e:	f47f af49 	bne.w	8004404 <HAL_GPIO_DeInit+0x10>
  }
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40010000 	.word	0x40010000
 8004584:	48000400 	.word	0x48000400
 8004588:	48000800 	.word	0x48000800
 800458c:	58000800 	.word	0x58000800

08004590 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	691a      	ldr	r2, [r3, #16]
 80045a0:	887b      	ldrh	r3, [r7, #2]
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d002      	beq.n	80045ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e001      	b.n	80045b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80045ae:	2300      	movs	r3, #0
 80045b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr

080045be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045be:	b480      	push	{r7}
 80045c0:	b083      	sub	sp, #12
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
 80045ca:	4613      	mov	r3, r2
 80045cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ce:	787b      	ldrb	r3, [r7, #1]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045d4:	887a      	ldrh	r2, [r7, #2]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80045da:	e002      	b.n	80045e2 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80045dc:	887a      	ldrh	r2, [r7, #2]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80045fe:	887a      	ldrh	r2, [r7, #2]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4013      	ands	r3, r2
 8004604:	041a      	lsls	r2, r3, #16
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	43d9      	mvns	r1, r3
 800460a:	887b      	ldrh	r3, [r7, #2]
 800460c:	400b      	ands	r3, r1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	619a      	str	r2, [r3, #24]
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
	...

08004620 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800462a:	4b08      	ldr	r3, [pc, #32]	; (800464c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d006      	beq.n	8004644 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004636:	4a05      	ldr	r2, [pc, #20]	; (800464c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004638:	88fb      	ldrh	r3, [r7, #6]
 800463a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800463c:	88fb      	ldrh	r3, [r7, #6]
 800463e:	4618      	mov	r0, r3
 8004640:	f7fc fec8 	bl	80013d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	58000800 	.word	0x58000800

08004650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e081      	b.n	8004766 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fc fdb8 	bl	80011ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2224      	movs	r2, #36	; 0x24
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0201 	bic.w	r2, r2, #1
 8004692:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d107      	bne.n	80046ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	689a      	ldr	r2, [r3, #8]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	e006      	b.n	80046d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d104      	bne.n	80046ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80046f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800470c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691a      	ldr	r2, [r3, #16]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a1a      	ldr	r2, [r3, #32]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f042 0201 	orr.w	r2, r2, #1
 8004746:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b20      	cmp	r3, #32
 8004782:	d138      	bne.n	80047f6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800478a:	2b01      	cmp	r3, #1
 800478c:	d101      	bne.n	8004792 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800478e:	2302      	movs	r3, #2
 8004790:	e032      	b.n	80047f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2224      	movs	r2, #36	; 0x24
 800479e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6819      	ldr	r1, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	683a      	ldr	r2, [r7, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	e000      	b.n	80047f8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047f6:	2302      	movs	r3, #2
  }
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr

08004802 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004802:	b480      	push	{r7}
 8004804:	b085      	sub	sp, #20
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b20      	cmp	r3, #32
 8004816:	d139      	bne.n	800488c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800481e:	2b01      	cmp	r3, #1
 8004820:	d101      	bne.n	8004826 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004822:	2302      	movs	r3, #2
 8004824:	e033      	b.n	800488e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2224      	movs	r2, #36	; 0x24
 8004832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004854:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0201 	orr.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2220      	movs	r2, #32
 800487c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	bc80      	pop	{r7}
 8004896:	4770      	bx	lr

08004898 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800489c:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a03      	ldr	r2, [pc, #12]	; (80048b0 <HAL_PWR_EnableBkUpAccess+0x18>)
 80048a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a6:	6013      	str	r3, [r2, #0]
}
 80048a8:	bf00      	nop
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc80      	pop	{r7}
 80048ae:	4770      	bx	lr
 80048b0:	58000400 	.word	0x58000400

080048b4 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10c      	bne.n	80048e0 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80048c6:	4b13      	ldr	r3, [pc, #76]	; (8004914 <HAL_PWR_EnterSLEEPMode+0x60>)
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048d2:	d10d      	bne.n	80048f0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80048d4:	f000 f83c 	bl	8004950 <HAL_PWREx_DisableLowPowerRunMode>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d008      	beq.n	80048f0 <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 80048de:	e015      	b.n	800490c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <HAL_PWR_EnterSLEEPMode+0x60>)
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80048ec:	f000 f822 	bl	8004934 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <HAL_PWR_EnterSLEEPMode+0x64>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4a08      	ldr	r2, [pc, #32]	; (8004918 <HAL_PWR_EnterSLEEPMode+0x64>)
 80048f6:	f023 0304 	bic.w	r3, r3, #4
 80048fa:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80048fc:	78fb      	ldrb	r3, [r7, #3]
 80048fe:	2b01      	cmp	r3, #1
 8004900:	d101      	bne.n	8004906 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004902:	bf30      	wfi
 8004904:	e002      	b.n	800490c <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004906:	bf40      	sev
    __WFE();
 8004908:	bf20      	wfe
    __WFE();
 800490a:	bf20      	wfe
  }
}
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58000400 	.word	0x58000400
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004920:	4b03      	ldr	r3, [pc, #12]	; (8004930 <HAL_PWREx_GetVoltageRange+0x14>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004928:	4618      	mov	r0, r3
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr
 8004930:	58000400 	.word	0x58000400

08004934 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004934:	b480      	push	{r7}
 8004936:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004938:	4b04      	ldr	r3, [pc, #16]	; (800494c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a03      	ldr	r2, [pc, #12]	; (800494c <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 800493e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004942:	6013      	str	r3, [r2, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr
 800494c:	58000400 	.word	0x58000400

08004950 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004950:	b480      	push	{r7}
 8004952:	b083      	sub	sp, #12
 8004954:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004956:	4b16      	ldr	r3, [pc, #88]	; (80049b0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a15      	ldr	r2, [pc, #84]	; (80049b0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800495c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004960:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004962:	4b14      	ldr	r3, [pc, #80]	; (80049b4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2232      	movs	r2, #50	; 0x32
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	0c9b      	lsrs	r3, r3, #18
 8004974:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004976:	e002      	b.n	800497e <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3b01      	subs	r3, #1
 800497c:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800497e:	4b0c      	ldr	r3, [pc, #48]	; (80049b0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498a:	d102      	bne.n	8004992 <HAL_PWREx_DisableLowPowerRunMode+0x42>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f2      	bne.n	8004978 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004992:	4b07      	ldr	r3, [pc, #28]	; (80049b0 <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d101      	bne.n	80049a4 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e000      	b.n	80049a6 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr
 80049b0:	58000400 	.word	0x58000400
 80049b4:	20000014 	.word	0x20000014
 80049b8:	431bde83 	.word	0x431bde83

080049bc <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 80049c6:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	4a0e      	ldr	r2, [pc, #56]	; (8004a08 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 80049d0:	f043 0302 	orr.w	r3, r3, #2
 80049d4:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049d6:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	4a0c      	ldr	r2, [pc, #48]	; (8004a0c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80049dc:	f043 0304 	orr.w	r3, r3, #4
 80049e0:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80049e8:	bf30      	wfi
 80049ea:	e002      	b.n	80049f2 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80049ec:	bf40      	sev
    __WFE();
 80049ee:	bf20      	wfe
    __WFE();
 80049f0:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	4a05      	ldr	r2, [pc, #20]	; (8004a0c <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80049f8:	f023 0304 	bic.w	r3, r3, #4
 80049fc:	6113      	str	r3, [r2, #16]
}
 80049fe:	bf00      	nop
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bc80      	pop	{r7}
 8004a06:	4770      	bx	lr
 8004a08:	58000400 	.word	0x58000400
 8004a0c:	e000ed00 	.word	0xe000ed00

08004a10 <LL_PWR_IsEnabledBkUpAccess>:
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a20:	d101      	bne.n	8004a26 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8004a22:	2301      	movs	r3, #1
 8004a24:	e000      	b.n	8004a28 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bc80      	pop	{r7}
 8004a2e:	4770      	bx	lr
 8004a30:	58000400 	.word	0x58000400

08004a34 <LL_RCC_HSE_EnableTcxo>:
{
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a46:	6013      	str	r3, [r2, #0]
}
 8004a48:	bf00      	nop
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <LL_RCC_HSE_DisableTcxo>:
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8004a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004a62:	6013      	str	r3, [r2, #0]
}
 8004a64:	bf00      	nop
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <LL_RCC_HSE_IsEnabledDiv2>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a7e:	d101      	bne.n	8004a84 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004a80:	2301      	movs	r3, #1
 8004a82:	e000      	b.n	8004a86 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bc80      	pop	{r7}
 8004a8c:	4770      	bx	lr

08004a8e <LL_RCC_HSE_Enable>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa0:	6013      	str	r3, [r2, #0]
}
 8004aa2:	bf00      	nop
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bc80      	pop	{r7}
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_HSE_Disable>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bc80      	pop	{r7}
 8004ac4:	4770      	bx	lr

08004ac6 <LL_RCC_HSE_IsReady>:
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8004aca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad8:	d101      	bne.n	8004ade <LL_RCC_HSE_IsReady+0x18>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <LL_RCC_HSE_IsReady+0x1a>
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bc80      	pop	{r7}
 8004ae6:	4770      	bx	lr

08004ae8 <LL_RCC_HSI_Enable>:
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bc80      	pop	{r7}
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_HSI_Disable>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bc80      	pop	{r7}
 8004b1e:	4770      	bx	lr

08004b20 <LL_RCC_HSI_IsReady>:
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b32:	d101      	bne.n	8004b38 <LL_RCC_HSI_IsReady+0x18>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <LL_RCC_HSI_IsReady+0x1a>
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bc80      	pop	{r7}
 8004b40:	4770      	bx	lr

08004b42 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	061b      	lsls	r3, r3, #24
 8004b58:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	604b      	str	r3, [r1, #4]
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr

08004b6a <LL_RCC_LSE_IsReady>:
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d101      	bne.n	8004b82 <LL_RCC_LSE_IsReady+0x18>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <LL_RCC_LSE_IsReady+0x1a>
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <LL_RCC_LSI_Enable>:
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8004b90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b9c:	f043 0301 	orr.w	r3, r3, #1
 8004ba0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr

08004bac <LL_RCC_LSI_Disable>:
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8004bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <LL_RCC_LSI_IsReady>:
{
 8004bcc:	b480      	push	{r7}
 8004bce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8004bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd8:	f003 0302 	and.w	r3, r3, #2
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d101      	bne.n	8004be4 <LL_RCC_LSI_IsReady+0x18>
 8004be0:	2301      	movs	r3, #1
 8004be2:	e000      	b.n	8004be6 <LL_RCC_LSI_IsReady+0x1a>
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bc80      	pop	{r7}
 8004bec:	4770      	bx	lr

08004bee <LL_RCC_MSI_Enable>:
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004bfc:	f043 0301 	orr.w	r3, r3, #1
 8004c00:	6013      	str	r3, [r2, #0]
}
 8004c02:	bf00      	nop
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bc80      	pop	{r7}
 8004c08:	4770      	bx	lr

08004c0a <LL_RCC_MSI_Disable>:
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	6013      	str	r3, [r2, #0]
}
 8004c1e:	bf00      	nop
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr

08004c26 <LL_RCC_MSI_IsReady>:
{
 8004c26:	b480      	push	{r7}
 8004c28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004c2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 0302 	and.w	r3, r3, #2
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d101      	bne.n	8004c3c <LL_RCC_MSI_IsReady+0x16>
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e000      	b.n	8004c3e <LL_RCC_MSI_IsReady+0x18>
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr

08004c46 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8004c46:	b480      	push	{r7}
 8004c48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8004c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d101      	bne.n	8004c5c <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e000      	b.n	8004c5e <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bc80      	pop	{r7}
 8004c64:	4770      	bx	lr

08004c66 <LL_RCC_MSI_GetRange>:
{
 8004c66:	b480      	push	{r7}
 8004c68:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8004c6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bc80      	pop	{r7}
 8004c7a:	4770      	bx	lr

08004c7c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8004c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bc80      	pop	{r7}
 8004c92:	4770      	bx	lr

08004c94 <LL_RCC_MSI_SetCalibTrimming>:
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	021b      	lsls	r3, r3, #8
 8004caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
}
 8004cb2:	bf00      	nop
 8004cb4:	370c      	adds	r7, #12
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bc80      	pop	{r7}
 8004cba:	4770      	bx	lr

08004cbc <LL_RCC_SetSysClkSource>:
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004cc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	f023 0203 	bic.w	r2, r3, #3
 8004cce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	608b      	str	r3, [r1, #8]
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <LL_RCC_GetSysClkSource>:
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ce6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f003 030c 	and.w	r3, r3, #12
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <LL_RCC_SetAHBPrescaler>:
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4313      	orrs	r3, r2
 8004d12:	608b      	str	r3, [r1, #8]
}
 8004d14:	bf00      	nop
 8004d16:	370c      	adds	r7, #12
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bc80      	pop	{r7}
 8004d1c:	4770      	bx	lr

08004d1e <LL_RCC_SetAHB3Prescaler>:
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004d26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d2e:	f023 020f 	bic.w	r2, r3, #15
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bc80      	pop	{r7}
 8004d48:	4770      	bx	lr

08004d4a <LL_RCC_SetAPB1Prescaler>:
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <LL_RCC_SetAPB2Prescaler>:
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	608b      	str	r3, [r1, #8]
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <LL_RCC_GetAHBPrescaler>:
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr

08004dac <LL_RCC_GetAHB3Prescaler>:
{
 8004dac:	b480      	push	{r7}
 8004dae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004db4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr

08004dc6 <LL_RCC_GetAPB1Prescaler>:
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <LL_RCC_GetAPB2Prescaler>:
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr

08004df2 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e04:	6013      	str	r3, [r2, #0]
}
 8004e06:	bf00      	nop
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bc80      	pop	{r7}
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e20:	6013      	str	r3, [r2, #0]
}
 8004e22:	bf00      	nop
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e3c:	d101      	bne.n	8004e42 <LL_RCC_PLL_IsReady+0x18>
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e000      	b.n	8004e44 <LL_RCC_PLL_IsReady+0x1a>
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bc80      	pop	{r7}
 8004e4a:	4770      	bx	lr

08004e4c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0a1b      	lsrs	r3, r3, #8
 8004e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr

08004e64 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004e64:	b480      	push	{r7}
 8004e66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bc80      	pop	{r7}
 8004e78:	4770      	bx	lr

08004e7a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bc80      	pop	{r7}
 8004e8e:	4770      	bx	lr

08004e90 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004e94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb8:	d101      	bne.n	8004ebe <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e000      	b.n	8004ec0 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bc80      	pop	{r7}
 8004ec6:	4770      	bx	lr

08004ec8 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004ecc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ed0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d101      	bne.n	8004ee2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bc80      	pop	{r7}
 8004eea:	4770      	bx	lr

08004eec <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efe:	d101      	bne.n	8004f04 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr

08004f0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004f12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f1c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f20:	d101      	bne.n	8004f26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bc80      	pop	{r7}
 8004f2e:	4770      	bx	lr

08004f30 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e36f      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f42:	f7ff fece 	bl	8004ce2 <LL_RCC_GetSysClkSource>
 8004f46:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f48:	f7ff ffa2 	bl	8004e90 <LL_RCC_PLL_GetMainSource>
 8004f4c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0320 	and.w	r3, r3, #32
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f000 80c4 	beq.w	80050e4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_RCC_OscConfig+0x3e>
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	2b0c      	cmp	r3, #12
 8004f66:	d176      	bne.n	8005056 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b01      	cmp	r3, #1
 8004f6c:	d173      	bne.n	8005056 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e353      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x68>
 8004f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f96:	e006      	b.n	8004fa6 <HAL_RCC_OscConfig+0x76>
 8004f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d222      	bcs.n	8004ff0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fd3c 	bl	8005a2c <RCC_SetFlashLatencyFromMSIRange>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d001      	beq.n	8004fbe <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e331      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004fc8:	f043 0308 	orr.w	r3, r3, #8
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7ff fe53 	bl	8004c94 <LL_RCC_MSI_SetCalibTrimming>
 8004fee:	e021      	b.n	8005034 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ffa:	f043 0308 	orr.w	r3, r3, #8
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	4618      	mov	r0, r3
 800501c:	f7ff fe3a 	bl	8004c94 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fd01 	bl	8005a2c <RCC_SetFlashLatencyFromMSIRange>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e2f6      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005034:	f000 fcc2 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005038:	4603      	mov	r3, r0
 800503a:	4aa7      	ldr	r2, [pc, #668]	; (80052d8 <HAL_RCC_OscConfig+0x3a8>)
 800503c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800503e:	4ba7      	ldr	r3, [pc, #668]	; (80052dc <HAL_RCC_OscConfig+0x3ac>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fc feae 	bl	8001da4 <HAL_InitTick>
 8005048:	4603      	mov	r3, r0
 800504a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800504c:	7cfb      	ldrb	r3, [r7, #19]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d047      	beq.n	80050e2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	e2e5      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d02c      	beq.n	80050b8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800505e:	f7ff fdc6 	bl	8004bee <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005062:	f7fc fea9 	bl	8001db8 <HAL_GetTick>
 8005066:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8005068:	e008      	b.n	800507c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800506a:	f7fc fea5 	bl	8001db8 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d901      	bls.n	800507c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e2d2      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800507c:	f7ff fdd3 	bl	8004c26 <LL_RCC_MSI_IsReady>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f1      	beq.n	800506a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005090:	f043 0308 	orr.w	r3, r3, #8
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050a8:	4313      	orrs	r3, r2
 80050aa:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff fdef 	bl	8004c94 <LL_RCC_MSI_SetCalibTrimming>
 80050b6:	e015      	b.n	80050e4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80050b8:	f7ff fda7 	bl	8004c0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050bc:	f7fc fe7c 	bl	8001db8 <HAL_GetTick>
 80050c0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050c4:	f7fc fe78 	bl	8001db8 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e2a5      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80050d6:	f7ff fda6 	bl	8004c26 <LL_RCC_MSI_IsReady>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f1      	bne.n	80050c4 <HAL_RCC_OscConfig+0x194>
 80050e0:	e000      	b.n	80050e4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80050e2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d058      	beq.n	80051a2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b08      	cmp	r3, #8
 80050f4:	d005      	beq.n	8005102 <HAL_RCC_OscConfig+0x1d2>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b0c      	cmp	r3, #12
 80050fa:	d108      	bne.n	800510e <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b03      	cmp	r3, #3
 8005100:	d105      	bne.n	800510e <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d14b      	bne.n	80051a2 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e289      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800510e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005120:	4313      	orrs	r3, r2
 8005122:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800512c:	d102      	bne.n	8005134 <HAL_RCC_OscConfig+0x204>
 800512e:	f7ff fcae 	bl	8004a8e <LL_RCC_HSE_Enable>
 8005132:	e00d      	b.n	8005150 <HAL_RCC_OscConfig+0x220>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800513c:	d104      	bne.n	8005148 <HAL_RCC_OscConfig+0x218>
 800513e:	f7ff fc79 	bl	8004a34 <LL_RCC_HSE_EnableTcxo>
 8005142:	f7ff fca4 	bl	8004a8e <LL_RCC_HSE_Enable>
 8005146:	e003      	b.n	8005150 <HAL_RCC_OscConfig+0x220>
 8005148:	f7ff fcaf 	bl	8004aaa <LL_RCC_HSE_Disable>
 800514c:	f7ff fc80 	bl	8004a50 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d012      	beq.n	800517e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fc fe2e 	bl	8001db8 <HAL_GetTick>
 800515c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005160:	f7fc fe2a 	bl	8001db8 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e257      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005172:	f7ff fca8 	bl	8004ac6 <LL_RCC_HSE_IsReady>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f1      	beq.n	8005160 <HAL_RCC_OscConfig+0x230>
 800517c:	e011      	b.n	80051a2 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517e:	f7fc fe1b 	bl	8001db8 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005184:	e008      	b.n	8005198 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005186:	f7fc fe17 	bl	8001db8 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b64      	cmp	r3, #100	; 0x64
 8005192:	d901      	bls.n	8005198 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e244      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005198:	f7ff fc95 	bl	8004ac6 <LL_RCC_HSE_IsReady>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f1      	bne.n	8005186 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d046      	beq.n	800523c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80051ae:	69fb      	ldr	r3, [r7, #28]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d005      	beq.n	80051c0 <HAL_RCC_OscConfig+0x290>
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	2b0c      	cmp	r3, #12
 80051b8:	d10e      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d10b      	bne.n	80051d8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e22a      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fcb6 	bl	8004b42 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80051d6:	e031      	b.n	800523c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d019      	beq.n	8005214 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e0:	f7ff fc82 	bl	8004ae8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051e4:	f7fc fde8 	bl	8001db8 <HAL_GetTick>
 80051e8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80051ea:	e008      	b.n	80051fe <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051ec:	f7fc fde4 	bl	8001db8 <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d901      	bls.n	80051fe <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80051fa:	2303      	movs	r3, #3
 80051fc:	e211      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80051fe:	f7ff fc8f 	bl	8004b20 <LL_RCC_HSI_IsReady>
 8005202:	4603      	mov	r3, r0
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0f1      	beq.n	80051ec <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	4618      	mov	r0, r3
 800520e:	f7ff fc98 	bl	8004b42 <LL_RCC_HSI_SetCalibTrimming>
 8005212:	e013      	b.n	800523c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005214:	f7ff fc76 	bl	8004b04 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005218:	f7fc fdce 	bl	8001db8 <HAL_GetTick>
 800521c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800521e:	e008      	b.n	8005232 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005220:	f7fc fdca 	bl	8001db8 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	2b02      	cmp	r3, #2
 800522c:	d901      	bls.n	8005232 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800522e:	2303      	movs	r3, #3
 8005230:	e1f7      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005232:	f7ff fc75 	bl	8004b20 <LL_RCC_HSI_IsReady>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1f1      	bne.n	8005220 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0308 	and.w	r3, r3, #8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d06e      	beq.n	8005326 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d056      	beq.n	80052fe <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8005250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005258:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	69da      	ldr	r2, [r3, #28]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f003 0310 	and.w	r3, r3, #16
 8005264:	429a      	cmp	r2, r3
 8005266:	d031      	beq.n	80052cc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d006      	beq.n	8005280 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e1d0      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0301 	and.w	r3, r3, #1
 8005286:	2b00      	cmp	r3, #0
 8005288:	d013      	beq.n	80052b2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800528a:	f7ff fc8f 	bl	8004bac <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800528e:	f7fc fd93 	bl	8001db8 <HAL_GetTick>
 8005292:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005296:	f7fc fd8f 	bl	8001db8 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b11      	cmp	r3, #17
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e1bc      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80052a8:	f7ff fc90 	bl	8004bcc <LL_RCC_LSI_IsReady>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f1      	bne.n	8005296 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80052b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80052b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ba:	f023 0210 	bic.w	r2, r3, #16
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052cc:	f7ff fc5e 	bl	8004b8c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d0:	f7fc fd72 	bl	8001db8 <HAL_GetTick>
 80052d4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80052d6:	e00c      	b.n	80052f2 <HAL_RCC_OscConfig+0x3c2>
 80052d8:	20000014 	.word	0x20000014
 80052dc:	20000018 	.word	0x20000018
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052e0:	f7fc fd6a 	bl	8001db8 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	2b11      	cmp	r3, #17
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e197      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80052f2:	f7ff fc6b 	bl	8004bcc <LL_RCC_LSI_IsReady>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d0f1      	beq.n	80052e0 <HAL_RCC_OscConfig+0x3b0>
 80052fc:	e013      	b.n	8005326 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052fe:	f7ff fc55 	bl	8004bac <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005302:	f7fc fd59 	bl	8001db8 <HAL_GetTick>
 8005306:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005308:	e008      	b.n	800531c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800530a:	f7fc fd55 	bl	8001db8 <HAL_GetTick>
 800530e:	4602      	mov	r2, r0
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	1ad3      	subs	r3, r2, r3
 8005314:	2b11      	cmp	r3, #17
 8005316:	d901      	bls.n	800531c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005318:	2303      	movs	r3, #3
 800531a:	e182      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800531c:	f7ff fc56 	bl	8004bcc <LL_RCC_LSI_IsReady>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f1      	bne.n	800530a <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0304 	and.w	r3, r3, #4
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 80d8 	beq.w	80054e4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005334:	f7ff fb6c 	bl	8004a10 <LL_PWR_IsEnabledBkUpAccess>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d113      	bne.n	8005366 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800533e:	f7ff faab 	bl	8004898 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005342:	f7fc fd39 	bl	8001db8 <HAL_GetTick>
 8005346:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005348:	e008      	b.n	800535c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534a:	f7fc fd35 	bl	8001db8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d901      	bls.n	800535c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e162      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800535c:	f7ff fb58 	bl	8004a10 <LL_PWR_IsEnabledBkUpAccess>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f1      	beq.n	800534a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d07b      	beq.n	8005466 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	2b85      	cmp	r3, #133	; 0x85
 8005374:	d003      	beq.n	800537e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	2b05      	cmp	r3, #5
 800537c:	d109      	bne.n	8005392 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800537e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005386:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800538a:	f043 0304 	orr.w	r3, r3, #4
 800538e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005392:	f7fc fd11 	bl	8001db8 <HAL_GetTick>
 8005396:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005398:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053a4:	f043 0301 	orr.w	r3, r3, #1
 80053a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80053ac:	e00a      	b.n	80053c4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fc fd03 	bl	8001db8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053bc:	4293      	cmp	r3, r2
 80053be:	d901      	bls.n	80053c4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e12e      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80053c4:	f7ff fbd1 	bl	8004b6a <LL_RCC_LSE_IsReady>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0ef      	beq.n	80053ae <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	2b81      	cmp	r3, #129	; 0x81
 80053d4:	d003      	beq.n	80053de <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b85      	cmp	r3, #133	; 0x85
 80053dc:	d121      	bne.n	8005422 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053de:	f7fc fceb 	bl	8001db8 <HAL_GetTick>
 80053e2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80053f8:	e00a      	b.n	8005410 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053fa:	f7fc fcdd 	bl	8001db8 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	f241 3288 	movw	r2, #5000	; 0x1388
 8005408:	4293      	cmp	r3, r2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e108      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ec      	beq.n	80053fa <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005420:	e060      	b.n	80054e4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005422:	f7fc fcc9 	bl	8001db8 <HAL_GetTick>
 8005426:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005428:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fc fcbb 	bl	8001db8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e0e6      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005454:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ec      	bne.n	800543e <HAL_RCC_OscConfig+0x50e>
 8005464:	e03e      	b.n	80054e4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005466:	f7fc fca7 	bl	8001db8 <HAL_GetTick>
 800546a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800546c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005478:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800547c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005480:	e00a      	b.n	8005498 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005482:	f7fc fc99 	bl	8001db8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005490:	4293      	cmp	r3, r2
 8005492:	d901      	bls.n	8005498 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	e0c4      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1ec      	bne.n	8005482 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a8:	f7fc fc86 	bl	8001db8 <HAL_GetTick>
 80054ac:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054ba:	f023 0301 	bic.w	r3, r3, #1
 80054be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80054c2:	e00a      	b.n	80054da <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fc78 	bl	8001db8 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e0a3      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80054da:	f7ff fb46 	bl	8004b6a <LL_RCC_LSE_IsReady>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ef      	bne.n	80054c4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8099 	beq.w	8005620 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	2b0c      	cmp	r3, #12
 80054f2:	d06c      	beq.n	80055ce <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d14b      	bne.n	8005594 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054fc:	f7ff fc87 	bl	8004e0e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005500:	f7fc fc5a 	bl	8001db8 <HAL_GetTick>
 8005504:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005506:	e008      	b.n	800551a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005508:	f7fc fc56 	bl	8001db8 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b0a      	cmp	r3, #10
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e083      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800551a:	f7ff fc86 	bl	8004e2a <LL_RCC_PLL_IsReady>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1f1      	bne.n	8005508 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	4b40      	ldr	r3, [pc, #256]	; (800562c <HAL_RCC_OscConfig+0x6fc>)
 800552c:	4013      	ands	r3, r2
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005536:	4311      	orrs	r1, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800553c:	0212      	lsls	r2, r2, #8
 800553e:	4311      	orrs	r1, r2
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005544:	4311      	orrs	r1, r2
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800554a:	4311      	orrs	r1, r2
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005550:	430a      	orrs	r2, r1
 8005552:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005556:	4313      	orrs	r3, r2
 8005558:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555a:	f7ff fc4a 	bl	8004df2 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800555e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800556c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556e:	f7fc fc23 	bl	8001db8 <HAL_GetTick>
 8005572:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005574:	e008      	b.n	8005588 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005576:	f7fc fc1f 	bl	8001db8 <HAL_GetTick>
 800557a:	4602      	mov	r2, r0
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	2b0a      	cmp	r3, #10
 8005582:	d901      	bls.n	8005588 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e04c      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005588:	f7ff fc4f 	bl	8004e2a <LL_RCC_PLL_IsReady>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d0f1      	beq.n	8005576 <HAL_RCC_OscConfig+0x646>
 8005592:	e045      	b.n	8005620 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005594:	f7ff fc3b 	bl	8004e0e <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005598:	f7fc fc0e 	bl	8001db8 <HAL_GetTick>
 800559c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fc fc0a 	bl	8001db8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b0a      	cmp	r3, #10
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e037      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80055b2:	f7ff fc3a 	bl	8004e2a <LL_RCC_PLL_IsReady>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1f1      	bne.n	80055a0 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80055bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c6:	4b1a      	ldr	r3, [pc, #104]	; (8005630 <HAL_RCC_OscConfig+0x700>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60cb      	str	r3, [r1, #12]
 80055cc:	e028      	b.n	8005620 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e023      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	f003 0203 	and.w	r2, r3, #3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d115      	bne.n	800561c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d10e      	bne.n	800561c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	429a      	cmp	r2, r3
 800560c:	d106      	bne.n	800561c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005618:	429a      	cmp	r2, r3
 800561a:	d001      	beq.n	8005620 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e000      	b.n	8005622 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
 800562a:	bf00      	nop
 800562c:	11c1808c 	.word	0x11c1808c
 8005630:	eefefffc 	.word	0xeefefffc

08005634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e10f      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005648:	4b89      	ldr	r3, [pc, #548]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d91b      	bls.n	800568e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b86      	ldr	r3, [pc, #536]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 0207 	bic.w	r2, r3, #7
 800565e:	4984      	ldr	r1, [pc, #528]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	4313      	orrs	r3, r2
 8005664:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005666:	f7fc fba7 	bl	8001db8 <HAL_GetTick>
 800566a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566c:	e008      	b.n	8005680 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800566e:	f7fc fba3 	bl	8001db8 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b02      	cmp	r3, #2
 800567a:	d901      	bls.n	8005680 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e0f3      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005680:	4b7b      	ldr	r3, [pc, #492]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d1ef      	bne.n	800566e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d016      	beq.n	80056c8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fb2a 	bl	8004cf8 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056a4:	f7fc fb88 	bl	8001db8 <HAL_GetTick>
 80056a8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056ac:	f7fc fb84 	bl	8001db8 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0d4      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80056be:	f7ff fbf2 	bl	8004ea6 <LL_RCC_IsActiveFlag_HPRE>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f1      	beq.n	80056ac <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d016      	beq.n	8005702 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fb20 	bl	8004d1e <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056de:	f7fc fb6b 	bl	8001db8 <HAL_GetTick>
 80056e2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056e6:	f7fc fb67 	bl	8001db8 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0b7      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80056f8:	f7ff fbe6 	bl	8004ec8 <LL_RCC_IsActiveFlag_SHDHPRE>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f1      	beq.n	80056e6 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d016      	beq.n	800573c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	f7ff fb19 	bl	8004d4a <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005718:	f7fc fb4e 	bl	8001db8 <HAL_GetTick>
 800571c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800571e:	e008      	b.n	8005732 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005720:	f7fc fb4a 	bl	8001db8 <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	2b02      	cmp	r3, #2
 800572c:	d901      	bls.n	8005732 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e09a      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005732:	f7ff fbdb 	bl	8004eec <LL_RCC_IsActiveFlag_PPRE1>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0f1      	beq.n	8005720 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0308 	and.w	r3, r3, #8
 8005744:	2b00      	cmp	r3, #0
 8005746:	d017      	beq.n	8005778 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	691b      	ldr	r3, [r3, #16]
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fb0e 	bl	8004d70 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005754:	f7fc fb30 	bl	8001db8 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800575c:	f7fc fb2c 	bl	8001db8 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e07c      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800576e:	f7ff fbce 	bl	8004f0e <LL_RCC_IsActiveFlag_PPRE2>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0f1      	beq.n	800575c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d043      	beq.n	800580c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b02      	cmp	r3, #2
 800578a:	d106      	bne.n	800579a <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800578c:	f7ff f99b 	bl	8004ac6 <LL_RCC_HSE_IsReady>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d11e      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e066      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d106      	bne.n	80057b0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80057a2:	f7ff fb42 	bl	8004e2a <LL_RCC_PLL_IsReady>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d113      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e05b      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d106      	bne.n	80057c6 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80057b8:	f7ff fa35 	bl	8004c26 <LL_RCC_MSI_IsReady>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d108      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e050      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80057c6:	f7ff f9ab 	bl	8004b20 <LL_RCC_HSI_IsReady>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e049      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	4618      	mov	r0, r3
 80057da:	f7ff fa6f 	bl	8004cbc <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057de:	f7fc faeb 	bl	8001db8 <HAL_GetTick>
 80057e2:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e4:	e00a      	b.n	80057fc <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e6:	f7fc fae7 	bl	8001db8 <HAL_GetTick>
 80057ea:	4602      	mov	r2, r0
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d901      	bls.n	80057fc <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e035      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fc:	f7ff fa71 	bl	8004ce2 <LL_RCC_GetSysClkSource>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	429a      	cmp	r2, r3
 800580a:	d1ec      	bne.n	80057e6 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800580c:	4b18      	ldr	r3, [pc, #96]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d21b      	bcs.n	8005852 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b15      	ldr	r3, [pc, #84]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 0207 	bic.w	r2, r3, #7
 8005822:	4913      	ldr	r1, [pc, #76]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800582a:	f7fc fac5 	bl	8001db8 <HAL_GetTick>
 800582e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005830:	e008      	b.n	8005844 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005832:	f7fc fac1 	bl	8001db8 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e011      	b.n	8005868 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <HAL_RCC_ClockConfig+0x23c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d1ef      	bne.n	8005832 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005852:	f000 f8b3 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005856:	4603      	mov	r3, r0
 8005858:	4a06      	ldr	r2, [pc, #24]	; (8005874 <HAL_RCC_ClockConfig+0x240>)
 800585a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 800585c:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_ClockConfig+0x244>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4618      	mov	r0, r3
 8005862:	f7fc fa9f 	bl	8001da4 <HAL_InitTick>
 8005866:	4603      	mov	r3, r0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3710      	adds	r7, #16
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	58004000 	.word	0x58004000
 8005874:	20000014 	.word	0x20000014
 8005878:	20000018 	.word	0x20000018

0800587c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005882:	2300      	movs	r3, #0
 8005884:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800588a:	f7ff fa2a 	bl	8004ce2 <LL_RCC_GetSysClkSource>
 800588e:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005890:	f7ff fafe 	bl	8004e90 <LL_RCC_PLL_GetMainSource>
 8005894:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d005      	beq.n	80058a8 <HAL_RCC_GetSysClockFreq+0x2c>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	2b0c      	cmp	r3, #12
 80058a0:	d139      	bne.n	8005916 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d136      	bne.n	8005916 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80058a8:	f7ff f9cd 	bl	8004c46 <LL_RCC_MSI_IsEnabledRangeSelect>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d115      	bne.n	80058de <HAL_RCC_GetSysClockFreq+0x62>
 80058b2:	f7ff f9c8 	bl	8004c46 <LL_RCC_MSI_IsEnabledRangeSelect>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d106      	bne.n	80058ca <HAL_RCC_GetSysClockFreq+0x4e>
 80058bc:	f7ff f9d3 	bl	8004c66 <LL_RCC_MSI_GetRange>
 80058c0:	4603      	mov	r3, r0
 80058c2:	0a1b      	lsrs	r3, r3, #8
 80058c4:	f003 030f 	and.w	r3, r3, #15
 80058c8:	e005      	b.n	80058d6 <HAL_RCC_GetSysClockFreq+0x5a>
 80058ca:	f7ff f9d7 	bl	8004c7c <LL_RCC_MSI_GetRangeAfterStandby>
 80058ce:	4603      	mov	r3, r0
 80058d0:	0a1b      	lsrs	r3, r3, #8
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	4a36      	ldr	r2, [pc, #216]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x134>)
 80058d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058dc:	e014      	b.n	8005908 <HAL_RCC_GetSysClockFreq+0x8c>
 80058de:	f7ff f9b2 	bl	8004c46 <LL_RCC_MSI_IsEnabledRangeSelect>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d106      	bne.n	80058f6 <HAL_RCC_GetSysClockFreq+0x7a>
 80058e8:	f7ff f9bd 	bl	8004c66 <LL_RCC_MSI_GetRange>
 80058ec:	4603      	mov	r3, r0
 80058ee:	091b      	lsrs	r3, r3, #4
 80058f0:	f003 030f 	and.w	r3, r3, #15
 80058f4:	e005      	b.n	8005902 <HAL_RCC_GetSysClockFreq+0x86>
 80058f6:	f7ff f9c1 	bl	8004c7c <LL_RCC_MSI_GetRangeAfterStandby>
 80058fa:	4603      	mov	r3, r0
 80058fc:	091b      	lsrs	r3, r3, #4
 80058fe:	f003 030f 	and.w	r3, r3, #15
 8005902:	4a2b      	ldr	r2, [pc, #172]	; (80059b0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d115      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005914:	e012      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	2b04      	cmp	r3, #4
 800591a:	d102      	bne.n	8005922 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800591c:	4b25      	ldr	r3, [pc, #148]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	e00c      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b08      	cmp	r3, #8
 8005926:	d109      	bne.n	800593c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005928:	f7ff f8a0 	bl	8004a6c <LL_RCC_HSE_IsEnabledDiv2>
 800592c:	4603      	mov	r3, r0
 800592e:	2b01      	cmp	r3, #1
 8005930:	d102      	bne.n	8005938 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e001      	b.n	800593c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005938:	4b1f      	ldr	r3, [pc, #124]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800593a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800593c:	f7ff f9d1 	bl	8004ce2 <LL_RCC_GetSysClkSource>
 8005940:	4603      	mov	r3, r0
 8005942:	2b0c      	cmp	r3, #12
 8005944:	d12f      	bne.n	80059a6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005946:	f7ff faa3 	bl	8004e90 <LL_RCC_PLL_GetMainSource>
 800594a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b02      	cmp	r3, #2
 8005950:	d003      	beq.n	800595a <HAL_RCC_GetSysClockFreq+0xde>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b03      	cmp	r3, #3
 8005956:	d003      	beq.n	8005960 <HAL_RCC_GetSysClockFreq+0xe4>
 8005958:	e00d      	b.n	8005976 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800595a:	4b16      	ldr	r3, [pc, #88]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800595c:	60fb      	str	r3, [r7, #12]
        break;
 800595e:	e00d      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005960:	f7ff f884 	bl	8004a6c <LL_RCC_HSE_IsEnabledDiv2>
 8005964:	4603      	mov	r3, r0
 8005966:	2b01      	cmp	r3, #1
 8005968:	d102      	bne.n	8005970 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800596a:	4b12      	ldr	r3, [pc, #72]	; (80059b4 <HAL_RCC_GetSysClockFreq+0x138>)
 800596c:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800596e:	e005      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005972:	60fb      	str	r3, [r7, #12]
        break;
 8005974:	e002      	b.n	800597c <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	60fb      	str	r3, [r7, #12]
        break;
 800597a:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800597c:	f7ff fa66 	bl	8004e4c <LL_RCC_PLL_GetN>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	fb03 f402 	mul.w	r4, r3, r2
 8005988:	f7ff fa77 	bl	8004e7a <LL_RCC_PLL_GetDivider>
 800598c:	4603      	mov	r3, r0
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	3301      	adds	r3, #1
 8005992:	fbb4 f4f3 	udiv	r4, r4, r3
 8005996:	f7ff fa65 	bl	8004e64 <LL_RCC_PLL_GetR>
 800599a:	4603      	mov	r3, r0
 800599c:	0f5b      	lsrs	r3, r3, #29
 800599e:	3301      	adds	r3, #1
 80059a0:	fbb4 f3f3 	udiv	r3, r4, r3
 80059a4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80059a6:	697b      	ldr	r3, [r7, #20]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	371c      	adds	r7, #28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd90      	pop	{r4, r7, pc}
 80059b0:	08012afc 	.word	0x08012afc
 80059b4:	00f42400 	.word	0x00f42400
 80059b8:	01e84800 	.word	0x01e84800

080059bc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059bc:	b598      	push	{r3, r4, r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80059c0:	f7ff ff5c 	bl	800587c <HAL_RCC_GetSysClockFreq>
 80059c4:	4604      	mov	r4, r0
 80059c6:	f7ff f9e6 	bl	8004d96 <LL_RCC_GetAHBPrescaler>
 80059ca:	4603      	mov	r3, r0
 80059cc:	091b      	lsrs	r3, r3, #4
 80059ce:	f003 030f 	and.w	r3, r3, #15
 80059d2:	4a03      	ldr	r2, [pc, #12]	; (80059e0 <HAL_RCC_GetHCLKFreq+0x24>)
 80059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d8:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	bd98      	pop	{r3, r4, r7, pc}
 80059e0:	08012a9c 	.word	0x08012a9c

080059e4 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059e4:	b598      	push	{r3, r4, r7, lr}
 80059e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80059e8:	f7ff ffe8 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 80059ec:	4604      	mov	r4, r0
 80059ee:	f7ff f9ea 	bl	8004dc6 <LL_RCC_GetAPB1Prescaler>
 80059f2:	4603      	mov	r3, r0
 80059f4:	0a1b      	lsrs	r3, r3, #8
 80059f6:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	bd98      	pop	{r3, r4, r7, pc}
 8005a04:	08012adc 	.word	0x08012adc

08005a08 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a08:	b598      	push	{r3, r4, r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005a0c:	f7ff ffd6 	bl	80059bc <HAL_RCC_GetHCLKFreq>
 8005a10:	4604      	mov	r4, r0
 8005a12:	f7ff f9e3 	bl	8004ddc <LL_RCC_GetAPB2Prescaler>
 8005a16:	4603      	mov	r3, r0
 8005a18:	0adb      	lsrs	r3, r3, #11
 8005a1a:	4a03      	ldr	r2, [pc, #12]	; (8005a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a20:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	bd98      	pop	{r3, r4, r7, pc}
 8005a28:	08012adc 	.word	0x08012adc

08005a2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005a2c:	b590      	push	{r4, r7, lr}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	091b      	lsrs	r3, r3, #4
 8005a38:	f003 030f 	and.w	r3, r3, #15
 8005a3c:	4a10      	ldr	r2, [pc, #64]	; (8005a80 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8005a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a42:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005a44:	f7ff f9b2 	bl	8004dac <LL_RCC_GetAHB3Prescaler>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	091b      	lsrs	r3, r3, #4
 8005a4c:	f003 030f 	and.w	r3, r3, #15
 8005a50:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8005a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a5c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	4a09      	ldr	r2, [pc, #36]	; (8005a88 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8005a62:	fba2 2303 	umull	r2, r3, r2, r3
 8005a66:	0c9c      	lsrs	r4, r3, #18
 8005a68:	f7fe ff58 	bl	800491c <HAL_PWREx_GetVoltageRange>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 f80b 	bl	8005a8c <RCC_SetFlashLatency>
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}
 8005a80:	08012afc 	.word	0x08012afc
 8005a84:	08012a9c 	.word	0x08012a9c
 8005a88:	431bde83 	.word	0x431bde83

08005a8c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08e      	sub	sp, #56	; 0x38
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8005a96:	4a3a      	ldr	r2, [pc, #232]	; (8005b80 <RCC_SetFlashLatency+0xf4>)
 8005a98:	f107 0320 	add.w	r3, r7, #32
 8005a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005aa0:	6018      	str	r0, [r3, #0]
 8005aa2:	3304      	adds	r3, #4
 8005aa4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8005aa6:	4a37      	ldr	r2, [pc, #220]	; (8005b84 <RCC_SetFlashLatency+0xf8>)
 8005aa8:	f107 0318 	add.w	r3, r7, #24
 8005aac:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ab0:	6018      	str	r0, [r3, #0]
 8005ab2:	3304      	adds	r3, #4
 8005ab4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8005ab6:	4a34      	ldr	r2, [pc, #208]	; (8005b88 <RCC_SetFlashLatency+0xfc>)
 8005ab8:	f107 030c 	add.w	r3, r7, #12
 8005abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8005abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005acc:	d11b      	bne.n	8005b06 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005ace:	2300      	movs	r3, #0
 8005ad0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ad2:	e014      	b.n	8005afe <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	3338      	adds	r3, #56	; 0x38
 8005ada:	443b      	add	r3, r7
 8005adc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d807      	bhi.n	8005af8 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	3338      	adds	r3, #56	; 0x38
 8005aee:	443b      	add	r3, r7
 8005af0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005af4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005af6:	e021      	b.n	8005b3c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	3301      	adds	r3, #1
 8005afc:	633b      	str	r3, [r7, #48]	; 0x30
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d9e7      	bls.n	8005ad4 <RCC_SetFlashLatency+0x48>
 8005b04:	e01a      	b.n	8005b3c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b06:	2300      	movs	r3, #0
 8005b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b0a:	e014      	b.n	8005b36 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b0e:	005b      	lsls	r3, r3, #1
 8005b10:	3338      	adds	r3, #56	; 0x38
 8005b12:	443b      	add	r3, r7
 8005b14:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d807      	bhi.n	8005b30 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	3338      	adds	r3, #56	; 0x38
 8005b26:	443b      	add	r3, r7
 8005b28:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8005b2e:	e005      	b.n	8005b3c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b32:	3301      	adds	r3, #1
 8005b34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d9e7      	bls.n	8005b0c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005b3c:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <RCC_SetFlashLatency+0x100>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f023 0207 	bic.w	r2, r3, #7
 8005b44:	4911      	ldr	r1, [pc, #68]	; (8005b8c <RCC_SetFlashLatency+0x100>)
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005b4c:	f7fc f934 	bl	8001db8 <HAL_GetTick>
 8005b50:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b52:	e008      	b.n	8005b66 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005b54:	f7fc f930 	bl	8001db8 <HAL_GetTick>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5c:	1ad3      	subs	r3, r2, r3
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d901      	bls.n	8005b66 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e007      	b.n	8005b76 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005b66:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <RCC_SetFlashLatency+0x100>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0307 	and.w	r3, r3, #7
 8005b6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d1ef      	bne.n	8005b54 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3738      	adds	r7, #56	; 0x38
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	080128e4 	.word	0x080128e4
 8005b84:	080128ec 	.word	0x080128ec
 8005b88:	080128f4 	.word	0x080128f4
 8005b8c:	58004000 	.word	0x58004000

08005b90 <LL_RCC_LSE_IsReady>:
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d101      	bne.n	8005ba8 <LL_RCC_LSE_IsReady+0x18>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e000      	b.n	8005baa <LL_RCC_LSE_IsReady+0x1a>
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <LL_RCC_SetUSARTClockSource>:
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b083      	sub	sp, #12
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	43db      	mvns	r3, r3
 8005bc8:	401a      	ands	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr

08005be2 <LL_RCC_SetI2SClockSource>:
{
 8005be2:	b480      	push	{r7}
 8005be4:	b083      	sub	sp, #12
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bc80      	pop	{r7}
 8005c0a:	4770      	bx	lr

08005c0c <LL_RCC_SetLPUARTClockSource>:
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005c14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c20:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bc80      	pop	{r7}
 8005c34:	4770      	bx	lr

08005c36 <LL_RCC_SetI2CClockSource>:
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	091b      	lsrs	r3, r3, #4
 8005c4a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c4e:	43db      	mvns	r3, r3
 8005c50:	401a      	ands	r2, r3
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bc80      	pop	{r7}
 8005c6c:	4770      	bx	lr

08005c6e <LL_RCC_SetLPTIMClockSource>:
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	041b      	lsls	r3, r3, #16
 8005c84:	43db      	mvns	r3, r3
 8005c86:	401a      	ands	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	041b      	lsls	r3, r3, #16
 8005c8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c90:	4313      	orrs	r3, r2
 8005c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c96:	bf00      	nop
 8005c98:	370c      	adds	r7, #12
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bc80      	pop	{r7}
 8005c9e:	4770      	bx	lr

08005ca0 <LL_RCC_SetRNGClockSource>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005ca8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005cb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr

08005cca <LL_RCC_SetADCClockSource>:
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b083      	sub	sp, #12
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cda:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr

08005cf4 <LL_RCC_SetRTCClockSource>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr

08005d1e <LL_RCC_GetRTCClockSource>:
{
 8005d1e:	b480      	push	{r7}
 8005d20:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bc80      	pop	{r7}
 8005d34:	4770      	bx	lr

08005d36 <LL_RCC_ForceBackupDomainReset>:
{
 8005d36:	b480      	push	{r7}
 8005d38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d4e:	bf00      	nop
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bc80      	pop	{r7}
 8005d54:	4770      	bx	lr

08005d56 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d56:	b480      	push	{r7}
 8005d58:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005d84:	2300      	movs	r3, #0
 8005d86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005d88:	2300      	movs	r3, #0
 8005d8a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d058      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8005d98:	f7fe fd7e 	bl	8004898 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d9c:	f7fc f80c 	bl	8001db8 <HAL_GetTick>
 8005da0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005da2:	e009      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005da4:	f7fc f808 	bl	8001db8 <HAL_GetTick>
 8005da8:	4602      	mov	r2, r0
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	2b02      	cmp	r3, #2
 8005db0:	d902      	bls.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8005db2:	2303      	movs	r3, #3
 8005db4:	74fb      	strb	r3, [r7, #19]
        break;
 8005db6:	e006      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005db8:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc4:	d1ee      	bne.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8005dc6:	7cfb      	ldrb	r3, [r7, #19]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d13c      	bne.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005dcc:	f7ff ffa7 	bl	8005d1e <LL_RCC_GetRTCClockSource>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d00f      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005de8:	f7ff ffa5 	bl	8005d36 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dec:	f7ff ffb3 	bl	8005d56 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005df0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d014      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e04:	f7fb ffd8 	bl	8001db8 <HAL_GetTick>
 8005e08:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e0a:	e00b      	b.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e0c:	f7fb ffd4 	bl	8001db8 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d902      	bls.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	74fb      	strb	r3, [r7, #19]
            break;
 8005e22:	e004      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8005e24:	f7ff feb4 	bl	8005b90 <LL_RCC_LSE_IsReady>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d1ee      	bne.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8005e2e:	7cfb      	ldrb	r3, [r7, #19]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d105      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7ff ff5b 	bl	8005cf4 <LL_RCC_SetRTCClockSource>
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e40:	7cfb      	ldrb	r3, [r7, #19]
 8005e42:	74bb      	strb	r3, [r7, #18]
 8005e44:	e001      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e46:	7cfb      	ldrb	r3, [r7, #19]
 8005e48:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0301 	and.w	r3, r3, #1
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d004      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7ff fea9 	bl	8005bb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d004      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff fe9e 	bl	8005bb2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0320 	and.w	r3, r3, #32
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d004      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7ff fec0 	bl	8005c0c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff fee6 	bl	8005c6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d004      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fedb 	bl	8005c6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d004      	beq.n	8005ece <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff fed0 	bl	8005c6e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f7ff fea9 	bl	8005c36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	699b      	ldr	r3, [r3, #24]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fe9e 	bl	8005c36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d004      	beq.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff fe93 	bl	8005c36 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0310 	and.w	r3, r3, #16
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d011      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff fe5e 	bl	8005be2 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8005f30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d010      	beq.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7ff fea5 	bl	8005ca0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f6c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7ff fea3 	bl	8005cca <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f8c:	d107      	bne.n	8005f9e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005f8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005f9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	58000400 	.word	0x58000400

08005fac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d071      	beq.n	80060a2 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb fc20 	bl	8001818 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005fe0:	4b32      	ldr	r3, [pc, #200]	; (80060ac <HAL_RTC_Init+0x100>)
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b10      	cmp	r3, #16
 8005fea:	d051      	beq.n	8006090 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005fec:	4b2f      	ldr	r3, [pc, #188]	; (80060ac <HAL_RTC_Init+0x100>)
 8005fee:	22ca      	movs	r2, #202	; 0xca
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24
 8005ff2:	4b2e      	ldr	r3, [pc, #184]	; (80060ac <HAL_RTC_Init+0x100>)
 8005ff4:	2253      	movs	r2, #83	; 0x53
 8005ff6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f000 fa11 	bl	8006420 <RTC_EnterInitMode>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006002:	7bfb      	ldrb	r3, [r7, #15]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d13f      	bne.n	8006088 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006008:	4b28      	ldr	r3, [pc, #160]	; (80060ac <HAL_RTC_Init+0x100>)
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	4a27      	ldr	r2, [pc, #156]	; (80060ac <HAL_RTC_Init+0x100>)
 800600e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8006012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006016:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8006018:	4b24      	ldr	r3, [pc, #144]	; (80060ac <HAL_RTC_Init+0x100>)
 800601a:	699a      	ldr	r2, [r3, #24]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6859      	ldr	r1, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	4319      	orrs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	430b      	orrs	r3, r1
 800602c:	491f      	ldr	r1, [pc, #124]	; (80060ac <HAL_RTC_Init+0x100>)
 800602e:	4313      	orrs	r3, r2
 8006030:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68da      	ldr	r2, [r3, #12]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	041b      	lsls	r3, r3, #16
 800603c:	491b      	ldr	r1, [pc, #108]	; (80060ac <HAL_RTC_Init+0x100>)
 800603e:	4313      	orrs	r3, r2
 8006040:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006042:	4b1a      	ldr	r3, [pc, #104]	; (80060ac <HAL_RTC_Init+0x100>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006052:	430b      	orrs	r3, r1
 8006054:	4915      	ldr	r1, [pc, #84]	; (80060ac <HAL_RTC_Init+0x100>)
 8006056:	4313      	orrs	r3, r2
 8006058:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 fa14 	bl	8006488 <RTC_ExitInitMode>
 8006060:	4603      	mov	r3, r0
 8006062:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8006064:	7bfb      	ldrb	r3, [r7, #15]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10e      	bne.n	8006088 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800606a:	4b10      	ldr	r3, [pc, #64]	; (80060ac <HAL_RTC_Init+0x100>)
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a19      	ldr	r1, [r3, #32]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4319      	orrs	r1, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	430b      	orrs	r3, r1
 8006082:	490a      	ldr	r1, [pc, #40]	; (80060ac <HAL_RTC_Init+0x100>)
 8006084:	4313      	orrs	r3, r2
 8006086:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006088:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_RTC_Init+0x100>)
 800608a:	22ff      	movs	r2, #255	; 0xff
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
 800608e:	e001      	b.n	8006094 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d103      	bne.n	80060a2 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	40002800 	.word	0x40002800

080060b0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b087      	sub	sp, #28
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80060bc:	2300      	movs	r3, #0
 80060be:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d101      	bne.n	80060ce <HAL_RTC_SetAlarm_IT+0x1e>
 80060ca:	2302      	movs	r3, #2
 80060cc:	e0f3      	b.n	80062b6 <HAL_RTC_SetAlarm_IT+0x206>
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2202      	movs	r2, #2
 80060da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80060de:	4b78      	ldr	r3, [pc, #480]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e6:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ee:	d06a      	beq.n	80061c6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d13a      	bne.n	800616c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80060f6:	4b72      	ldr	r3, [pc, #456]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 f9f5 	bl	8006504 <RTC_ByteToBcd2>
 800611a:	4603      	mov	r3, r0
 800611c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	785b      	ldrb	r3, [r3, #1]
 8006122:	4618      	mov	r0, r3
 8006124:	f000 f9ee 	bl	8006504 <RTC_ByteToBcd2>
 8006128:	4603      	mov	r3, r0
 800612a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800612c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	789b      	ldrb	r3, [r3, #2]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f9e6 	bl	8006504 <RTC_ByteToBcd2>
 8006138:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800613a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	78db      	ldrb	r3, [r3, #3]
 8006142:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006144:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800614e:	4618      	mov	r0, r3
 8006150:	f000 f9d8 	bl	8006504 <RTC_ByteToBcd2>
 8006154:	4603      	mov	r3, r0
 8006156:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006158:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006160:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
 800616a:	e02c      	b.n	80061c6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8006174:	d00d      	beq.n	8006192 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800617e:	d008      	beq.n	8006192 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006180:	4b4f      	ldr	r3, [pc, #316]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b00      	cmp	r3, #0
 800618a:	d102      	bne.n	8006192 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2200      	movs	r2, #0
 8006190:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	785b      	ldrb	r3, [r3, #1]
 800619c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800619e:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80061a4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80061ac:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061b4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80061b6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80061bc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80061c2:	4313      	orrs	r3, r2
 80061c4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061c6:	4b3e      	ldr	r3, [pc, #248]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80061c8:	22ca      	movs	r2, #202	; 0xca
 80061ca:	625a      	str	r2, [r3, #36]	; 0x24
 80061cc:	4b3c      	ldr	r3, [pc, #240]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80061ce:	2253      	movs	r2, #83	; 0x53
 80061d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061da:	d12c      	bne.n	8006236 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80061dc:	4b38      	ldr	r3, [pc, #224]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	4a37      	ldr	r2, [pc, #220]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80061e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80061e6:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80061e8:	4b35      	ldr	r3, [pc, #212]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f4:	d107      	bne.n	8006206 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	699a      	ldr	r2, [r3, #24]
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	69db      	ldr	r3, [r3, #28]
 80061fe:	4930      	ldr	r1, [pc, #192]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006200:	4313      	orrs	r3, r2
 8006202:	644b      	str	r3, [r1, #68]	; 0x44
 8006204:	e006      	b.n	8006214 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006206:	4a2e      	ldr	r2, [pc, #184]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800620c:	4a2c      	ldr	r2, [pc, #176]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006214:	4a2a      	ldr	r2, [pc, #168]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	f043 0201 	orr.w	r2, r3, #1
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006228:	4b25      	ldr	r3, [pc, #148]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	4a24      	ldr	r2, [pc, #144]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800622e:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8006232:	6193      	str	r3, [r2, #24]
 8006234:	e02b      	b.n	800628e <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006236:	4b22      	ldr	r3, [pc, #136]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	4a21      	ldr	r2, [pc, #132]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800623c:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8006240:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006242:	4b1f      	ldr	r3, [pc, #124]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006244:	2202      	movs	r2, #2
 8006246:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624e:	d107      	bne.n	8006260 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	699a      	ldr	r2, [r3, #24]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	69db      	ldr	r3, [r3, #28]
 8006258:	4919      	ldr	r1, [pc, #100]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 800625a:	4313      	orrs	r3, r2
 800625c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800625e:	e006      	b.n	800626e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006260:	4a17      	ldr	r2, [pc, #92]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006266:	4a16      	ldr	r2, [pc, #88]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	699b      	ldr	r3, [r3, #24]
 800626c:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800626e:	4a14      	ldr	r2, [pc, #80]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627a:	f043 0202 	orr.w	r2, r3, #2
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006282:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006288:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 800628c:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800628e:	4b0d      	ldr	r3, [pc, #52]	; (80062c4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006294:	4a0b      	ldr	r2, [pc, #44]	; (80062c4 <HAL_RTC_SetAlarm_IT+0x214>)
 8006296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800629a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800629e:	4b08      	ldr	r3, [pc, #32]	; (80062c0 <HAL_RTC_SetAlarm_IT+0x210>)
 80062a0:	22ff      	movs	r2, #255	; 0xff
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd90      	pop	{r4, r7, pc}
 80062be:	bf00      	nop
 80062c0:	40002800 	.word	0x40002800
 80062c4:	58000800 	.word	0x58000800

080062c8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_RTC_DeactivateAlarm+0x18>
 80062dc:	2302      	movs	r3, #2
 80062de:	e048      	b.n	8006372 <HAL_RTC_DeactivateAlarm+0xaa>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2202      	movs	r2, #2
 80062ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062f0:	4b22      	ldr	r3, [pc, #136]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 80062f2:	22ca      	movs	r2, #202	; 0xca
 80062f4:	625a      	str	r2, [r3, #36]	; 0x24
 80062f6:	4b21      	ldr	r3, [pc, #132]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 80062f8:	2253      	movs	r2, #83	; 0x53
 80062fa:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006302:	d115      	bne.n	8006330 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006304:	4b1d      	ldr	r3, [pc, #116]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006306:	699b      	ldr	r3, [r3, #24]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 800630a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800630e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006310:	4b1a      	ldr	r3, [pc, #104]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006314:	4a19      	ldr	r2, [pc, #100]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006316:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800631a:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006320:	f023 0201 	bic.w	r2, r3, #1
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006328:	4b14      	ldr	r3, [pc, #80]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 800632a:	2201      	movs	r2, #1
 800632c:	65da      	str	r2, [r3, #92]	; 0x5c
 800632e:	e014      	b.n	800635a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006330:	4b12      	ldr	r3, [pc, #72]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	4a11      	ldr	r2, [pc, #68]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006336:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 800633a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800633c:	4b0f      	ldr	r3, [pc, #60]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 800633e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006340:	4a0e      	ldr	r2, [pc, #56]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006346:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634c:	f023 0202 	bic.w	r2, r3, #2
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006354:	4b09      	ldr	r3, [pc, #36]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 8006356:	2202      	movs	r2, #2
 8006358:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800635a:	4b08      	ldr	r3, [pc, #32]	; (800637c <HAL_RTC_DeactivateAlarm+0xb4>)
 800635c:	22ff      	movs	r2, #255	; 0xff
 800635e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	370c      	adds	r7, #12
 8006376:	46bd      	mov	sp, r7
 8006378:	bc80      	pop	{r7}
 800637a:	4770      	bx	lr
 800637c:	40002800 	.word	0x40002800

08006380 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006388:	4b11      	ldr	r3, [pc, #68]	; (80063d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 800638a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006390:	4013      	ands	r3, r2
 8006392:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f003 0301 	and.w	r3, r3, #1
 800639a:	2b00      	cmp	r3, #0
 800639c:	d005      	beq.n	80063aa <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800639e:	4b0c      	ldr	r3, [pc, #48]	; (80063d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80063a0:	2201      	movs	r2, #1
 80063a2:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f7fb ff3c 	bl	8002222 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d005      	beq.n	80063c0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063b4:	4b06      	ldr	r3, [pc, #24]	; (80063d0 <HAL_RTC_AlarmIRQHandler+0x50>)
 80063b6:	2202      	movs	r2, #2
 80063b8:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fa3e 	bl	800683c <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80063c8:	bf00      	nop
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40002800 	.word	0x40002800

080063d4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80063dc:	4b0f      	ldr	r3, [pc, #60]	; (800641c <HAL_RTC_WaitForSynchro+0x48>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	4a0e      	ldr	r2, [pc, #56]	; (800641c <HAL_RTC_WaitForSynchro+0x48>)
 80063e2:	f023 0320 	bic.w	r3, r3, #32
 80063e6:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80063e8:	f7fb fce6 	bl	8001db8 <HAL_GetTick>
 80063ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80063ee:	e009      	b.n	8006404 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80063f0:	f7fb fce2 	bl	8001db8 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80063fe:	d901      	bls.n	8006404 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e006      	b.n	8006412 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006404:	4b05      	ldr	r3, [pc, #20]	; (800641c <HAL_RTC_WaitForSynchro+0x48>)
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ef      	beq.n	80063f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	40002800 	.word	0x40002800

08006420 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800642c:	4b15      	ldr	r3, [pc, #84]	; (8006484 <RTC_EnterInitMode+0x64>)
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b00      	cmp	r3, #0
 8006436:	d120      	bne.n	800647a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006438:	4b12      	ldr	r3, [pc, #72]	; (8006484 <RTC_EnterInitMode+0x64>)
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a11      	ldr	r2, [pc, #68]	; (8006484 <RTC_EnterInitMode+0x64>)
 800643e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006442:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006444:	f7fb fcb8 	bl	8001db8 <HAL_GetTick>
 8006448:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800644a:	e00d      	b.n	8006468 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800644c:	f7fb fcb4 	bl	8001db8 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800645a:	d905      	bls.n	8006468 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2203      	movs	r2, #3
 8006464:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <RTC_EnterInitMode+0x64>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d102      	bne.n	800647a <RTC_EnterInitMode+0x5a>
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	2b03      	cmp	r3, #3
 8006478:	d1e8      	bne.n	800644c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40002800 	.word	0x40002800

08006488 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006494:	4b1a      	ldr	r3, [pc, #104]	; (8006500 <RTC_ExitInitMode+0x78>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	4a19      	ldr	r2, [pc, #100]	; (8006500 <RTC_ExitInitMode+0x78>)
 800649a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800649e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80064a0:	4b17      	ldr	r3, [pc, #92]	; (8006500 <RTC_ExitInitMode+0x78>)
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	f003 0320 	and.w	r3, r3, #32
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10c      	bne.n	80064c6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff ff91 	bl	80063d4 <HAL_RTC_WaitForSynchro>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d01e      	beq.n	80064f6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2203      	movs	r2, #3
 80064bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	73fb      	strb	r3, [r7, #15]
 80064c4:	e017      	b.n	80064f6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064c6:	4b0e      	ldr	r3, [pc, #56]	; (8006500 <RTC_ExitInitMode+0x78>)
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	4a0d      	ldr	r2, [pc, #52]	; (8006500 <RTC_ExitInitMode+0x78>)
 80064cc:	f023 0320 	bic.w	r3, r3, #32
 80064d0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff ff7e 	bl	80063d4 <HAL_RTC_WaitForSynchro>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d005      	beq.n	80064ea <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2203      	movs	r2, #3
 80064e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80064ea:	4b05      	ldr	r3, [pc, #20]	; (8006500 <RTC_ExitInitMode+0x78>)
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	4a04      	ldr	r2, [pc, #16]	; (8006500 <RTC_ExitInitMode+0x78>)
 80064f0:	f043 0320 	orr.w	r3, r3, #32
 80064f4:	6193      	str	r3, [r2, #24]
  }

  return status;
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	40002800 	.word	0x40002800

08006504 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	4603      	mov	r3, r0
 800650c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006516:	e005      	b.n	8006524 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3301      	adds	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800651e:	7afb      	ldrb	r3, [r7, #11]
 8006520:	3b0a      	subs	r3, #10
 8006522:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006524:	7afb      	ldrb	r3, [r7, #11]
 8006526:	2b09      	cmp	r3, #9
 8006528:	d8f6      	bhi.n	8006518 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	b2da      	uxtb	r2, r3
 8006532:	7afb      	ldrb	r3, [r7, #11]
 8006534:	4313      	orrs	r3, r2
 8006536:	b2db      	uxtb	r3, r3
}
 8006538:	4618      	mov	r0, r3
 800653a:	3714      	adds	r7, #20
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
	...

08006544 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                       - This feature is meaningful in case of Low power mode to avoid any RTC software execution after Wake Up.
  *                         That is why when WakeUpAutoClr is set, EXTI is configured as EVENT instead of Interrupt to avoid useless IRQ handler execution.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	60f8      	str	r0, [r7, #12]
 800654c:	60b9      	str	r1, [r7, #8]
 800654e:	607a      	str	r2, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006558:	2b01      	cmp	r3, #1
 800655a:	d101      	bne.n	8006560 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 800655c:	2302      	movs	r3, #2
 800655e:	e06f      	b.n	8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2201      	movs	r2, #1
 8006564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006570:	4b35      	ldr	r3, [pc, #212]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006572:	22ca      	movs	r2, #202	; 0xca
 8006574:	625a      	str	r2, [r3, #36]	; 0x24
 8006576:	4b34      	ldr	r3, [pc, #208]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006578:	2253      	movs	r2, #83	; 0x53
 800657a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800657c:	4b32      	ldr	r3, [pc, #200]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	4a31      	ldr	r2, [pc, #196]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006582:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006586:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8006588:	4b2f      	ldr	r3, [pc, #188]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800658a:	2204      	movs	r2, #4
 800658c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800658e:	4b2e      	ldr	r3, [pc, #184]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b00      	cmp	r3, #0
 8006598:	d11e      	bne.n	80065d8 <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
  {
    tickstart = HAL_GetTick();
 800659a:	f7fb fc0d 	bl	8001db8 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80065a0:	e014      	b.n	80065cc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80065a2:	f7fb fc09 	bl	8001db8 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065b0:	d90c      	bls.n	80065cc <HAL_RTCEx_SetWakeUpTimer_IT+0x88>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b2:	4b25      	ldr	r3, [pc, #148]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80065b4:	22ff      	movs	r2, #255	; 0xff
 80065b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2203      	movs	r2, #3
 80065bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

        return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e039      	b.n	8006640 <HAL_RTCEx_SetWakeUpTimer_IT+0xfc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80065cc:	4b1e      	ldr	r3, [pc, #120]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0304 	and.w	r3, r3, #4
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d0e4      	beq.n	80065a2 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	041a      	lsls	r2, r3, #16
 80065dc:	491a      	ldr	r1, [pc, #104]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80065e4:	4b18      	ldr	r3, [pc, #96]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	f023 0207 	bic.w	r2, r3, #7
 80065ec:	4916      	ldr	r1, [pc, #88]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	618b      	str	r3, [r1, #24]

  /* In case of WUT autoclr, the IRQ handler should not be called */
  if (WakeUpAutoClr != 0U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d008      	beq.n	800660c <HAL_RTCEx_SetWakeUpTimer_IT+0xc8>
  {
    /* RTC WakeUpTimer EXTI Configuration: Event configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT();
 80065fa:	4b14      	ldr	r3, [pc, #80]	; (800664c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 80065fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006600:	4a12      	ldr	r2, [pc, #72]	; (800664c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8006602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006606:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800660a:	e007      	b.n	800661c <HAL_RTCEx_SetWakeUpTimer_IT+0xd8>
  }
  else
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 800660e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006612:	4a0e      	ldr	r2, [pc, #56]	; (800664c <HAL_RTCEx_SetWakeUpTimer_IT+0x108>)
 8006614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006618:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 8006622:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8006626:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006628:	4b07      	ldr	r3, [pc, #28]	; (8006648 <HAL_RTCEx_SetWakeUpTimer_IT+0x104>)
 800662a:	22ff      	movs	r2, #255	; 0xff
 800662c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40002800 	.word	0x40002800
 800664c:	58000800 	.word	0x58000800

08006650 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800665e:	2b01      	cmp	r3, #1
 8006660:	d101      	bne.n	8006666 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8006662:	2302      	movs	r3, #2
 8006664:	e041      	b.n	80066ea <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2202      	movs	r2, #2
 8006672:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006676:	4b1f      	ldr	r3, [pc, #124]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8006678:	22ca      	movs	r2, #202	; 0xca
 800667a:	625a      	str	r2, [r3, #36]	; 0x24
 800667c:	4b1d      	ldr	r3, [pc, #116]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 800667e:	2253      	movs	r2, #83	; 0x53
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  /* In case of interrupt mode is used, the interrupt source must disabled */
  CLEAR_BIT(RTC->CR, (RTC_CR_WUTE | RTC_CR_WUTIE));
 8006682:	4b1c      	ldr	r3, [pc, #112]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	4a1b      	ldr	r2, [pc, #108]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 8006688:	f423 4388 	bic.w	r3, r3, #17408	; 0x4400
 800668c:	6193      	str	r3, [r2, #24]

  tickstart = HAL_GetTick();
 800668e:	f7fb fb93 	bl	8001db8 <HAL_GetTick>
 8006692:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8006694:	e014      	b.n	80066c0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006696:	f7fb fb8f 	bl	8001db8 <HAL_GetTick>
 800669a:	4602      	mov	r2, r0
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1ad3      	subs	r3, r2, r3
 80066a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066a4:	d90c      	bls.n	80066c0 <HAL_RTCEx_DeactivateWakeUpTimer+0x70>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80066a8:	22ff      	movs	r2, #255	; 0xff
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2203      	movs	r2, #3
 80066b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e014      	b.n	80066ea <HAL_RTCEx_DeactivateWakeUpTimer+0x9a>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80066c0:	4b0c      	ldr	r3, [pc, #48]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d0e4      	beq.n	8006696 <HAL_RTCEx_DeactivateWakeUpTimer+0x46>
    }
  }

  /* Clear wakeup timer flag */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80066cc:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80066ce:	2204      	movs	r2, #4
 80066d0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_RTCEx_DeactivateWakeUpTimer+0xa4>)
 80066d4:	22ff      	movs	r2, #255	; 0xff
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2201      	movs	r2, #1
 80066dc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40002800 	.word	0x40002800

080066f8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8006700:	4b09      	ldr	r3, [pc, #36]	; (8006728 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8006702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006704:	f003 0304 	and.w	r3, r3, #4
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800670c:	4b06      	ldr	r3, [pc, #24]	; (8006728 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800670e:	2204      	movs	r2, #4
 8006710:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f7fa fe90 	bl	8001438 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	40002800 	.word	0x40002800

0800672c <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800673a:	2b01      	cmp	r3, #1
 800673c:	d101      	bne.n	8006742 <HAL_RTCEx_EnableBypassShadow+0x16>
 800673e:	2302      	movs	r3, #2
 8006740:	e01f      	b.n	8006782 <HAL_RTCEx_EnableBypassShadow+0x56>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2202      	movs	r2, #2
 800674e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006754:	22ca      	movs	r2, #202	; 0xca
 8006756:	625a      	str	r2, [r3, #36]	; 0x24
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800675a:	2253      	movs	r2, #83	; 0x53
 800675c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	4a0a      	ldr	r2, [pc, #40]	; (800678c <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006764:	f043 0320 	orr.w	r3, r3, #32
 8006768:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <HAL_RTCEx_EnableBypassShadow+0x60>)
 800676c:	22ff      	movs	r2, #255	; 0xff
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	bc80      	pop	{r7}
 800678a:	4770      	bx	lr
 800678c:	40002800 	.word	0x40002800

08006790 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006790:	b480      	push	{r7}
 8006792:	b083      	sub	sp, #12
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d101      	bne.n	80067a6 <HAL_RTCEx_SetSSRU_IT+0x16>
 80067a2:	2302      	movs	r3, #2
 80067a4:	e027      	b.n	80067f6 <HAL_RTCEx_SetSSRU_IT+0x66>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2202      	movs	r2, #2
 80067b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80067b8:	22ca      	movs	r2, #202	; 0xca
 80067ba:	625a      	str	r2, [r3, #36]	; 0x24
 80067bc:	4b10      	ldr	r3, [pc, #64]	; (8006800 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80067be:	2253      	movs	r2, #83	; 0x53
 80067c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	4a0e      	ldr	r2, [pc, #56]	; (8006800 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80067c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067cc:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80067ce:	4b0d      	ldr	r3, [pc, #52]	; (8006804 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80067d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d4:	4a0b      	ldr	r2, [pc, #44]	; (8006804 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80067d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80067de:	4b08      	ldr	r3, [pc, #32]	; (8006800 <HAL_RTCEx_SetSSRU_IT+0x70>)
 80067e0:	22ff      	movs	r2, #255	; 0xff
 80067e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr
 8006800:	40002800 	.word	0x40002800
 8006804:	58000800 	.word	0x58000800

08006808 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006810:	4b09      	ldr	r3, [pc, #36]	; (8006838 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b00      	cmp	r3, #0
 800681a:	d005      	beq.n	8006828 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800681e:	2240      	movs	r2, #64	; 0x40
 8006820:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fb fd07 	bl	8002236 <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	40002800 	.word	0x40002800

0800683c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr
	...

08006850 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006850:	b480      	push	{r7}
 8006852:	b087      	sub	sp, #28
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800685c:	4b07      	ldr	r3, [pc, #28]	; (800687c <HAL_RTCEx_BKUPWrite+0x2c>)
 800685e:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	697a      	ldr	r2, [r7, #20]
 8006866:	4413      	add	r3, r2
 8006868:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	601a      	str	r2, [r3, #0]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	4000b100 	.word	0x4000b100

08006880 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 800688a:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <HAL_RTCEx_BKUPRead+0x28>)
 800688c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	4413      	add	r3, r2
 8006896:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
}
 800689c:	4618      	mov	r0, r3
 800689e:	3714      	adds	r7, #20
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bc80      	pop	{r7}
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	4000b100 	.word	0x4000b100

080068ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068ba:	2301      	movs	r3, #1
 80068bc:	e0c6      	b.n	8006a4c <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d108      	bne.n	80068d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068ce:	d009      	beq.n	80068e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	61da      	str	r2, [r3, #28]
 80068d6:	e005      	b.n	80068e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d106      	bne.n	80068fe <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f7fb f877 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2202      	movs	r2, #2
 8006902:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006914:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800691e:	d902      	bls.n	8006926 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]
 8006924:	e002      	b.n	800692c <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006926:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800692a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006934:	d007      	beq.n	8006946 <HAL_SPI_Init+0x9a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800693e:	d002      	beq.n	8006946 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	f003 0302 	and.w	r3, r3, #2
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006974:	431a      	orrs	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006988:	ea42 0103 	orr.w	r1, r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006990:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069a4:	d11b      	bne.n	80069de <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069b6:	d903      	bls.n	80069c0 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2202      	movs	r2, #2
 80069bc:	631a      	str	r2, [r3, #48]	; 0x30
 80069be:	e002      	b.n	80069c6 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d107      	bne.n	80069de <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	0c1b      	lsrs	r3, r3, #16
 80069e4:	f003 0204 	and.w	r2, r3, #4
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ec:	f003 0310 	and.w	r3, r3, #16
 80069f0:	431a      	orrs	r2, r3
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	431a      	orrs	r2, r3
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006a04:	ea42 0103 	orr.w	r1, r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a1e:	d105      	bne.n	8006a2c <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	b292      	uxth	r2, r2
 8006a2a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	69da      	ldr	r2, [r3, #28]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a3a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b092      	sub	sp, #72	; 0x48
 8006a58:	af02      	add	r7, sp, #8
 8006a5a:	60f8      	str	r0, [r7, #12]
 8006a5c:	60b9      	str	r1, [r7, #8]
 8006a5e:	607a      	str	r2, [r7, #4]
 8006a60:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_RxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8006a62:	2300      	movs	r3, #0
 8006a64:	61bb      	str	r3, [r7, #24]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a66:	2300      	movs	r3, #0
 8006a68:	75fb      	strb	r3, [r7, #23]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_SPI_TransmitReceive+0x2e>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e2c8      	b.n	8007014 <HAL_SPI_TransmitReceive+0x5c0>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a8a:	f7fb f995 	bl	8001db8 <HAL_GetTick>
 8006a8e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  tmp_mode            = hspi->Init.Mode;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  initial_TxXferCount = Size;
 8006aa0:	887b      	ldrh	r3, [r7, #2]
 8006aa2:	857b      	strh	r3, [r7, #42]	; 0x2a
  initial_RxXferCount = Size;
 8006aa4:	887b      	ldrh	r3, [r7, #2]
 8006aa6:	853b      	strh	r3, [r7, #40]	; 0x28
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	623b      	str	r3, [r7, #32]
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006ab8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d00f      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x8c>
 8006ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ac6:	d107      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x84>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d103      	bne.n	8006ad8 <HAL_SPI_TransmitReceive+0x84>
 8006ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006ad4:	2b04      	cmp	r3, #4
 8006ad6:	d003      	beq.n	8006ae0 <HAL_SPI_TransmitReceive+0x8c>
  {
    errorcode = HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006ade:	e28f      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d005      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x9e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_SPI_TransmitReceive+0x9e>
 8006aec:	887b      	ldrh	r3, [r7, #2]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    goto error;
 8006af8:	e282      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d003      	beq.n	8006b0e <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2205      	movs	r2, #5
 8006b0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	887a      	ldrh	r2, [r7, #2]
 8006b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	887a      	ldrh	r2, [r7, #2]
 8006b26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	887a      	ldrh	r2, [r7, #2]
 8006b34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	887a      	ldrh	r2, [r7, #2]
 8006b3a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	651a      	str	r2, [r3, #80]	; 0x50

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b50:	d10f      	bne.n	8006b72 <HAL_SPI_TransmitReceive+0x11e>
  {
    SPI_RESET_CRC(hspi);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b70:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b7a:	d802      	bhi.n	8006b82 <HAL_SPI_TransmitReceive+0x12e>
 8006b7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d908      	bls.n	8006b94 <HAL_SPI_TransmitReceive+0x140>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b90:	605a      	str	r2, [r3, #4]
 8006b92:	e007      	b.n	8006ba4 <HAL_SPI_TransmitReceive+0x150>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ba2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bae:	2b40      	cmp	r3, #64	; 0x40
 8006bb0:	d007      	beq.n	8006bc2 <HAL_SPI_TransmitReceive+0x16e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bca:	f240 80a4 	bls.w	8006d16 <HAL_SPI_TransmitReceive+0x2c2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_SPI_TransmitReceive+0x18a>
 8006bd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 808e 	bne.w	8006cfa <HAL_SPI_TransmitReceive+0x2a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be2:	881a      	ldrh	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bee:	1c9a      	adds	r2, r3, #2
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c02:	e07a      	b.n	8006cfa <HAL_SPI_TransmitReceive+0x2a6>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d13f      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x23e>
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d03a      	beq.n	8006c92 <HAL_SPI_TransmitReceive+0x23e>
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d137      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x23e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c26:	881a      	ldrh	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	1c9a      	adds	r2, r3, #2
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c46:	2300      	movs	r3, #0
 8006c48:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d11e      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x23e>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c5c:	d119      	bne.n	8006c92 <HAL_SPI_TransmitReceive+0x23e>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10c      	bne.n	8006c82 <HAL_SPI_TransmitReceive+0x22e>
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d007      	beq.n	8006c82 <HAL_SPI_TransmitReceive+0x22e>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c80:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006c90:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d11c      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x286>
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d016      	beq.n	8006cda <HAL_SPI_TransmitReceive+0x286>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	b292      	uxth	r2, r2
 8006cb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	1c9a      	adds	r2, r3, #2
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	b29a      	uxth	r2, r3
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cda:	f7fb f86d 	bl	8001db8 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d807      	bhi.n	8006cfa <HAL_SPI_TransmitReceive+0x2a6>
 8006cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cf0:	d003      	beq.n	8006cfa <HAL_SPI_TransmitReceive+0x2a6>
      {
        errorcode = HAL_TIMEOUT;
 8006cf2:	2303      	movs	r3, #3
 8006cf4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006cf8:	e182      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	f47f af7f 	bne.w	8006c04 <HAL_SPI_TransmitReceive+0x1b0>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f47f af78 	bne.w	8006c04 <HAL_SPI_TransmitReceive+0x1b0>
 8006d14:	e103      	b.n	8006f1e <HAL_SPI_TransmitReceive+0x4ca>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_SPI_TransmitReceive+0x2d2>
 8006d1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	f040 80ef 	bne.w	8006f04 <HAL_SPI_TransmitReceive+0x4b0>
    {
      if (hspi->TxXferCount > 1U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d912      	bls.n	8006d56 <HAL_SPI_TransmitReceive+0x302>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d40:	1c9a      	adds	r2, r3, #2
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	3b02      	subs	r3, #2
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d54:	e0d6      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x4b0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	330c      	adds	r3, #12
 8006d60:	7812      	ldrb	r2, [r2, #0]
 8006d62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d68:	1c5a      	adds	r2, r3, #1
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	3b01      	subs	r3, #1
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d7c:	e0c2      	b.n	8006f04 <HAL_SPI_TransmitReceive+0x4b0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d158      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x3ea>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d053      	beq.n	8006e3e <HAL_SPI_TransmitReceive+0x3ea>
 8006d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d150      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x3ea>
      {
        if (hspi->TxXferCount > 1U)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d912      	bls.n	8006dcc <HAL_SPI_TransmitReceive+0x378>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	1c9a      	adds	r2, r3, #2
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	3b02      	subs	r3, #2
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006dca:	e012      	b.n	8006df2 <HAL_SPI_TransmitReceive+0x39e>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	330c      	adds	r3, #12
 8006dd6:	7812      	ldrb	r2, [r2, #0]
 8006dd8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006df2:	2300      	movs	r3, #0
 8006df4:	63fb      	str	r3, [r7, #60]	; 0x3c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d11e      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x3ea>
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e08:	d119      	bne.n	8006e3e <HAL_SPI_TransmitReceive+0x3ea>
        {
          /* Set NSS Soft to received correctly the CRC on slave mode with NSS pulse activated */
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 8006e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10c      	bne.n	8006e2e <HAL_SPI_TransmitReceive+0x3da>
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	f003 0308 	and.w	r3, r3, #8
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <HAL_SPI_TransmitReceive+0x3da>
          {
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e2c:	601a      	str	r2, [r3, #0]
          }
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006e3c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d148      	bne.n	8006ede <HAL_SPI_TransmitReceive+0x48a>
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e52:	b29b      	uxth	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d042      	beq.n	8006ede <HAL_SPI_TransmitReceive+0x48a>
      {
        if (hspi->RxXferCount > 1U)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d923      	bls.n	8006eac <HAL_SPI_TransmitReceive+0x458>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	68da      	ldr	r2, [r3, #12]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	b292      	uxth	r2, r2
 8006e70:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	1c9a      	adds	r2, r3, #2
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	3b02      	subs	r3, #2
 8006e86:	b29a      	uxth	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	d81f      	bhi.n	8006eda <HAL_SPI_TransmitReceive+0x486>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006ea8:	605a      	str	r2, [r3, #4]
 8006eaa:	e016      	b.n	8006eda <HAL_SPI_TransmitReceive+0x486>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f103 020c 	add.w	r2, r3, #12
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	7812      	ldrb	r2, [r2, #0]
 8006eba:	b2d2      	uxtb	r2, r2
 8006ebc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	1c5a      	adds	r2, r3, #1
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	3b01      	subs	r3, #1
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006eda:	2301      	movs	r3, #1
 8006edc:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ede:	f7fa ff6b 	bl	8001db8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d803      	bhi.n	8006ef6 <HAL_SPI_TransmitReceive+0x4a2>
 8006eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ef4:	d102      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x4a8>
 8006ef6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d103      	bne.n	8006f04 <HAL_SPI_TransmitReceive+0x4b0>
      {
        errorcode = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        goto error;
 8006f02:	e07d      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f47f af37 	bne.w	8006d7e <HAL_SPI_TransmitReceive+0x32a>
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f16:	b29b      	uxth	r3, r3
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f47f af30 	bne.w	8006d7e <HAL_SPI_TransmitReceive+0x32a>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f26:	d146      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x562>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f2e:	2201      	movs	r2, #1
 8006f30:	2101      	movs	r1, #1
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f000 f872 	bl	800701c <SPI_WaitFlagStateUntilTimeout>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d009      	beq.n	8006f52 <HAL_SPI_TransmitReceive+0x4fe>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f42:	f043 0202 	orr.w	r2, r3, #2
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      goto error;
 8006f50:	e056      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
    }
    /* Read CRC */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006f5a:	d105      	bne.n	8006f68 <HAL_SPI_TransmitReceive+0x514>
    {
      /* Read 16bit CRC */
      tmpreg = READ_REG(hspi->Instance->DR);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68db      	ldr	r3, [r3, #12]
 8006f62:	61bb      	str	r3, [r7, #24]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	e026      	b.n	8006fb6 <HAL_SPI_TransmitReceive+0x562>
    }
    else
    {
      /* Initialize the 8bit temporary pointer */
      ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	330c      	adds	r3, #12
 8006f6e:	61fb      	str	r3, [r7, #28]
      /* Read 8bit CRC */
      tmpreg8 = *ptmpreg8;
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006f78:	7dfb      	ldrb	r3, [r7, #23]

      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d119      	bne.n	8006fb6 <HAL_SPI_TransmitReceive+0x562>
      {
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8006f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f88:	2201      	movs	r2, #1
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f845 	bl	800701c <SPI_WaitFlagStateUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d009      	beq.n	8006fac <HAL_SPI_TransmitReceive+0x558>
        {
          /* Error on the CRC reception */
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f9c:	f043 0202 	orr.w	r2, r3, #2
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	661a      	str	r2, [r3, #96]	; 0x60
          errorcode = HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
          goto error;
 8006faa:	e029      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
        }
        /* Read 8bit CRC again in case of 16bit CRC in 8bit Data mode */
        tmpreg8 = *ptmpreg8;
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	75fb      	strb	r3, [r7, #23]
        /* To avoid GCC warning */
        UNUSED(tmpreg8);
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
      }
    }
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b10      	cmp	r3, #16
 8006fc2:	d10d      	bne.n	8006fe0 <HAL_SPI_TransmitReceive+0x58c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc8:	f043 0202 	orr.w	r2, r3, #2
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	661a      	str	r2, [r3, #96]	; 0x60
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8006fd8:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	f000 f937 	bl	8007258 <SPI_EndRxTxTransaction>
 8006fea:	4603      	mov	r3, r0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <HAL_SPI_TransmitReceive+0x5aa>
  {
    errorcode = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	661a      	str	r2, [r3, #96]	; 0x60
 8006ffc:	e000      	b.n	8007000 <HAL_SPI_TransmitReceive+0x5ac>
  }

error :
 8006ffe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007010:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
}
 8007014:	4618      	mov	r0, r3
 8007016:	3740      	adds	r7, #64	; 0x40
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b088      	sub	sp, #32
 8007020:	af00      	add	r7, sp, #0
 8007022:	60f8      	str	r0, [r7, #12]
 8007024:	60b9      	str	r1, [r7, #8]
 8007026:	603b      	str	r3, [r7, #0]
 8007028:	4613      	mov	r3, r2
 800702a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800702c:	f7fa fec4 	bl	8001db8 <HAL_GetTick>
 8007030:	4602      	mov	r2, r0
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	1a9b      	subs	r3, r3, r2
 8007036:	683a      	ldr	r2, [r7, #0]
 8007038:	4413      	add	r3, r2
 800703a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800703c:	f7fa febc 	bl	8001db8 <HAL_GetTick>
 8007040:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007042:	4b39      	ldr	r3, [pc, #228]	; (8007128 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	015b      	lsls	r3, r3, #5
 8007048:	0d1b      	lsrs	r3, r3, #20
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	fb02 f303 	mul.w	r3, r2, r3
 8007050:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007052:	e054      	b.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800705a:	d050      	beq.n	80070fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800705c:	f7fa feac 	bl	8001db8 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	69bb      	ldr	r3, [r7, #24]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	429a      	cmp	r2, r3
 800706a:	d902      	bls.n	8007072 <SPI_WaitFlagStateUntilTimeout+0x56>
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d13d      	bne.n	80070ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685a      	ldr	r2, [r3, #4]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800708a:	d111      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007094:	d004      	beq.n	80070a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800709e:	d107      	bne.n	80070b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b8:	d10f      	bne.n	80070da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070c8:	601a      	str	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	e017      	b.n	800711e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d101      	bne.n	80070f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	689a      	ldr	r2, [r3, #8]
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	4013      	ands	r3, r2
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	429a      	cmp	r2, r3
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	429a      	cmp	r2, r3
 800711a:	d19b      	bne.n	8007054 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3720      	adds	r7, #32
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20000014 	.word	0x20000014

0800712c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	60b9      	str	r1, [r7, #8]
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800713e:	f7fa fe3b 	bl	8001db8 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	1a9b      	subs	r3, r3, r2
 8007148:	683a      	ldr	r2, [r7, #0]
 800714a:	4413      	add	r3, r2
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800714e:	f7fa fe33 	bl	8001db8 <HAL_GetTick>
 8007152:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800715c:	4b3d      	ldr	r3, [pc, #244]	; (8007254 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800715e:	681a      	ldr	r2, [r3, #0]
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	00da      	lsls	r2, r3, #3
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	0d1b      	lsrs	r3, r3, #20
 800716c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007174:	e060      	b.n	8007238 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800717c:	d107      	bne.n	800718e <SPI_WaitFifoStateUntilTimeout+0x62>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d104      	bne.n	800718e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	b2db      	uxtb	r3, r3
 800718a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800718c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007194:	d050      	beq.n	8007238 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007196:	f7fa fe0f 	bl	8001db8 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d902      	bls.n	80071ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80071a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d13d      	bne.n	8007228 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071c4:	d111      	bne.n	80071ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ce:	d004      	beq.n	80071da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d8:	d107      	bne.n	80071ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071f2:	d10f      	bne.n	8007214 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007212:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e010      	b.n	800724a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d101      	bne.n	8007232 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	3b01      	subs	r3, #1
 8007236:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689a      	ldr	r2, [r3, #8]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	4013      	ands	r3, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d196      	bne.n	8007176 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3728      	adds	r7, #40	; 0x28
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000014 	.word	0x20000014

08007258 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	2200      	movs	r2, #0
 800726c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	f7ff ff5b 	bl	800712c <SPI_WaitFifoStateUntilTimeout>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d007      	beq.n	800728c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007280:	f043 0220 	orr.w	r2, r3, #32
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e027      	b.n	80072dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	2180      	movs	r1, #128	; 0x80
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff fec0 	bl	800701c <SPI_WaitFlagStateUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d007      	beq.n	80072b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a6:	f043 0220 	orr.w	r2, r3, #32
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e014      	b.n	80072dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	9300      	str	r3, [sp, #0]
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f7ff ff34 	bl	800712c <SPI_WaitFifoStateUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d007      	beq.n	80072da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072ce:	f043 0220 	orr.w	r2, r3, #32
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80072d6:	2303      	movs	r3, #3
 80072d8:	e000      	b.n	80072dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80072da:	2300      	movs	r3, #0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3710      	adds	r7, #16
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}

080072e4 <LL_PWR_SetRadioBusyTrigger>:
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80072ec:	4b06      	ldr	r3, [pc, #24]	; (8007308 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072f4:	4904      	ldr	r1, [pc, #16]	; (8007308 <LL_PWR_SetRadioBusyTrigger+0x24>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	608b      	str	r3, [r1, #8]
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	bc80      	pop	{r7}
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	58000400 	.word	0x58000400

0800730c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 800730c:	b480      	push	{r7}
 800730e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007316:	4a04      	ldr	r2, [pc, #16]	; (8007328 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8007318:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800731c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007320:	bf00      	nop
 8007322:	46bd      	mov	sp, r7
 8007324:	bc80      	pop	{r7}
 8007326:	4770      	bx	lr
 8007328:	58000400 	.word	0x58000400

0800732c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 800732c:	b480      	push	{r7}
 800732e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8007330:	4b05      	ldr	r3, [pc, #20]	; (8007348 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	4a04      	ldr	r2, [pc, #16]	; (8007348 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8007338:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800733c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007340:	bf00      	nop
 8007342:	46bd      	mov	sp, r7
 8007344:	bc80      	pop	{r7}
 8007346:	4770      	bx	lr
 8007348:	58000400 	.word	0x58000400

0800734c <LL_PWR_ClearFlag_RFBUSY>:
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8007350:	4b03      	ldr	r3, [pc, #12]	; (8007360 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8007352:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007356:	619a      	str	r2, [r3, #24]
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	bc80      	pop	{r7}
 800735e:	4770      	bx	lr
 8007360:	58000400 	.word	0x58000400

08007364 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8007368:	4b06      	ldr	r3, [pc, #24]	; (8007384 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0302 	and.w	r3, r3, #2
 8007370:	2b02      	cmp	r3, #2
 8007372:	d101      	bne.n	8007378 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8007374:	2301      	movs	r3, #1
 8007376:	e000      	b.n	800737a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	46bd      	mov	sp, r7
 800737e:	bc80      	pop	{r7}
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	58000400 	.word	0x58000400

08007388 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8007388:	b480      	push	{r7}
 800738a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 800738e:	695b      	ldr	r3, [r3, #20]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b04      	cmp	r3, #4
 8007396:	d101      	bne.n	800739c <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8007398:	2301      	movs	r3, #1
 800739a:	e000      	b.n	800739e <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bc80      	pop	{r7}
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	58000400 	.word	0x58000400

080073ac <LL_RCC_RF_DisableReset>:
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80073b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80073bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80073c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80073c4:	bf00      	nop
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bc80      	pop	{r7}
 80073ca:	4770      	bx	lr

080073cc <LL_RCC_IsRFUnderReset>:
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80073d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80073d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073e0:	d101      	bne.n	80073e6 <LL_RCC_IsRFUnderReset+0x1a>
 80073e2:	2301      	movs	r3, #1
 80073e4:	e000      	b.n	80073e8 <LL_RCC_IsRFUnderReset+0x1c>
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bc80      	pop	{r7}
 80073ee:	4770      	bx	lr

080073f0 <LL_EXTI_EnableIT_32_63>:
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80073f8:	4b06      	ldr	r3, [pc, #24]	; (8007414 <LL_EXTI_EnableIT_32_63+0x24>)
 80073fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80073fe:	4905      	ldr	r1, [pc, #20]	; (8007414 <LL_EXTI_EnableIT_32_63+0x24>)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8007408:	bf00      	nop
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	bc80      	pop	{r7}
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	58000800 	.word	0x58000800

08007418 <HAL_SUBGHZ_Init>:
  *         set the state to HAL_SUBGHZ_STATE_RESET_RF_READY with __HAL_SUBGHZ_RESET_HANDLE_STATE_RF_READY
  *         to avoid the reset of Radio peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  HAL_SUBGHZ_StateTypeDef subghz_state;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d103      	bne.n	800742e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
    return status;
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	e052      	b.n	80074d4 <HAL_SUBGHZ_Init+0xbc>
  }
  else
  {
    status = HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  subghz_state = hsubghz->State;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	799b      	ldrb	r3, [r3, #6]
 8007436:	73bb      	strb	r3, [r7, #14]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8007438:	7bbb      	ldrb	r3, [r7, #14]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_SUBGHZ_Init+0x2c>
 800743e:	7bbb      	ldrb	r3, [r7, #14]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d109      	bne.n	8007458 <HAL_SUBGHZ_Init+0x40>
      (subghz_state == HAL_SUBGHZ_STATE_RESET_RF_READY))
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f7fa fc14 	bl	8001c78 <HAL_SUBGHZ_MspInit>
#if defined(CM0PLUS)
    /* Enable EXTI 44 : Radio IRQ ITs for CPU2 */
    LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
#else
    /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
    LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8007450:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007454:	f7ff ffcc 	bl	80073f0 <LL_EXTI_EnableIT_32_63>
#endif /* CM0PLUS */
  }

  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8007458:	7bbb      	ldrb	r3, [r7, #14]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d126      	bne.n	80074ac <HAL_SUBGHZ_Init+0x94>
  {
    /* Reinitialize Radio peripheral only if SUBGHZ is in full RESET state */
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	719a      	strb	r2, [r3, #6]

    /* De-asserts the reset signal of the Radio peripheral */
    LL_RCC_RF_DisableReset();
 8007464:	f7ff ffa2 	bl	80073ac <LL_RCC_RF_DisableReset>

    /* Verify that Radio in reset status flag is set */
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007468:	4b1c      	ldr	r3, [pc, #112]	; (80074dc <HAL_SUBGHZ_Init+0xc4>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	4613      	mov	r3, r2
 800746e:	00db      	lsls	r3, r3, #3
 8007470:	1a9b      	subs	r3, r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	0cdb      	lsrs	r3, r3, #19
 8007476:	2264      	movs	r2, #100	; 0x64
 8007478:	fb02 f303 	mul.w	r3, r2, r3
 800747c:	60bb      	str	r3, [r7, #8]

    do
    {
      if (count == 0U)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d105      	bne.n	8007490 <HAL_SUBGHZ_Init+0x78>
      {
        status  = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	73fb      	strb	r3, [r7, #15]
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2201      	movs	r2, #1
 800748c:	609a      	str	r2, [r3, #8]
        break;
 800748e:	e007      	b.n	80074a0 <HAL_SUBGHZ_Init+0x88>
      }
      count--;
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	60bb      	str	r3, [r7, #8]
    } while (LL_RCC_IsRFUnderReset() != 0UL);
 8007496:	f7ff ff99 	bl	80073cc <LL_RCC_IsRFUnderReset>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1ee      	bne.n	800747e <HAL_SUBGHZ_Init+0x66>

    /* Asserts the reset signal of the Radio peripheral */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80074a0:	f7ff ff34 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>
#if defined(CM0PLUS)
    /* Enable wakeup signal of the Radio peripheral */
    LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
    /* Enable wakeup signal of the Radio peripheral */
    LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 80074a4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80074a8:	f7ff ff1c 	bl	80072e4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */
  }

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 80074ac:	f7ff ff4e 	bl	800734c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 80074b0:	7bfb      	ldrb	r3, [r7, #15]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <HAL_SUBGHZ_Init+0xb4>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 faac 	bl	8007a18 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	609a      	str	r2, [r3, #8]
  }

  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	719a      	strb	r2, [r3, #6]

  return status;
 80074d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000014 	.word	0x20000014

080074e0 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	60f8      	str	r0, [r7, #12]
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	461a      	mov	r2, r3
 80074ec:	460b      	mov	r3, r1
 80074ee:	817b      	strh	r3, [r7, #10]
 80074f0:	4613      	mov	r3, r2
 80074f2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	799b      	ldrb	r3, [r3, #6]
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d14a      	bne.n	8007594 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_SUBGHZ_WriteRegisters+0x2a>
 8007506:	2302      	movs	r3, #2
 8007508:	e045      	b.n	8007596 <HAL_SUBGHZ_WriteRegisters+0xb6>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2202      	movs	r2, #2
 8007514:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fb4c 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800751c:	f7ff ff06 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8007520:	210d      	movs	r1, #13
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 fa98 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8007528:	897b      	ldrh	r3, [r7, #10]
 800752a:	0a1b      	lsrs	r3, r3, #8
 800752c:	b29b      	uxth	r3, r3
 800752e:	b2db      	uxtb	r3, r3
 8007530:	4619      	mov	r1, r3
 8007532:	68f8      	ldr	r0, [r7, #12]
 8007534:	f000 fa90 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8007538:	897b      	ldrh	r3, [r7, #10]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	4619      	mov	r1, r3
 800753e:	68f8      	ldr	r0, [r7, #12]
 8007540:	f000 fa8a 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007544:	2300      	movs	r3, #0
 8007546:	82bb      	strh	r3, [r7, #20]
 8007548:	e00a      	b.n	8007560 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800754a:	8abb      	ldrh	r3, [r7, #20]
 800754c:	687a      	ldr	r2, [r7, #4]
 800754e:	4413      	add	r3, r2
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	4619      	mov	r1, r3
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 fa7f 	bl	8007a58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800755a:	8abb      	ldrh	r3, [r7, #20]
 800755c:	3301      	adds	r3, #1
 800755e:	82bb      	strh	r3, [r7, #20]
 8007560:	8aba      	ldrh	r2, [r7, #20]
 8007562:	893b      	ldrh	r3, [r7, #8]
 8007564:	429a      	cmp	r2, r3
 8007566:	d3f0      	bcc.n	800754a <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007568:	f7ff fed0 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800756c:	68f8      	ldr	r0, [r7, #12]
 800756e:	f000 fb45 	bl	8007bfc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d002      	beq.n	8007580 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	75fb      	strb	r3, [r7, #23]
 800757e:	e001      	b.n	8007584 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007580:	2300      	movs	r3, #0
 8007582:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2200      	movs	r2, #0
 800758e:	715a      	strb	r2, [r3, #5]

    return status;
 8007590:	7dfb      	ldrb	r3, [r7, #23]
 8007592:	e000      	b.n	8007596 <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007594:	2302      	movs	r3, #2
  }
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 800759e:	b580      	push	{r7, lr}
 80075a0:	b088      	sub	sp, #32
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	60f8      	str	r0, [r7, #12]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	461a      	mov	r2, r3
 80075aa:	460b      	mov	r3, r1
 80075ac:	817b      	strh	r3, [r7, #10]
 80075ae:	4613      	mov	r3, r2
 80075b0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	799b      	ldrb	r3, [r3, #6]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d14a      	bne.n	8007656 <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	795b      	ldrb	r3, [r3, #5]
 80075c4:	2b01      	cmp	r3, #1
 80075c6:	d101      	bne.n	80075cc <HAL_SUBGHZ_ReadRegisters+0x2e>
 80075c8:	2302      	movs	r3, #2
 80075ca:	e045      	b.n	8007658 <HAL_SUBGHZ_ReadRegisters+0xba>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 faee 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075d8:	f7ff fea8 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80075dc:	211d      	movs	r1, #29
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fa3a 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80075e4:	897b      	ldrh	r3, [r7, #10]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fa32 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80075f4:	897b      	ldrh	r3, [r7, #10]
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	4619      	mov	r1, r3
 80075fa:	68f8      	ldr	r0, [r7, #12]
 80075fc:	f000 fa2c 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007600:	2100      	movs	r1, #0
 8007602:	68f8      	ldr	r0, [r7, #12]
 8007604:	f000 fa28 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007608:	2300      	movs	r3, #0
 800760a:	82fb      	strh	r3, [r7, #22]
 800760c:	e009      	b.n	8007622 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800760e:	69b9      	ldr	r1, [r7, #24]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fa77 	bl	8007b04 <SUBGHZSPI_Receive>
      pData++;
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	3301      	adds	r3, #1
 800761a:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800761c:	8afb      	ldrh	r3, [r7, #22]
 800761e:	3301      	adds	r3, #1
 8007620:	82fb      	strh	r3, [r7, #22]
 8007622:	8afa      	ldrh	r2, [r7, #22]
 8007624:	893b      	ldrh	r3, [r7, #8]
 8007626:	429a      	cmp	r2, r3
 8007628:	d3f1      	bcc.n	800760e <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800762a:	f7ff fe6f 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 fae4 	bl	8007bfc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	77fb      	strb	r3, [r7, #31]
 8007640:	e001      	b.n	8007646 <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007642:	2300      	movs	r3, #0
 8007644:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2201      	movs	r2, #1
 800764a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	715a      	strb	r2, [r3, #5]

    return status;
 8007652:	7ffb      	ldrb	r3, [r7, #31]
 8007654:	e000      	b.n	8007658 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 8007656:	2302      	movs	r3, #2
  }
}
 8007658:	4618      	mov	r0, r3
 800765a:	3720      	adds	r7, #32
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	461a      	mov	r2, r3
 800766c:	460b      	mov	r3, r1
 800766e:	72fb      	strb	r3, [r7, #11]
 8007670:	4613      	mov	r3, r2
 8007672:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	799b      	ldrb	r3, [r3, #6]
 8007678:	b2db      	uxtb	r3, r3
 800767a:	2b01      	cmp	r3, #1
 800767c:	d14a      	bne.n	8007714 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	795b      	ldrb	r3, [r3, #5]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <HAL_SUBGHZ_ExecSetCmd+0x2a>
 8007686:	2302      	movs	r3, #2
 8007688:	e045      	b.n	8007716 <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 fa8f 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8007696:	7afb      	ldrb	r3, [r7, #11]
 8007698:	2b84      	cmp	r3, #132	; 0x84
 800769a:	d002      	beq.n	80076a2 <HAL_SUBGHZ_ExecSetCmd+0x42>
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	2b94      	cmp	r3, #148	; 0x94
 80076a0:	d103      	bne.n	80076aa <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2201      	movs	r2, #1
 80076a6:	711a      	strb	r2, [r3, #4]
 80076a8:	e002      	b.n	80076b0 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80076b0:	f7ff fe3c 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80076b4:	7afb      	ldrb	r3, [r7, #11]
 80076b6:	4619      	mov	r1, r3
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f9cd 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80076be:	2300      	movs	r3, #0
 80076c0:	82bb      	strh	r3, [r7, #20]
 80076c2:	e00a      	b.n	80076da <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80076c4:	8abb      	ldrh	r3, [r7, #20]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	4413      	add	r3, r2
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	4619      	mov	r1, r3
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 f9c2 	bl	8007a58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80076d4:	8abb      	ldrh	r3, [r7, #20]
 80076d6:	3301      	adds	r3, #1
 80076d8:	82bb      	strh	r3, [r7, #20]
 80076da:	8aba      	ldrh	r2, [r7, #20]
 80076dc:	893b      	ldrh	r3, [r7, #8]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d3f0      	bcc.n	80076c4 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80076e2:	f7ff fe13 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	2b84      	cmp	r3, #132	; 0x84
 80076ea:	d002      	beq.n	80076f2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 fa85 	bl	8007bfc <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d002      	beq.n	8007700 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	75fb      	strb	r3, [r7, #23]
 80076fe:	e001      	b.n	8007704 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	715a      	strb	r2, [r3, #5]

    return status;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	e000      	b.n	8007716 <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007714:	2302      	movs	r3, #2
  }
}
 8007716:	4618      	mov	r0, r3
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800771e:	b580      	push	{r7, lr}
 8007720:	b088      	sub	sp, #32
 8007722:	af00      	add	r7, sp, #0
 8007724:	60f8      	str	r0, [r7, #12]
 8007726:	607a      	str	r2, [r7, #4]
 8007728:	461a      	mov	r2, r3
 800772a:	460b      	mov	r3, r1
 800772c:	72fb      	strb	r3, [r7, #11]
 800772e:	4613      	mov	r3, r2
 8007730:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	799b      	ldrb	r3, [r3, #6]
 800773a:	b2db      	uxtb	r3, r3
 800773c:	2b01      	cmp	r3, #1
 800773e:	d13d      	bne.n	80077bc <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	795b      	ldrb	r3, [r3, #5]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d101      	bne.n	800774c <HAL_SUBGHZ_ExecGetCmd+0x2e>
 8007748:	2302      	movs	r3, #2
 800774a:	e038      	b.n	80077be <HAL_SUBGHZ_ExecGetCmd+0xa0>
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2201      	movs	r2, #1
 8007750:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fa2e 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007758:	f7ff fde8 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800775c:	7afb      	ldrb	r3, [r7, #11]
 800775e:	4619      	mov	r1, r3
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 f979 	bl	8007a58 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8007766:	2100      	movs	r1, #0
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f975 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800776e:	2300      	movs	r3, #0
 8007770:	82fb      	strh	r3, [r7, #22]
 8007772:	e009      	b.n	8007788 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007774:	69b9      	ldr	r1, [r7, #24]
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f9c4 	bl	8007b04 <SUBGHZSPI_Receive>
      pData++;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	3301      	adds	r3, #1
 8007780:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007782:	8afb      	ldrh	r3, [r7, #22]
 8007784:	3301      	adds	r3, #1
 8007786:	82fb      	strh	r3, [r7, #22]
 8007788:	8afa      	ldrh	r2, [r7, #22]
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	429a      	cmp	r2, r3
 800778e:	d3f1      	bcc.n	8007774 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007790:	f7ff fdbc 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f000 fa31 	bl	8007bfc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e001      	b.n	80077ac <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80077a8:	2300      	movs	r3, #0
 80077aa:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2200      	movs	r2, #0
 80077b6:	715a      	strb	r2, [r3, #5]

    return status;
 80077b8:	7ffb      	ldrb	r3, [r7, #31]
 80077ba:	e000      	b.n	80077be <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077bc:	2302      	movs	r3, #2
  }
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}

080077c6 <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80077c6:	b580      	push	{r7, lr}
 80077c8:	b086      	sub	sp, #24
 80077ca:	af00      	add	r7, sp, #0
 80077cc:	60f8      	str	r0, [r7, #12]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	461a      	mov	r2, r3
 80077d2:	460b      	mov	r3, r1
 80077d4:	72fb      	strb	r3, [r7, #11]
 80077d6:	4613      	mov	r3, r2
 80077d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	799b      	ldrb	r3, [r3, #6]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d13e      	bne.n	8007862 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	795b      	ldrb	r3, [r3, #5]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e039      	b.n	8007864 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f9dc 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80077fc:	f7ff fd96 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007800:	210e      	movs	r1, #14
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f000 f928 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8007808:	7afb      	ldrb	r3, [r7, #11]
 800780a:	4619      	mov	r1, r3
 800780c:	68f8      	ldr	r0, [r7, #12]
 800780e:	f000 f923 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007812:	2300      	movs	r3, #0
 8007814:	82bb      	strh	r3, [r7, #20]
 8007816:	e00a      	b.n	800782e <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8007818:	8abb      	ldrh	r3, [r7, #20]
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	4413      	add	r3, r2
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	4619      	mov	r1, r3
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f000 f918 	bl	8007a58 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8007828:	8abb      	ldrh	r3, [r7, #20]
 800782a:	3301      	adds	r3, #1
 800782c:	82bb      	strh	r3, [r7, #20]
 800782e:	8aba      	ldrh	r2, [r7, #20]
 8007830:	893b      	ldrh	r3, [r7, #8]
 8007832:	429a      	cmp	r2, r3
 8007834:	d3f0      	bcc.n	8007818 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007836:	f7ff fd69 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800783a:	68f8      	ldr	r0, [r7, #12]
 800783c:	f000 f9de 	bl	8007bfc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	75fb      	strb	r3, [r7, #23]
 800784c:	e001      	b.n	8007852 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 800784e:	2300      	movs	r3, #0
 8007850:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	715a      	strb	r2, [r3, #5]

    return status;
 800785e:	7dfb      	ldrb	r3, [r7, #23]
 8007860:	e000      	b.n	8007864 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007862:	2302      	movs	r3, #2
  }
}
 8007864:	4618      	mov	r0, r3
 8007866:	3718      	adds	r7, #24
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b088      	sub	sp, #32
 8007870:	af00      	add	r7, sp, #0
 8007872:	60f8      	str	r0, [r7, #12]
 8007874:	607a      	str	r2, [r7, #4]
 8007876:	461a      	mov	r2, r3
 8007878:	460b      	mov	r3, r1
 800787a:	72fb      	strb	r3, [r7, #11]
 800787c:	4613      	mov	r3, r2
 800787e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	799b      	ldrb	r3, [r3, #6]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b01      	cmp	r3, #1
 800788c:	d141      	bne.n	8007912 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	795b      	ldrb	r3, [r3, #5]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d101      	bne.n	800789a <HAL_SUBGHZ_ReadBuffer+0x2e>
 8007896:	2302      	movs	r3, #2
 8007898:	e03c      	b.n	8007914 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2201      	movs	r2, #1
 800789e:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f987 	bl	8007bb4 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80078a6:	f7ff fd41 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80078aa:	211e      	movs	r1, #30
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f000 f8d3 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	4619      	mov	r1, r3
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 f8ce 	bl	8007a58 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80078bc:	2100      	movs	r1, #0
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	f000 f8ca 	bl	8007a58 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80078c4:	2300      	movs	r3, #0
 80078c6:	82fb      	strh	r3, [r7, #22]
 80078c8:	e009      	b.n	80078de <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80078ca:	69b9      	ldr	r1, [r7, #24]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f000 f919 	bl	8007b04 <SUBGHZSPI_Receive>
      pData++;
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	3301      	adds	r3, #1
 80078d6:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80078d8:	8afb      	ldrh	r3, [r7, #22]
 80078da:	3301      	adds	r3, #1
 80078dc:	82fb      	strh	r3, [r7, #22]
 80078de:	8afa      	ldrh	r2, [r7, #22]
 80078e0:	893b      	ldrh	r3, [r7, #8]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d3f1      	bcc.n	80078ca <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80078e6:	f7ff fd11 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f986 	bl	8007bfc <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d002      	beq.n	80078fe <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e001      	b.n	8007902 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2201      	movs	r2, #1
 8007906:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	715a      	strb	r2, [r3, #5]

    return status;
 800790e:	7ffb      	ldrb	r3, [r7, #31]
 8007910:	e000      	b.n	8007914 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007912:	2302      	movs	r3, #2
  }
}
 8007914:	4618      	mov	r0, r3
 8007916:	3720      	adds	r7, #32
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007924:	2300      	movs	r3, #0
 8007926:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8007928:	f107 020c 	add.w	r2, r7, #12
 800792c:	2302      	movs	r3, #2
 800792e:	2112      	movs	r1, #18
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff fef4 	bl	800771e <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8007936:	7b3b      	ldrb	r3, [r7, #12]
 8007938:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800793a:	89fb      	ldrh	r3, [r7, #14]
 800793c:	021b      	lsls	r3, r3, #8
 800793e:	b21a      	sxth	r2, r3
 8007940:	7b7b      	ldrb	r3, [r7, #13]
 8007942:	b21b      	sxth	r3, r3
 8007944:	4313      	orrs	r3, r2
 8007946:	b21b      	sxth	r3, r3
 8007948:	81fb      	strh	r3, [r7, #14]

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800794a:	f107 020c 	add.w	r2, r7, #12
 800794e:	2302      	movs	r3, #2
 8007950:	2102      	movs	r1, #2
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7ff fe84 	bl	8007660 <HAL_SUBGHZ_ExecSetCmd>

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8007958:	89fb      	ldrh	r3, [r7, #14]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <HAL_SUBGHZ_IRQHandler+0x4c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f008 ffea 	bl	801093c <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8007968:	89fb      	ldrh	r3, [r7, #14]
 800796a:	f003 0302 	and.w	r3, r3, #2
 800796e:	2b00      	cmp	r3, #0
 8007970:	d002      	beq.n	8007978 <HAL_SUBGHZ_IRQHandler+0x5c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f008 fff0 	bl	8010958 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8007978:	89fb      	ldrh	r3, [r7, #14]
 800797a:	f003 0304 	and.w	r3, r3, #4
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <HAL_SUBGHZ_IRQHandler+0x6c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f009 f840 	bl	8010a08 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8007988:	89fb      	ldrh	r3, [r7, #14]
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d002      	beq.n	8007998 <HAL_SUBGHZ_IRQHandler+0x7c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f009 f846 	bl	8010a24 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8007998:	89fb      	ldrh	r3, [r7, #14]
 800799a:	f003 0310 	and.w	r3, r3, #16
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <HAL_SUBGHZ_IRQHandler+0x8c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f009 f84c 	bl	8010a40 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d002      	beq.n	80079b8 <HAL_SUBGHZ_IRQHandler+0x9c>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f009 f81a 	bl	80109ec <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80079b8:	89fb      	ldrh	r3, [r7, #14]
 80079ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <HAL_SUBGHZ_IRQHandler+0xac>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f008 ffd6 	bl	8010974 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80079c8:	89fb      	ldrh	r3, [r7, #14]
 80079ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <HAL_SUBGHZ_IRQHandler+0xd2>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80079d2:	89fb      	ldrh	r3, [r7, #14]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d004      	beq.n	80079e6 <HAL_SUBGHZ_IRQHandler+0xca>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80079dc:	2101      	movs	r1, #1
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f008 ffd6 	bl	8010990 <HAL_SUBGHZ_CADStatusCallback>
 80079e4:	e003      	b.n	80079ee <HAL_SUBGHZ_IRQHandler+0xd2>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80079e6:	2100      	movs	r1, #0
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f008 ffd1 	bl	8010990 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80079ee:	89fb      	ldrh	r3, [r7, #14]
 80079f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d002      	beq.n	80079fe <HAL_SUBGHZ_IRQHandler+0xe2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f008 ffe7 	bl	80109cc <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LR_FHSS Hop interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 80079fe:	89fb      	ldrh	r3, [r7, #14]
 8007a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <HAL_SUBGHZ_IRQHandler+0xf2>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->LrFhssHopCallback(hsubghz);
#else
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f009 f827 	bl	8010a5c <HAL_SUBGHZ_LrFhssHopCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }
}
 8007a0e:	bf00      	nop
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
	...

08007a18 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007a20:	4b0c      	ldr	r3, [pc, #48]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a0b      	ldr	r2, [pc, #44]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a2a:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007a2c:	4a09      	ldr	r2, [pc, #36]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 8007a34:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8007a36:	4b07      	ldr	r3, [pc, #28]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a38:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8007a3c:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007a3e:	4b05      	ldr	r3, [pc, #20]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a04      	ldr	r2, [pc, #16]	; (8007a54 <SUBGHZSPI_Init+0x3c>)
 8007a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a48:	6013      	str	r3, [r2, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	370c      	adds	r7, #12
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bc80      	pop	{r7}
 8007a52:	4770      	bx	lr
 8007a54:	58010000 	.word	0x58010000

08007a58 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007a68:	4b23      	ldr	r3, [pc, #140]	; (8007af8 <SUBGHZSPI_Transmit+0xa0>)
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	00db      	lsls	r3, r3, #3
 8007a70:	1a9b      	subs	r3, r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	0cdb      	lsrs	r3, r3, #19
 8007a76:	2264      	movs	r2, #100	; 0x64
 8007a78:	fb02 f303 	mul.w	r3, r2, r3
 8007a7c:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	609a      	str	r2, [r3, #8]
      break;
 8007a8e:	e008      	b.n	8007aa2 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	3b01      	subs	r3, #1
 8007a94:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007a96:	4b19      	ldr	r3, [pc, #100]	; (8007afc <SUBGHZSPI_Transmit+0xa4>)
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f003 0302 	and.w	r3, r3, #2
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d1ed      	bne.n	8007a7e <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007aa2:	4b17      	ldr	r3, [pc, #92]	; (8007b00 <SUBGHZSPI_Transmit+0xa8>)
 8007aa4:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	78fa      	ldrb	r2, [r7, #3]
 8007aaa:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007aac:	4b12      	ldr	r3, [pc, #72]	; (8007af8 <SUBGHZSPI_Transmit+0xa0>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	0cdb      	lsrs	r3, r3, #19
 8007aba:	2264      	movs	r2, #100	; 0x64
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d105      	bne.n	8007ad4 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	609a      	str	r2, [r3, #8]
      break;
 8007ad2:	e008      	b.n	8007ae6 <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007ada:	4b08      	ldr	r3, [pc, #32]	; (8007afc <SUBGHZSPI_Transmit+0xa4>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d1ed      	bne.n	8007ac2 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8007ae6:	4b05      	ldr	r3, [pc, #20]	; (8007afc <SUBGHZSPI_Transmit+0xa4>)
 8007ae8:	68db      	ldr	r3, [r3, #12]

  return status;
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bc80      	pop	{r7}
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	20000014 	.word	0x20000014
 8007afc:	58010000 	.word	0x58010000
 8007b00:	5801000c 	.word	0x5801000c

08007b04 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b12:	4b25      	ldr	r3, [pc, #148]	; (8007ba8 <SUBGHZSPI_Receive+0xa4>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4613      	mov	r3, r2
 8007b18:	00db      	lsls	r3, r3, #3
 8007b1a:	1a9b      	subs	r3, r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	0cdb      	lsrs	r3, r3, #19
 8007b20:	2264      	movs	r2, #100	; 0x64
 8007b22:	fb02 f303 	mul.w	r3, r2, r3
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d105      	bne.n	8007b3a <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	609a      	str	r2, [r3, #8]
      break;
 8007b38:	e008      	b.n	8007b4c <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3b01      	subs	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007b40:	4b1a      	ldr	r3, [pc, #104]	; (8007bac <SUBGHZSPI_Receive+0xa8>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d1ed      	bne.n	8007b28 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007b4c:	4b18      	ldr	r3, [pc, #96]	; (8007bb0 <SUBGHZSPI_Receive+0xac>)
 8007b4e:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	22ff      	movs	r2, #255	; 0xff
 8007b54:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007b56:	4b14      	ldr	r3, [pc, #80]	; (8007ba8 <SUBGHZSPI_Receive+0xa4>)
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	0cdb      	lsrs	r3, r3, #19
 8007b64:	2264      	movs	r2, #100	; 0x64
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d105      	bne.n	8007b7e <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	609a      	str	r2, [r3, #8]
      break;
 8007b7c:	e008      	b.n	8007b90 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007b84:	4b09      	ldr	r3, [pc, #36]	; (8007bac <SUBGHZSPI_Receive+0xa8>)
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	f003 0301 	and.w	r3, r3, #1
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d1ed      	bne.n	8007b6c <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007b90:	4b06      	ldr	r3, [pc, #24]	; (8007bac <SUBGHZSPI_Receive+0xa8>)
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	701a      	strb	r2, [r3, #0]

  return status;
 8007b9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	bc80      	pop	{r7}
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000014 	.word	0x20000014
 8007bac:	58010000 	.word	0x58010000
 8007bb0:	5801000c 	.word	0x5801000c

08007bb4 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	791b      	ldrb	r3, [r3, #4]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d111      	bne.n	8007be8 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	; (8007bf8 <SUBGHZ_CheckDeviceReady+0x44>)
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	005b      	lsls	r3, r3, #1
 8007bcc:	4413      	add	r3, r2
 8007bce:	00db      	lsls	r3, r3, #3
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007bd4:	f7ff fbaa 	bl	800732c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f9      	bne.n	8007bd8 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007be4:	f7ff fb92 	bl	800730c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f807 	bl	8007bfc <SUBGHZ_WaitOnBusy>
 8007bee:	4603      	mov	r3, r0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20000014 	.word	0x20000014

08007bfc <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b086      	sub	sp, #24
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8007c08:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <SUBGHZ_WaitOnBusy+0x58>)
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	005b      	lsls	r3, r3, #1
 8007c10:	4413      	add	r3, r2
 8007c12:	00db      	lsls	r3, r3, #3
 8007c14:	0d1b      	lsrs	r3, r3, #20
 8007c16:	2264      	movs	r2, #100	; 0x64
 8007c18:	fb02 f303 	mul.w	r3, r2, r3
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007c1e:	f7ff fbb3 	bl	8007388 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007c22:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d105      	bne.n	8007c36 <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2202      	movs	r2, #2
 8007c32:	609a      	str	r2, [r3, #8]
      break;
 8007c34:	e009      	b.n	8007c4a <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007c3c:	f7ff fb92 	bl	8007364 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007c40:	4602      	mov	r2, r0
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	4013      	ands	r3, r2
 8007c46:	2b01      	cmp	r3, #1
 8007c48:	d0e9      	beq.n	8007c1e <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3718      	adds	r7, #24
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	20000014 	.word	0x20000014

08007c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d101      	bne.n	8007c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c66:	2301      	movs	r3, #1
 8007c68:	e049      	b.n	8007cfe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d106      	bne.n	8007c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7fa f94e 	bl	8001f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2202      	movs	r2, #2
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3304      	adds	r3, #4
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f000 fab6 	bl	8008208 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2201      	movs	r2, #1
 8007cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cfc:	2300      	movs	r3, #0
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
	...

08007d08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d001      	beq.n	8007d20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e02e      	b.n	8007d7e <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2202      	movs	r2, #2
 8007d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a16      	ldr	r2, [pc, #88]	; (8007d88 <HAL_TIM_Base_Start+0x80>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d004      	beq.n	8007d3c <HAL_TIM_Base_Start+0x34>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3a:	d115      	bne.n	8007d68 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <HAL_TIM_Base_Start+0x84>)
 8007d44:	4013      	ands	r3, r2
 8007d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b06      	cmp	r3, #6
 8007d4c:	d015      	beq.n	8007d7a <HAL_TIM_Base_Start+0x72>
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d54:	d011      	beq.n	8007d7a <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f042 0201 	orr.w	r2, r2, #1
 8007d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d66:	e008      	b.n	8007d7a <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f042 0201 	orr.w	r2, r2, #1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	e000      	b.n	8007d7c <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3714      	adds	r7, #20
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bc80      	pop	{r7}
 8007d86:	4770      	bx	lr
 8007d88:	40012c00 	.word	0x40012c00
 8007d8c:	00010007 	.word	0x00010007

08007d90 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6a1a      	ldr	r2, [r3, #32]
 8007d9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007da2:	4013      	ands	r3, r2
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d10f      	bne.n	8007dc8 <HAL_TIM_Base_Stop+0x38>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6a1a      	ldr	r2, [r3, #32]
 8007dae:	f240 4344 	movw	r3, #1092	; 0x444
 8007db2:	4013      	ands	r3, r2
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d107      	bne.n	8007dc8 <HAL_TIM_Base_Stop+0x38>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f022 0201 	bic.w	r2, r2, #1
 8007dc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bc80      	pop	{r7}
 8007dda:	4770      	bx	lr

08007ddc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0302 	and.w	r3, r3, #2
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0202 	mvn.w	r2, #2
 8007e08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	699b      	ldr	r3, [r3, #24]
 8007e16:	f003 0303 	and.w	r3, r3, #3
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f9d6 	bl	80081d0 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9c9 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f9d8 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0304 	and.w	r3, r3, #4
 8007e42:	2b04      	cmp	r3, #4
 8007e44:	d122      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0304 	and.w	r3, r3, #4
 8007e50:	2b04      	cmp	r3, #4
 8007e52:	d11b      	bne.n	8007e8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0204 	mvn.w	r2, #4
 8007e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 f9ac 	bl	80081d0 <HAL_TIM_IC_CaptureCallback>
 8007e78:	e005      	b.n	8007e86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 f99f 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f9ae 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	f003 0308 	and.w	r3, r3, #8
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d122      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f003 0308 	and.w	r3, r3, #8
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d11b      	bne.n	8007ee0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f06f 0208 	mvn.w	r2, #8
 8007eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2204      	movs	r2, #4
 8007eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f003 0303 	and.w	r3, r3, #3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f982 	bl	80081d0 <HAL_TIM_IC_CaptureCallback>
 8007ecc:	e005      	b.n	8007eda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f000 f975 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f984 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	f003 0310 	and.w	r3, r3, #16
 8007eea:	2b10      	cmp	r3, #16
 8007eec:	d122      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d11b      	bne.n	8007f34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f06f 0210 	mvn.w	r2, #16
 8007f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2208      	movs	r2, #8
 8007f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	69db      	ldr	r3, [r3, #28]
 8007f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f958 	bl	80081d0 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e005      	b.n	8007f2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f94b 	bl	80081be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 f95a 	bl	80081e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	691b      	ldr	r3, [r3, #16]
 8007f3a:	f003 0301 	and.w	r3, r3, #1
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d10e      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d107      	bne.n	8007f60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f06f 0201 	mvn.w	r2, #1
 8007f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f926 	bl	80081ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6a:	2b80      	cmp	r3, #128	; 0x80
 8007f6c:	d10e      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f78:	2b80      	cmp	r3, #128	; 0x80
 8007f7a:	d107      	bne.n	8007f8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa9f 	bl	80084ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	691b      	ldr	r3, [r3, #16]
 8007f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f9a:	d10e      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa6:	2b80      	cmp	r3, #128	; 0x80
 8007fa8:	d107      	bne.n	8007fba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fa91 	bl	80084dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	691b      	ldr	r3, [r3, #16]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	d10e      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d107      	bne.n	8007fe6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 f907 	bl	80081f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	f003 0320 	and.w	r3, r3, #32
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d10e      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f003 0320 	and.w	r3, r3, #32
 8007ffe:	2b20      	cmp	r3, #32
 8008000:	d107      	bne.n	8008012 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f06f 0220 	mvn.w	r2, #32
 800800a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fa53 	bl	80084b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b084      	sub	sp, #16
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
 8008022:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800802e:	2b01      	cmp	r3, #1
 8008030:	d101      	bne.n	8008036 <HAL_TIM_ConfigClockSource+0x1c>
 8008032:	2302      	movs	r3, #2
 8008034:	e0b6      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x18a>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2202      	movs	r2, #2
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008054:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008058:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008060:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008072:	d03e      	beq.n	80080f2 <HAL_TIM_ConfigClockSource+0xd8>
 8008074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008078:	f200 8087 	bhi.w	800818a <HAL_TIM_ConfigClockSource+0x170>
 800807c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008080:	f000 8086 	beq.w	8008190 <HAL_TIM_ConfigClockSource+0x176>
 8008084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008088:	d87f      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 800808a:	2b70      	cmp	r3, #112	; 0x70
 800808c:	d01a      	beq.n	80080c4 <HAL_TIM_ConfigClockSource+0xaa>
 800808e:	2b70      	cmp	r3, #112	; 0x70
 8008090:	d87b      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 8008092:	2b60      	cmp	r3, #96	; 0x60
 8008094:	d050      	beq.n	8008138 <HAL_TIM_ConfigClockSource+0x11e>
 8008096:	2b60      	cmp	r3, #96	; 0x60
 8008098:	d877      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 800809a:	2b50      	cmp	r3, #80	; 0x50
 800809c:	d03c      	beq.n	8008118 <HAL_TIM_ConfigClockSource+0xfe>
 800809e:	2b50      	cmp	r3, #80	; 0x50
 80080a0:	d873      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 80080a2:	2b40      	cmp	r3, #64	; 0x40
 80080a4:	d058      	beq.n	8008158 <HAL_TIM_ConfigClockSource+0x13e>
 80080a6:	2b40      	cmp	r3, #64	; 0x40
 80080a8:	d86f      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 80080aa:	2b30      	cmp	r3, #48	; 0x30
 80080ac:	d064      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x15e>
 80080ae:	2b30      	cmp	r3, #48	; 0x30
 80080b0:	d86b      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d060      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x15e>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d867      	bhi.n	800818a <HAL_TIM_ConfigClockSource+0x170>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d05c      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x15e>
 80080be:	2b10      	cmp	r3, #16
 80080c0:	d05a      	beq.n	8008178 <HAL_TIM_ConfigClockSource+0x15e>
 80080c2:	e062      	b.n	800818a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80080d4:	f000 f973 	bl	80083be <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080e6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	609a      	str	r2, [r3, #8]
      break;
 80080f0:	e04f      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008102:	f000 f95c 	bl	80083be <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008114:	609a      	str	r2, [r3, #8]
      break;
 8008116:	e03c      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008124:	461a      	mov	r2, r3
 8008126:	f000 f8d1 	bl	80082cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2150      	movs	r1, #80	; 0x50
 8008130:	4618      	mov	r0, r3
 8008132:	f000 f928 	bl	8008386 <TIM_ITRx_SetConfig>
      break;
 8008136:	e02c      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008144:	461a      	mov	r2, r3
 8008146:	f000 f8ef 	bl	8008328 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2160      	movs	r1, #96	; 0x60
 8008150:	4618      	mov	r0, r3
 8008152:	f000 f918 	bl	8008386 <TIM_ITRx_SetConfig>
      break;
 8008156:	e01c      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008164:	461a      	mov	r2, r3
 8008166:	f000 f8b1 	bl	80082cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	2140      	movs	r1, #64	; 0x40
 8008170:	4618      	mov	r0, r3
 8008172:	f000 f908 	bl	8008386 <TIM_ITRx_SetConfig>
      break;
 8008176:	e00c      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f000 f8ff 	bl	8008386 <TIM_ITRx_SetConfig>
      break;
 8008188:	e003      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	e000      	b.n	8008192 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008190:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80081b4:	bf00      	nop
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bc80      	pop	{r7}
 80081bc:	4770      	bx	lr

080081be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081be:	b480      	push	{r7}
 80081c0:	b083      	sub	sp, #12
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081c6:	bf00      	nop
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bc80      	pop	{r7}
 80081ce:	4770      	bx	lr

080081d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081d8:	bf00      	nop
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	bc80      	pop	{r7}
 80081e0:	4770      	bx	lr

080081e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bc80      	pop	{r7}
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr
	...

08008208 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <TIM_Base_SetConfig+0xb8>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d003      	beq.n	8008228 <TIM_Base_SetConfig+0x20>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008226:	d108      	bne.n	800823a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	68fa      	ldr	r2, [r7, #12]
 8008236:	4313      	orrs	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a20      	ldr	r2, [pc, #128]	; (80082c0 <TIM_Base_SetConfig+0xb8>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00b      	beq.n	800825a <TIM_Base_SetConfig+0x52>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008248:	d007      	beq.n	800825a <TIM_Base_SetConfig+0x52>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1d      	ldr	r2, [pc, #116]	; (80082c4 <TIM_Base_SetConfig+0xbc>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d003      	beq.n	800825a <TIM_Base_SetConfig+0x52>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a1c      	ldr	r2, [pc, #112]	; (80082c8 <TIM_Base_SetConfig+0xc0>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d108      	bne.n	800826c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008260:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	4313      	orrs	r3, r2
 800826a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008272:	683b      	ldr	r3, [r7, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	4313      	orrs	r3, r2
 8008278:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	689a      	ldr	r2, [r3, #8]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	4a0b      	ldr	r2, [pc, #44]	; (80082c0 <TIM_Base_SetConfig+0xb8>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d007      	beq.n	80082a8 <TIM_Base_SetConfig+0xa0>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a0a      	ldr	r2, [pc, #40]	; (80082c4 <TIM_Base_SetConfig+0xbc>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d003      	beq.n	80082a8 <TIM_Base_SetConfig+0xa0>
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	4a09      	ldr	r2, [pc, #36]	; (80082c8 <TIM_Base_SetConfig+0xc0>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d103      	bne.n	80082b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	691a      	ldr	r2, [r3, #16]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	615a      	str	r2, [r3, #20]
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bc80      	pop	{r7}
 80082be:	4770      	bx	lr
 80082c0:	40012c00 	.word	0x40012c00
 80082c4:	40014400 	.word	0x40014400
 80082c8:	40014800 	.word	0x40014800

080082cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b087      	sub	sp, #28
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60f8      	str	r0, [r7, #12]
 80082d4:	60b9      	str	r1, [r7, #8]
 80082d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6a1b      	ldr	r3, [r3, #32]
 80082dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6a1b      	ldr	r3, [r3, #32]
 80082e2:	f023 0201 	bic.w	r2, r3, #1
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f023 030a 	bic.w	r3, r3, #10
 8008308:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	697a      	ldr	r2, [r7, #20]
 800831c:	621a      	str	r2, [r3, #32]
}
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	bc80      	pop	{r7}
 8008326:	4770      	bx	lr

08008328 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6a1b      	ldr	r3, [r3, #32]
 8008338:	f023 0210 	bic.w	r2, r3, #16
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	699b      	ldr	r3, [r3, #24]
 8008344:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6a1b      	ldr	r3, [r3, #32]
 800834a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008352:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	031b      	lsls	r3, r3, #12
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	4313      	orrs	r3, r2
 800835c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008364:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	693a      	ldr	r2, [r7, #16]
 800836c:	4313      	orrs	r3, r2
 800836e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	621a      	str	r2, [r3, #32]
}
 800837c:	bf00      	nop
 800837e:	371c      	adds	r7, #28
 8008380:	46bd      	mov	sp, r7
 8008382:	bc80      	pop	{r7}
 8008384:	4770      	bx	lr

08008386 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008386:	b480      	push	{r7}
 8008388:	b085      	sub	sp, #20
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800839c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083a2:	683a      	ldr	r2, [r7, #0]
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f043 0307 	orr.w	r3, r3, #7
 80083ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	609a      	str	r2, [r3, #8]
}
 80083b4:	bf00      	nop
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bc80      	pop	{r7}
 80083bc:	4770      	bx	lr

080083be <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80083be:	b480      	push	{r7}
 80083c0:	b087      	sub	sp, #28
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	607a      	str	r2, [r7, #4]
 80083ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083d8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	021a      	lsls	r2, r3, #8
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	609a      	str	r2, [r3, #8]
}
 80083f2:	bf00      	nop
 80083f4:	371c      	adds	r7, #28
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bc80      	pop	{r7}
 80083fa:	4770      	bx	lr

080083fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800840c:	2b01      	cmp	r3, #1
 800840e:	d101      	bne.n	8008414 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008410:	2302      	movs	r3, #2
 8008412:	e04a      	b.n	80084aa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2202      	movs	r2, #2
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a1e      	ldr	r2, [pc, #120]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d108      	bne.n	8008450 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008444:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a11      	ldr	r2, [pc, #68]	; (80084b4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d004      	beq.n	800847e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d10c      	bne.n	8008498 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008484:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	68ba      	ldr	r2, [r7, #8]
 800848c:	4313      	orrs	r3, r2
 800848e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084a8:	2300      	movs	r3, #0
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bc80      	pop	{r7}
 80084b2:	4770      	bx	lr
 80084b4:	40012c00 	.word	0x40012c00

080084b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bc80      	pop	{r7}
 80084c8:	4770      	bx	lr

080084ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b083      	sub	sp, #12
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084d2:	bf00      	nop
 80084d4:	370c      	adds	r7, #12
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bc80      	pop	{r7}
 80084da:	4770      	bx	lr

080084dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bc80      	pop	{r7}
 80084ec:	4770      	bx	lr

080084ee <LL_RCC_GetUSARTClockSource>:
{
 80084ee:	b480      	push	{r7}
 80084f0:	b083      	sub	sp, #12
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80084f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80084fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	401a      	ands	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	041b      	lsls	r3, r3, #16
 8008506:	4313      	orrs	r3, r2
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr

08008512 <LL_RCC_GetLPUARTClockSource>:
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800851a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800851e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	4013      	ands	r3, r2
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	bc80      	pop	{r7}
 800852e:	4770      	bx	lr

08008530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d101      	bne.n	8008542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	e042      	b.n	80085c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7f9 ffd3 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2224      	movs	r2, #36	; 0x24
 800855e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fc3a 	bl	8008dec <UART_SetConfig>
 8008578:	4603      	mov	r3, r0
 800857a:	2b01      	cmp	r3, #1
 800857c:	d101      	bne.n	8008582 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	e022      	b.n	80085c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008586:	2b00      	cmp	r3, #0
 8008588:	d002      	beq.n	8008590 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fea2 	bl	80092d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800859e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f042 0201 	orr.w	r2, r2, #1
 80085be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 ff28 	bl	8009416 <UART_CheckIdleState>
 80085c6:	4603      	mov	r3, r0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b08a      	sub	sp, #40	; 0x28
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	4613      	mov	r3, r2
 80085dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085e4:	2b20      	cmp	r3, #32
 80085e6:	d137      	bne.n	8008658 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <HAL_UART_Receive_IT+0x24>
 80085ee:	88fb      	ldrh	r3, [r7, #6]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e030      	b.n	800865a <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2200      	movs	r2, #0
 80085fc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a18      	ldr	r2, [pc, #96]	; (8008664 <HAL_UART_Receive_IT+0x94>)
 8008604:	4293      	cmp	r3, r2
 8008606:	d01f      	beq.n	8008648 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008612:	2b00      	cmp	r3, #0
 8008614:	d018      	beq.n	8008648 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	e853 3f00 	ldrex	r3, [r3]
 8008622:	613b      	str	r3, [r7, #16]
   return(result);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	461a      	mov	r2, r3
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	623b      	str	r3, [r7, #32]
 8008636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008638:	69f9      	ldr	r1, [r7, #28]
 800863a:	6a3a      	ldr	r2, [r7, #32]
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	61bb      	str	r3, [r7, #24]
   return(result);
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1e6      	bne.n	8008616 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008648:	88fb      	ldrh	r3, [r7, #6]
 800864a:	461a      	mov	r2, r3
 800864c:	68b9      	ldr	r1, [r7, #8]
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fff8 	bl	8009644 <UART_Start_Receive_IT>
 8008654:	4603      	mov	r3, r0
 8008656:	e000      	b.n	800865a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008658:	2302      	movs	r3, #2
  }
}
 800865a:	4618      	mov	r0, r3
 800865c:	3728      	adds	r7, #40	; 0x28
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	40008000 	.word	0x40008000

08008668 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b08a      	sub	sp, #40	; 0x28
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867c:	2b20      	cmp	r3, #32
 800867e:	d167      	bne.n	8008750 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <HAL_UART_Transmit_DMA+0x24>
 8008686:	88fb      	ldrh	r3, [r7, #6]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d101      	bne.n	8008690 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	e060      	b.n	8008752 <HAL_UART_Transmit_DMA+0xea>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->pTxBuffPtr  = pData;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	68ba      	ldr	r2, [r7, #8]
 8008694:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	88fa      	ldrh	r2, [r7, #6]
 800869a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	88fa      	ldrh	r2, [r7, #6]
 80086a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2221      	movs	r2, #33	; 0x21
 80086b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d028      	beq.n	8008710 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c2:	4a26      	ldr	r2, [pc, #152]	; (800875c <HAL_UART_Transmit_DMA+0xf4>)
 80086c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ca:	4a25      	ldr	r2, [pc, #148]	; (8008760 <HAL_UART_Transmit_DMA+0xf8>)
 80086cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d2:	4a24      	ldr	r2, [pc, #144]	; (8008764 <HAL_UART_Transmit_DMA+0xfc>)
 80086d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086da:	2200      	movs	r2, #0
 80086dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e6:	4619      	mov	r1, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	3328      	adds	r3, #40	; 0x28
 80086ee:	461a      	mov	r2, r3
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	f7fb fa73 	bl	8003bdc <HAL_DMA_Start_IT>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d009      	beq.n	8008710 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2210      	movs	r2, #16
 8008700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2220      	movs	r2, #32
 8008708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	e020      	b.n	8008752 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	2240      	movs	r2, #64	; 0x40
 8008716:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3308      	adds	r3, #8
 800871e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	613b      	str	r3, [r7, #16]
   return(result);
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800872e:	627b      	str	r3, [r7, #36]	; 0x24
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008738:	623a      	str	r2, [r7, #32]
 800873a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	69f9      	ldr	r1, [r7, #28]
 800873e:	6a3a      	ldr	r2, [r7, #32]
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	61bb      	str	r3, [r7, #24]
   return(result);
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e5      	bne.n	8008718 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	e000      	b.n	8008752 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008750:	2302      	movs	r3, #2
  }
}
 8008752:	4618      	mov	r0, r3
 8008754:	3728      	adds	r7, #40	; 0x28
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	080099cf 	.word	0x080099cf
 8008760:	08009a69 	.word	0x08009a69
 8008764:	08009a85 	.word	0x08009a85

08008768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b0ba      	sub	sp, #232	; 0xe8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800878e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008792:	f640 030f 	movw	r3, #2063	; 0x80f
 8008796:	4013      	ands	r3, r2
 8008798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800879c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11b      	bne.n	80087dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80087a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d015      	beq.n	80087dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80087b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087b4:	f003 0320 	and.w	r3, r3, #32
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d105      	bne.n	80087c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d009      	beq.n	80087dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	f000 82e3 	beq.w	8008d98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	4798      	blx	r3
      }
      return;
 80087da:	e2dd      	b.n	8008d98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80087dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 8123 	beq.w	8008a2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80087e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80087ea:	4b8d      	ldr	r3, [pc, #564]	; (8008a20 <HAL_UART_IRQHandler+0x2b8>)
 80087ec:	4013      	ands	r3, r2
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80087f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80087f6:	4b8b      	ldr	r3, [pc, #556]	; (8008a24 <HAL_UART_IRQHandler+0x2bc>)
 80087f8:	4013      	ands	r3, r2
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f000 8116 	beq.w	8008a2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008804:	f003 0301 	and.w	r3, r3, #1
 8008808:	2b00      	cmp	r3, #0
 800880a:	d011      	beq.n	8008830 <HAL_UART_IRQHandler+0xc8>
 800880c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00b      	beq.n	8008830 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2201      	movs	r2, #1
 800881e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008826:	f043 0201 	orr.w	r2, r3, #1
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008834:	f003 0302 	and.w	r3, r3, #2
 8008838:	2b00      	cmp	r3, #0
 800883a:	d011      	beq.n	8008860 <HAL_UART_IRQHandler+0xf8>
 800883c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008840:	f003 0301 	and.w	r3, r3, #1
 8008844:	2b00      	cmp	r3, #0
 8008846:	d00b      	beq.n	8008860 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2202      	movs	r2, #2
 800884e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008856:	f043 0204 	orr.w	r2, r3, #4
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008864:	f003 0304 	and.w	r3, r3, #4
 8008868:	2b00      	cmp	r3, #0
 800886a:	d011      	beq.n	8008890 <HAL_UART_IRQHandler+0x128>
 800886c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00b      	beq.n	8008890 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2204      	movs	r2, #4
 800887e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008886:	f043 0202 	orr.w	r2, r3, #2
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008894:	f003 0308 	and.w	r3, r3, #8
 8008898:	2b00      	cmp	r3, #0
 800889a:	d017      	beq.n	80088cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800889c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088a0:	f003 0320 	and.w	r3, r3, #32
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d105      	bne.n	80088b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80088a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80088ac:	4b5c      	ldr	r3, [pc, #368]	; (8008a20 <HAL_UART_IRQHandler+0x2b8>)
 80088ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2208      	movs	r2, #8
 80088ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c2:	f043 0208 	orr.w	r2, r3, #8
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80088cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d012      	beq.n	80088fe <HAL_UART_IRQHandler+0x196>
 80088d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00c      	beq.n	80088fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088f4:	f043 0220 	orr.w	r2, r3, #32
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008904:	2b00      	cmp	r3, #0
 8008906:	f000 8249 	beq.w	8008d9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800890a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890e:	f003 0320 	and.w	r3, r3, #32
 8008912:	2b00      	cmp	r3, #0
 8008914:	d013      	beq.n	800893e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891a:	f003 0320 	and.w	r3, r3, #32
 800891e:	2b00      	cmp	r3, #0
 8008920:	d105      	bne.n	800892e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d007      	beq.n	800893e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008932:	2b00      	cmp	r3, #0
 8008934:	d003      	beq.n	800893e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008952:	2b40      	cmp	r3, #64	; 0x40
 8008954:	d005      	beq.n	8008962 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800895a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800895e:	2b00      	cmp	r3, #0
 8008960:	d054      	beq.n	8008a0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 ffce 	bl	8009904 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008972:	2b40      	cmp	r3, #64	; 0x40
 8008974:	d146      	bne.n	8008a04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	3308      	adds	r3, #8
 800897c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800898c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	3308      	adds	r3, #8
 800899e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80089a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80089a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80089ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80089b2:	e841 2300 	strex	r3, r2, [r1]
 80089b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80089ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1d9      	bne.n	8008976 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d017      	beq.n	80089fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089d2:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <HAL_UART_IRQHandler+0x2c0>)
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089dc:	4618      	mov	r0, r3
 80089de:	f7fb f9d9 	bl	8003d94 <HAL_DMA_Abort_IT>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d019      	beq.n	8008a1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80089f6:	4610      	mov	r0, r2
 80089f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089fa:	e00f      	b.n	8008a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f9e0 	bl	8008dc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a02:	e00b      	b.n	8008a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f9dc 	bl	8008dc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a0a:	e007      	b.n	8008a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 f9d8 	bl	8008dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8008a1a:	e1bf      	b.n	8008d9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a1c:	bf00      	nop
    return;
 8008a1e:	e1bd      	b.n	8008d9c <HAL_UART_IRQHandler+0x634>
 8008a20:	10000001 	.word	0x10000001
 8008a24:	04000120 	.word	0x04000120
 8008a28:	08009b05 	.word	0x08009b05

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	f040 8153 	bne.w	8008cdc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a3a:	f003 0310 	and.w	r3, r3, #16
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 814c 	beq.w	8008cdc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	f000 8145 	beq.w	8008cdc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2210      	movs	r2, #16
 8008a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a64:	2b40      	cmp	r3, #64	; 0x40
 8008a66:	f040 80bb 	bne.w	8008be0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 818f 	beq.w	8008da0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	f080 8187 	bcs.w	8008da0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f003 0320 	and.w	r3, r3, #32
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f040 8087 	bne.w	8008bbe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1da      	bne.n	8008ab0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	3308      	adds	r3, #8
 8008b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b04:	e853 3f00 	ldrex	r3, [r3]
 8008b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b0c:	f023 0301 	bic.w	r3, r3, #1
 8008b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	3308      	adds	r3, #8
 8008b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e1      	bne.n	8008afa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	3308      	adds	r3, #8
 8008b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b62:	e841 2300 	strex	r3, r2, [r1]
 8008b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d1e3      	bne.n	8008b36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8c:	f023 0310 	bic.w	r3, r3, #16
 8008b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ba6:	e841 2300 	strex	r3, r2, [r1]
 8008baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1e4      	bne.n	8008b7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fb f88d 	bl	8003cd8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2202      	movs	r2, #2
 8008bc2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	b29b      	uxth	r3, r3
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 f8fb 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008bde:	e0df      	b.n	8008da0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bec:	b29b      	uxth	r3, r3
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f000 80d1 	beq.w	8008da4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80cc 	beq.w	8008da4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c14:	e853 3f00 	ldrex	r3, [r3]
 8008c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8008c30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c36:	e841 2300 	strex	r3, r2, [r1]
 8008c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1e4      	bne.n	8008c0c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	3308      	adds	r3, #8
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	623b      	str	r3, [r7, #32]
   return(result);
 8008c52:	6a3b      	ldr	r3, [r7, #32]
 8008c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c58:	f023 0301 	bic.w	r3, r3, #1
 8008c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	3308      	adds	r3, #8
 8008c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c72:	e841 2300 	strex	r3, r2, [r1]
 8008c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d1e1      	bne.n	8008c42 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2220      	movs	r2, #32
 8008c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	e853 3f00 	ldrex	r3, [r3]
 8008c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f023 0310 	bic.w	r3, r3, #16
 8008ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008cb4:	61fb      	str	r3, [r7, #28]
 8008cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb8:	69b9      	ldr	r1, [r7, #24]
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	e841 2300 	strex	r3, r2, [r1]
 8008cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1e4      	bne.n	8008c92 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f87d 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008cda:	e063      	b.n	8008da4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00e      	beq.n	8008d06 <HAL_UART_IRQHandler+0x59e>
 8008ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d008      	beq.n	8008d06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f001 fc5e 	bl	800a5c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d04:	e051      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d014      	beq.n	8008d3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d105      	bne.n	8008d2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d008      	beq.n	8008d3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d03a      	beq.n	8008da8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	4798      	blx	r3
    }
    return;
 8008d3a:	e035      	b.n	8008da8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d009      	beq.n	8008d5c <HAL_UART_IRQHandler+0x5f4>
 8008d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d003      	beq.n	8008d5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 feeb 	bl	8009b30 <UART_EndTransmit_IT>
    return;
 8008d5a:	e026      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d009      	beq.n	8008d7c <HAL_UART_IRQHandler+0x614>
 8008d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d003      	beq.n	8008d7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f001 fc35 	bl	800a5e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d7a:	e016      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d010      	beq.n	8008daa <HAL_UART_IRQHandler+0x642>
 8008d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	da0c      	bge.n	8008daa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 fc1e 	bl	800a5d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d96:	e008      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
      return;
 8008d98:	bf00      	nop
 8008d9a:	e006      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
    return;
 8008d9c:	bf00      	nop
 8008d9e:	e004      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
      return;
 8008da0:	bf00      	nop
 8008da2:	e002      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
      return;
 8008da4:	bf00      	nop
 8008da6:	e000      	b.n	8008daa <HAL_UART_IRQHandler+0x642>
    return;
 8008da8:	bf00      	nop
  }
}
 8008daa:	37e8      	adds	r7, #232	; 0xe8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bc80      	pop	{r7}
 8008dc0:	4770      	bx	lr

08008dc2 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc2:	b480      	push	{r7}
 8008dc4:	b083      	sub	sp, #12
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dca:	bf00      	nop
 8008dcc:	370c      	adds	r7, #12
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	460b      	mov	r3, r1
 8008dde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bc80      	pop	{r7}
 8008de8:	4770      	bx	lr
	...

08008dec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008df0:	b08c      	sub	sp, #48	; 0x30
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	695b      	ldr	r3, [r3, #20]
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	69db      	ldr	r3, [r3, #28]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	4b94      	ldr	r3, [pc, #592]	; (800906c <UART_SetConfig+0x280>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	697a      	ldr	r2, [r7, #20]
 8008e20:	6812      	ldr	r2, [r2, #0]
 8008e22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e24:	430b      	orrs	r3, r1
 8008e26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	68da      	ldr	r2, [r3, #12]
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e3e:	697b      	ldr	r3, [r7, #20]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a89      	ldr	r2, [pc, #548]	; (8009070 <UART_SetConfig+0x284>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d004      	beq.n	8008e58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e54:	4313      	orrs	r3, r2
 8008e56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008e62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008e6c:	430b      	orrs	r3, r1
 8008e6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e76:	f023 010f 	bic.w	r1, r3, #15
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	430a      	orrs	r2, r1
 8008e84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a7a      	ldr	r2, [pc, #488]	; (8009074 <UART_SetConfig+0x288>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d127      	bne.n	8008ee0 <UART_SetConfig+0xf4>
 8008e90:	2003      	movs	r0, #3
 8008e92:	f7ff fb2c 	bl	80084ee <LL_RCC_GetUSARTClockSource>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d81b      	bhi.n	8008ed8 <UART_SetConfig+0xec>
 8008ea0:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <UART_SetConfig+0xbc>)
 8008ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea6:	bf00      	nop
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ec1 	.word	0x08008ec1
 8008eb4:	08008ed1 	.word	0x08008ed1
 8008eb8:	2301      	movs	r3, #1
 8008eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ebe:	e080      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008ec0:	2302      	movs	r3, #2
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ec6:	e07c      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008ec8:	2304      	movs	r3, #4
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ece:	e078      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ed6:	e074      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ede:	e070      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a64      	ldr	r2, [pc, #400]	; (8009078 <UART_SetConfig+0x28c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d138      	bne.n	8008f5c <UART_SetConfig+0x170>
 8008eea:	200c      	movs	r0, #12
 8008eec:	f7ff faff 	bl	80084ee <LL_RCC_GetUSARTClockSource>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8008ef6:	2b0c      	cmp	r3, #12
 8008ef8:	d82c      	bhi.n	8008f54 <UART_SetConfig+0x168>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <UART_SetConfig+0x114>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f35 	.word	0x08008f35
 8008f04:	08008f55 	.word	0x08008f55
 8008f08:	08008f55 	.word	0x08008f55
 8008f0c:	08008f55 	.word	0x08008f55
 8008f10:	08008f45 	.word	0x08008f45
 8008f14:	08008f55 	.word	0x08008f55
 8008f18:	08008f55 	.word	0x08008f55
 8008f1c:	08008f55 	.word	0x08008f55
 8008f20:	08008f3d 	.word	0x08008f3d
 8008f24:	08008f55 	.word	0x08008f55
 8008f28:	08008f55 	.word	0x08008f55
 8008f2c:	08008f55 	.word	0x08008f55
 8008f30:	08008f4d 	.word	0x08008f4d
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f3a:	e042      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f3c:	2302      	movs	r3, #2
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f42:	e03e      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f44:	2304      	movs	r3, #4
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f4a:	e03a      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f4c:	2308      	movs	r3, #8
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f52:	e036      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f5a:	e032      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a43      	ldr	r2, [pc, #268]	; (8009070 <UART_SetConfig+0x284>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d12a      	bne.n	8008fbc <UART_SetConfig+0x1d0>
 8008f66:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8008f6a:	f7ff fad2 	bl	8008512 <LL_RCC_GetLPUARTClockSource>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f74:	d01a      	beq.n	8008fac <UART_SetConfig+0x1c0>
 8008f76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008f7a:	d81b      	bhi.n	8008fb4 <UART_SetConfig+0x1c8>
 8008f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f80:	d00c      	beq.n	8008f9c <UART_SetConfig+0x1b0>
 8008f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f86:	d815      	bhi.n	8008fb4 <UART_SetConfig+0x1c8>
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d003      	beq.n	8008f94 <UART_SetConfig+0x1a8>
 8008f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f90:	d008      	beq.n	8008fa4 <UART_SetConfig+0x1b8>
 8008f92:	e00f      	b.n	8008fb4 <UART_SetConfig+0x1c8>
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f9a:	e012      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fa2:	e00e      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008faa:	e00a      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fb2:	e006      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008fba:	e002      	b.n	8008fc2 <UART_SetConfig+0x1d6>
 8008fbc:	2310      	movs	r3, #16
 8008fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a2a      	ldr	r2, [pc, #168]	; (8009070 <UART_SetConfig+0x284>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	f040 80a4 	bne.w	8009116 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008fd2:	2b08      	cmp	r3, #8
 8008fd4:	d823      	bhi.n	800901e <UART_SetConfig+0x232>
 8008fd6:	a201      	add	r2, pc, #4	; (adr r2, 8008fdc <UART_SetConfig+0x1f0>)
 8008fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fdc:	08009001 	.word	0x08009001
 8008fe0:	0800901f 	.word	0x0800901f
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	0800901f 	.word	0x0800901f
 8008fec:	0800900f 	.word	0x0800900f
 8008ff0:	0800901f 	.word	0x0800901f
 8008ff4:	0800901f 	.word	0x0800901f
 8008ff8:	0800901f 	.word	0x0800901f
 8008ffc:	08009017 	.word	0x08009017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009000:	f7fc fcf0 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8009004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009006:	e010      	b.n	800902a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009008:	4b1c      	ldr	r3, [pc, #112]	; (800907c <UART_SetConfig+0x290>)
 800900a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800900c:	e00d      	b.n	800902a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800900e:	f7fc fc35 	bl	800587c <HAL_RCC_GetSysClockFreq>
 8009012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009014:	e009      	b.n	800902a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800901c:	e005      	b.n	800902a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800901e:	2300      	movs	r3, #0
 8009020:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 8137 	beq.w	80092a0 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <UART_SetConfig+0x294>)
 8009038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800903c:	461a      	mov	r2, r3
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	fbb3 f3f2 	udiv	r3, r3, r2
 8009044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	685a      	ldr	r2, [r3, #4]
 800904a:	4613      	mov	r3, r2
 800904c:	005b      	lsls	r3, r3, #1
 800904e:	4413      	add	r3, r2
 8009050:	69ba      	ldr	r2, [r7, #24]
 8009052:	429a      	cmp	r2, r3
 8009054:	d305      	bcc.n	8009062 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	429a      	cmp	r2, r3
 8009060:	d910      	bls.n	8009084 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009068:	e11a      	b.n	80092a0 <UART_SetConfig+0x4b4>
 800906a:	bf00      	nop
 800906c:	cfff69f3 	.word	0xcfff69f3
 8009070:	40008000 	.word	0x40008000
 8009074:	40013800 	.word	0x40013800
 8009078:	40004400 	.word	0x40004400
 800907c:	00f42400 	.word	0x00f42400
 8009080:	08012b8c 	.word	0x08012b8c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009086:	2200      	movs	r2, #0
 8009088:	60bb      	str	r3, [r7, #8]
 800908a:	60fa      	str	r2, [r7, #12]
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	4a8e      	ldr	r2, [pc, #568]	; (80092cc <UART_SetConfig+0x4e0>)
 8009092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009096:	b29b      	uxth	r3, r3
 8009098:	2200      	movs	r2, #0
 800909a:	603b      	str	r3, [r7, #0]
 800909c:	607a      	str	r2, [r7, #4]
 800909e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090a6:	f7f7 faf3 	bl	8000690 <__aeabi_uldivmod>
 80090aa:	4602      	mov	r2, r0
 80090ac:	460b      	mov	r3, r1
 80090ae:	4610      	mov	r0, r2
 80090b0:	4619      	mov	r1, r3
 80090b2:	f04f 0200 	mov.w	r2, #0
 80090b6:	f04f 0300 	mov.w	r3, #0
 80090ba:	020b      	lsls	r3, r1, #8
 80090bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090c0:	0202      	lsls	r2, r0, #8
 80090c2:	6979      	ldr	r1, [r7, #20]
 80090c4:	6849      	ldr	r1, [r1, #4]
 80090c6:	0849      	lsrs	r1, r1, #1
 80090c8:	2000      	movs	r0, #0
 80090ca:	460c      	mov	r4, r1
 80090cc:	4605      	mov	r5, r0
 80090ce:	eb12 0804 	adds.w	r8, r2, r4
 80090d2:	eb43 0905 	adc.w	r9, r3, r5
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	469a      	mov	sl, r3
 80090de:	4693      	mov	fp, r2
 80090e0:	4652      	mov	r2, sl
 80090e2:	465b      	mov	r3, fp
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fad2 	bl	8000690 <__aeabi_uldivmod>
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	4613      	mov	r3, r2
 80090f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090fa:	d308      	bcc.n	800910e <UART_SetConfig+0x322>
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009102:	d204      	bcs.n	800910e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6a3a      	ldr	r2, [r7, #32]
 800910a:	60da      	str	r2, [r3, #12]
 800910c:	e0c8      	b.n	80092a0 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009114:	e0c4      	b.n	80092a0 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800911e:	d167      	bne.n	80091f0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8009120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009124:	2b08      	cmp	r3, #8
 8009126:	d828      	bhi.n	800917a <UART_SetConfig+0x38e>
 8009128:	a201      	add	r2, pc, #4	; (adr r2, 8009130 <UART_SetConfig+0x344>)
 800912a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912e:	bf00      	nop
 8009130:	08009155 	.word	0x08009155
 8009134:	0800915d 	.word	0x0800915d
 8009138:	08009165 	.word	0x08009165
 800913c:	0800917b 	.word	0x0800917b
 8009140:	0800916b 	.word	0x0800916b
 8009144:	0800917b 	.word	0x0800917b
 8009148:	0800917b 	.word	0x0800917b
 800914c:	0800917b 	.word	0x0800917b
 8009150:	08009173 	.word	0x08009173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009154:	f7fc fc46 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8009158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800915a:	e014      	b.n	8009186 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800915c:	f7fc fc54 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8009160:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009162:	e010      	b.n	8009186 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009164:	4b5a      	ldr	r3, [pc, #360]	; (80092d0 <UART_SetConfig+0x4e4>)
 8009166:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009168:	e00d      	b.n	8009186 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800916a:	f7fc fb87 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009170:	e009      	b.n	8009186 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009176:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009178:	e005      	b.n	8009186 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	f000 8089 	beq.w	80092a0 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009192:	4a4e      	ldr	r2, [pc, #312]	; (80092cc <UART_SetConfig+0x4e0>)
 8009194:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009198:	461a      	mov	r2, r3
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	fbb3 f3f2 	udiv	r3, r3, r2
 80091a0:	005a      	lsls	r2, r3, #1
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	685b      	ldr	r3, [r3, #4]
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	441a      	add	r2, r3
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b4:	6a3b      	ldr	r3, [r7, #32]
 80091b6:	2b0f      	cmp	r3, #15
 80091b8:	d916      	bls.n	80091e8 <UART_SetConfig+0x3fc>
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091c0:	d212      	bcs.n	80091e8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091c2:	6a3b      	ldr	r3, [r7, #32]
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	f023 030f 	bic.w	r3, r3, #15
 80091ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	085b      	lsrs	r3, r3, #1
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	f003 0307 	and.w	r3, r3, #7
 80091d6:	b29a      	uxth	r2, r3
 80091d8:	8bfb      	ldrh	r3, [r7, #30]
 80091da:	4313      	orrs	r3, r2
 80091dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	8bfa      	ldrh	r2, [r7, #30]
 80091e4:	60da      	str	r2, [r3, #12]
 80091e6:	e05b      	b.n	80092a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80091e8:	2301      	movs	r3, #1
 80091ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80091ee:	e057      	b.n	80092a0 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80091f4:	2b08      	cmp	r3, #8
 80091f6:	d828      	bhi.n	800924a <UART_SetConfig+0x45e>
 80091f8:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <UART_SetConfig+0x414>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009225 	.word	0x08009225
 8009204:	0800922d 	.word	0x0800922d
 8009208:	08009235 	.word	0x08009235
 800920c:	0800924b 	.word	0x0800924b
 8009210:	0800923b 	.word	0x0800923b
 8009214:	0800924b 	.word	0x0800924b
 8009218:	0800924b 	.word	0x0800924b
 800921c:	0800924b 	.word	0x0800924b
 8009220:	08009243 	.word	0x08009243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009224:	f7fc fbde 	bl	80059e4 <HAL_RCC_GetPCLK1Freq>
 8009228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800922a:	e014      	b.n	8009256 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800922c:	f7fc fbec 	bl	8005a08 <HAL_RCC_GetPCLK2Freq>
 8009230:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009232:	e010      	b.n	8009256 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009234:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <UART_SetConfig+0x4e4>)
 8009236:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009238:	e00d      	b.n	8009256 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800923a:	f7fc fb1f 	bl	800587c <HAL_RCC_GetSysClockFreq>
 800923e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009240:	e009      	b.n	8009256 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009242:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009246:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009248:	e005      	b.n	8009256 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800924a:	2300      	movs	r3, #0
 800924c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009254:	bf00      	nop
    }

    if (pclk != 0U)
 8009256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009258:	2b00      	cmp	r3, #0
 800925a:	d021      	beq.n	80092a0 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	4a1a      	ldr	r2, [pc, #104]	; (80092cc <UART_SetConfig+0x4e0>)
 8009262:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009266:	461a      	mov	r2, r3
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926a:	fbb3 f2f2 	udiv	r2, r3, r2
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	085b      	lsrs	r3, r3, #1
 8009274:	441a      	add	r2, r3
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	fbb2 f3f3 	udiv	r3, r2, r3
 800927e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009280:	6a3b      	ldr	r3, [r7, #32]
 8009282:	2b0f      	cmp	r3, #15
 8009284:	d909      	bls.n	800929a <UART_SetConfig+0x4ae>
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800928c:	d205      	bcs.n	800929a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800928e:	6a3b      	ldr	r3, [r7, #32]
 8009290:	b29a      	uxth	r2, r3
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	60da      	str	r2, [r3, #12]
 8009298:	e002      	b.n	80092a0 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800929a:	2301      	movs	r3, #1
 800929c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	2201      	movs	r2, #1
 80092ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2200      	movs	r2, #0
 80092b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80092bc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3730      	adds	r7, #48	; 0x30
 80092c4:	46bd      	mov	sp, r7
 80092c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092ca:	bf00      	nop
 80092cc:	08012b8c 	.word	0x08012b8c
 80092d0:	00f42400 	.word	0x00f42400

080092d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	f003 0301 	and.w	r3, r3, #1
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00a      	beq.n	80092fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d00a      	beq.n	8009320 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b00      	cmp	r3, #0
 800932a:	d00a      	beq.n	8009342 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	430a      	orrs	r2, r1
 8009340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009346:	f003 0308 	and.w	r3, r3, #8
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	685b      	ldr	r3, [r3, #4]
 8009354:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009368:	f003 0310 	and.w	r3, r3, #16
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00a      	beq.n	8009386 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	430a      	orrs	r2, r1
 8009384:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00a      	beq.n	80093a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	430a      	orrs	r2, r1
 80093a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d01a      	beq.n	80093ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d2:	d10a      	bne.n	80093ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d00a      	beq.n	800940c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	430a      	orrs	r2, r1
 800940a:	605a      	str	r2, [r3, #4]
  }
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	bc80      	pop	{r7}
 8009414:	4770      	bx	lr

08009416 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009416:	b580      	push	{r7, lr}
 8009418:	b086      	sub	sp, #24
 800941a:	af02      	add	r7, sp, #8
 800941c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009426:	f7f8 fcc7 	bl	8001db8 <HAL_GetTick>
 800942a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0308 	and.w	r3, r3, #8
 8009436:	2b08      	cmp	r3, #8
 8009438:	d10e      	bne.n	8009458 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800943a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800943e:	9300      	str	r3, [sp, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2200      	movs	r2, #0
 8009444:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f832 	bl	80094b2 <UART_WaitOnFlagUntilTimeout>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009454:	2303      	movs	r3, #3
 8009456:	e028      	b.n	80094aa <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0304 	and.w	r3, r3, #4
 8009462:	2b04      	cmp	r3, #4
 8009464:	d10e      	bne.n	8009484 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009466:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 f81c 	bl	80094b2 <UART_WaitOnFlagUntilTimeout>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e012      	b.n	80094aa <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2220      	movs	r2, #32
 8009488:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b09c      	sub	sp, #112	; 0x70
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	60f8      	str	r0, [r7, #12]
 80094ba:	60b9      	str	r1, [r7, #8]
 80094bc:	603b      	str	r3, [r7, #0]
 80094be:	4613      	mov	r3, r2
 80094c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094c2:	e0a9      	b.n	8009618 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ca:	f000 80a5 	beq.w	8009618 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ce:	f7f8 fc73 	bl	8001db8 <HAL_GetTick>
 80094d2:	4602      	mov	r2, r0
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	1ad3      	subs	r3, r2, r3
 80094d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80094da:	429a      	cmp	r2, r3
 80094dc:	d302      	bcc.n	80094e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80094de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d140      	bne.n	8009566 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80094f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80094f8:	667b      	str	r3, [r7, #100]	; 0x64
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009502:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009504:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009506:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009508:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009510:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1e6      	bne.n	80094e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	3308      	adds	r3, #8
 800951c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009520:	e853 3f00 	ldrex	r3, [r3]
 8009524:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009528:	f023 0301 	bic.w	r3, r3, #1
 800952c:	663b      	str	r3, [r7, #96]	; 0x60
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	3308      	adds	r3, #8
 8009534:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009536:	64ba      	str	r2, [r7, #72]	; 0x48
 8009538:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800953c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800953e:	e841 2300 	strex	r3, r2, [r1]
 8009542:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1e5      	bne.n	8009516 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2220      	movs	r2, #32
 800954e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2220      	movs	r2, #32
 8009556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	2200      	movs	r2, #0
 800955e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8009562:	2303      	movs	r3, #3
 8009564:	e069      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f003 0304 	and.w	r3, r3, #4
 8009570:	2b00      	cmp	r3, #0
 8009572:	d051      	beq.n	8009618 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800957e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009582:	d149      	bne.n	8009618 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800958c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	e853 3f00 	ldrex	r3, [r3]
 800959a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800959c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80095ac:	637b      	str	r3, [r7, #52]	; 0x34
 80095ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095b4:	e841 2300 	strex	r3, r2, [r1]
 80095b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d1e6      	bne.n	800958e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	3308      	adds	r3, #8
 80095c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	613b      	str	r3, [r7, #16]
   return(result);
 80095d0:	693b      	ldr	r3, [r7, #16]
 80095d2:	f023 0301 	bic.w	r3, r3, #1
 80095d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3308      	adds	r3, #8
 80095de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80095e0:	623a      	str	r2, [r7, #32]
 80095e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e4:	69f9      	ldr	r1, [r7, #28]
 80095e6:	6a3a      	ldr	r2, [r7, #32]
 80095e8:	e841 2300 	strex	r3, r2, [r1]
 80095ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1e5      	bne.n	80095c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2220      	movs	r2, #32
 8009600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009614:	2303      	movs	r3, #3
 8009616:	e010      	b.n	800963a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	4013      	ands	r3, r2
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	429a      	cmp	r2, r3
 8009626:	bf0c      	ite	eq
 8009628:	2301      	moveq	r3, #1
 800962a:	2300      	movne	r3, #0
 800962c:	b2db      	uxtb	r3, r3
 800962e:	461a      	mov	r2, r3
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	429a      	cmp	r2, r3
 8009634:	f43f af46 	beq.w	80094c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3770      	adds	r7, #112	; 0x70
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}
	...

08009644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009644:	b480      	push	{r7}
 8009646:	b0a3      	sub	sp, #140	; 0x8c
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	4613      	mov	r3, r2
 8009650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	88fa      	ldrh	r2, [r7, #6]
 800965c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	88fa      	ldrh	r2, [r7, #6]
 8009664:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009676:	d10e      	bne.n	8009696 <UART_Start_Receive_IT+0x52>
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <UART_Start_Receive_IT+0x48>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800968a:	e02d      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	22ff      	movs	r2, #255	; 0xff
 8009690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8009694:	e028      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10d      	bne.n	80096ba <UART_Start_Receive_IT+0x76>
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	691b      	ldr	r3, [r3, #16]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <UART_Start_Receive_IT+0x6c>
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	22ff      	movs	r2, #255	; 0xff
 80096aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096ae:	e01b      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	227f      	movs	r2, #127	; 0x7f
 80096b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096b8:	e016      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096c2:	d10d      	bne.n	80096e0 <UART_Start_Receive_IT+0x9c>
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	691b      	ldr	r3, [r3, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d104      	bne.n	80096d6 <UART_Start_Receive_IT+0x92>
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	227f      	movs	r2, #127	; 0x7f
 80096d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096d4:	e008      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	223f      	movs	r2, #63	; 0x3f
 80096da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80096de:	e003      	b.n	80096e8 <UART_Start_Receive_IT+0xa4>
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2222      	movs	r2, #34	; 0x22
 80096f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	3308      	adds	r3, #8
 80096fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009702:	e853 3f00 	ldrex	r3, [r3]
 8009706:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009708:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800970a:	f043 0301 	orr.w	r3, r3, #1
 800970e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3308      	adds	r3, #8
 8009718:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800971c:	673a      	str	r2, [r7, #112]	; 0x70
 800971e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8009722:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800972a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e3      	bne.n	80096f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009734:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009738:	d14f      	bne.n	80097da <UART_Start_Receive_IT+0x196>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009740:	88fa      	ldrh	r2, [r7, #6]
 8009742:	429a      	cmp	r2, r3
 8009744:	d349      	bcc.n	80097da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800974e:	d107      	bne.n	8009760 <UART_Start_Receive_IT+0x11c>
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	691b      	ldr	r3, [r3, #16]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d103      	bne.n	8009760 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4a46      	ldr	r2, [pc, #280]	; (8009874 <UART_Start_Receive_IT+0x230>)
 800975c:	675a      	str	r2, [r3, #116]	; 0x74
 800975e:	e002      	b.n	8009766 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4a45      	ldr	r2, [pc, #276]	; (8009878 <UART_Start_Receive_IT+0x234>)
 8009764:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	691b      	ldr	r3, [r3, #16]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d01a      	beq.n	80097a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009774:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009776:	e853 3f00 	ldrex	r3, [r3]
 800977a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800977c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800977e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	461a      	mov	r2, r3
 800978c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009792:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800979e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e4      	bne.n	800976e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097ba:	67fb      	str	r3, [r7, #124]	; 0x7c
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80097c4:	64ba      	str	r2, [r7, #72]	; 0x48
 80097c6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80097ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80097d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_Start_Receive_IT+0x160>
 80097d8:	e046      	b.n	8009868 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097e2:	d107      	bne.n	80097f4 <UART_Start_Receive_IT+0x1b0>
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d103      	bne.n	80097f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4a23      	ldr	r2, [pc, #140]	; (800987c <UART_Start_Receive_IT+0x238>)
 80097f0:	675a      	str	r2, [r3, #116]	; 0x74
 80097f2:	e002      	b.n	80097fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	4a22      	ldr	r2, [pc, #136]	; (8009880 <UART_Start_Receive_IT+0x23c>)
 80097f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d019      	beq.n	8009836 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	e853 3f00 	ldrex	r3, [r3]
 800980e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8009816:	677b      	str	r3, [r7, #116]	; 0x74
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	461a      	mov	r2, r3
 800981e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009820:	637b      	str	r3, [r7, #52]	; 0x34
 8009822:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009824:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009828:	e841 2300 	strex	r3, r2, [r1]
 800982c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	2b00      	cmp	r3, #0
 8009832:	d1e6      	bne.n	8009802 <UART_Start_Receive_IT+0x1be>
 8009834:	e018      	b.n	8009868 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	613b      	str	r3, [r7, #16]
   return(result);
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	f043 0320 	orr.w	r3, r3, #32
 800984a:	67bb      	str	r3, [r7, #120]	; 0x78
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	461a      	mov	r2, r3
 8009852:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009854:	623b      	str	r3, [r7, #32]
 8009856:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009858:	69f9      	ldr	r1, [r7, #28]
 800985a:	6a3a      	ldr	r2, [r7, #32]
 800985c:	e841 2300 	strex	r3, r2, [r1]
 8009860:	61bb      	str	r3, [r7, #24]
   return(result);
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d1e6      	bne.n	8009836 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	378c      	adds	r7, #140	; 0x8c
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr
 8009874:	0800a259 	.word	0x0800a259
 8009878:	08009ef9 	.word	0x08009ef9
 800987c:	08009d41 	.word	0x08009d41
 8009880:	08009b89 	.word	0x08009b89

08009884 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009884:	b480      	push	{r7}
 8009886:	b08f      	sub	sp, #60	; 0x3c
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	61fb      	str	r3, [r7, #28]
   return(result);
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80098a0:	637b      	str	r3, [r7, #52]	; 0x34
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	461a      	mov	r2, r3
 80098a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80098ac:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80098b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80098b2:	e841 2300 	strex	r3, r2, [r1]
 80098b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1e6      	bne.n	800988c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3308      	adds	r3, #8
 80098c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80098d4:	633b      	str	r3, [r7, #48]	; 0x30
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3308      	adds	r3, #8
 80098dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098de:	61ba      	str	r2, [r7, #24]
 80098e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e2:	6979      	ldr	r1, [r7, #20]
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	613b      	str	r3, [r7, #16]
   return(result);
 80098ec:	693b      	ldr	r3, [r7, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e5      	bne.n	80098be <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2220      	movs	r2, #32
 80098f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80098fa:	bf00      	nop
 80098fc:	373c      	adds	r7, #60	; 0x3c
 80098fe:	46bd      	mov	sp, r7
 8009900:	bc80      	pop	{r7}
 8009902:	4770      	bx	lr

08009904 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009904:	b480      	push	{r7}
 8009906:	b095      	sub	sp, #84	; 0x54
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009920:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800992a:	643b      	str	r3, [r7, #64]	; 0x40
 800992c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800992e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009930:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009932:	e841 2300 	strex	r3, r2, [r1]
 8009936:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1e6      	bne.n	800990c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	3308      	adds	r3, #8
 8009944:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	e853 3f00 	ldrex	r3, [r3]
 800994c:	61fb      	str	r3, [r7, #28]
   return(result);
 800994e:	69fb      	ldr	r3, [r7, #28]
 8009950:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009954:	f023 0301 	bic.w	r3, r3, #1
 8009958:	64bb      	str	r3, [r7, #72]	; 0x48
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	3308      	adds	r3, #8
 8009960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009962:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800996a:	e841 2300 	strex	r3, r2, [r1]
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d1e3      	bne.n	800993e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800997a:	2b01      	cmp	r3, #1
 800997c:	d118      	bne.n	80099b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	e853 3f00 	ldrex	r3, [r3]
 800998a:	60bb      	str	r3, [r7, #8]
   return(result);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 0310 	bic.w	r3, r3, #16
 8009992:	647b      	str	r3, [r7, #68]	; 0x44
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800999c:	61bb      	str	r3, [r7, #24]
 800999e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099a0:	6979      	ldr	r1, [r7, #20]
 80099a2:	69ba      	ldr	r2, [r7, #24]
 80099a4:	e841 2300 	strex	r3, r2, [r1]
 80099a8:	613b      	str	r3, [r7, #16]
   return(result);
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d1e6      	bne.n	800997e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2220      	movs	r2, #32
 80099b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80099c4:	bf00      	nop
 80099c6:	3754      	adds	r7, #84	; 0x54
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bc80      	pop	{r7}
 80099cc:	4770      	bx	lr

080099ce <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80099ce:	b580      	push	{r7, lr}
 80099d0:	b090      	sub	sp, #64	; 0x40
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f003 0320 	and.w	r3, r3, #32
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d137      	bne.n	8009a5a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 80099ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ec:	2200      	movs	r2, #0
 80099ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3308      	adds	r3, #8
 80099f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fc:	e853 3f00 	ldrex	r3, [r3]
 8009a00:	623b      	str	r3, [r7, #32]
   return(result);
 8009a02:	6a3b      	ldr	r3, [r7, #32]
 8009a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a08:	63bb      	str	r3, [r7, #56]	; 0x38
 8009a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	3308      	adds	r3, #8
 8009a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a12:	633a      	str	r2, [r7, #48]	; 0x30
 8009a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e5      	bne.n	80099f2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	e853 3f00 	ldrex	r3, [r3]
 8009a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a48:	69b9      	ldr	r1, [r7, #24]
 8009a4a:	69fa      	ldr	r2, [r7, #28]
 8009a4c:	e841 2300 	strex	r3, r2, [r1]
 8009a50:	617b      	str	r3, [r7, #20]
   return(result);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1e6      	bne.n	8009a26 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a58:	e002      	b.n	8009a60 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009a5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009a5c:	f7f8 feaa 	bl	80027b4 <HAL_UART_TxCpltCallback>
}
 8009a60:	bf00      	nop
 8009a62:	3740      	adds	r7, #64	; 0x40
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a74:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009a76:	68f8      	ldr	r0, [r7, #12]
 8009a78:	f7ff f99a 	bl	8008db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009a7c:	bf00      	nop
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b086      	sub	sp, #24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a90:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a98:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009aa0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aac:	2b80      	cmp	r3, #128	; 0x80
 8009aae:	d109      	bne.n	8009ac4 <UART_DMAError+0x40>
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b21      	cmp	r3, #33	; 0x21
 8009ab4:	d106      	bne.n	8009ac4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8009abe:	6978      	ldr	r0, [r7, #20]
 8009ac0:	f7ff fee0 	bl	8009884 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ace:	2b40      	cmp	r3, #64	; 0x40
 8009ad0:	d109      	bne.n	8009ae6 <UART_DMAError+0x62>
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	2b22      	cmp	r3, #34	; 0x22
 8009ad6:	d106      	bne.n	8009ae6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	2200      	movs	r2, #0
 8009adc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8009ae0:	6978      	ldr	r0, [r7, #20]
 8009ae2:	f7ff ff0f 	bl	8009904 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aec:	f043 0210 	orr.w	r2, r3, #16
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009af6:	6978      	ldr	r0, [r7, #20]
 8009af8:	f7ff f963 	bl	8008dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009afc:	bf00      	nop
 8009afe:	3718      	adds	r7, #24
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b10:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b22:	68f8      	ldr	r0, [r7, #12]
 8009b24:	f7ff f94d 	bl	8008dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b28:	bf00      	nop
 8009b2a:	3710      	adds	r7, #16
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b088      	sub	sp, #32
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b46:	68bb      	ldr	r3, [r7, #8]
 8009b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b4c:	61fb      	str	r3, [r7, #28]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	61bb      	str	r3, [r7, #24]
 8009b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5a:	6979      	ldr	r1, [r7, #20]
 8009b5c:	69ba      	ldr	r2, [r7, #24]
 8009b5e:	e841 2300 	strex	r3, r2, [r1]
 8009b62:	613b      	str	r3, [r7, #16]
   return(result);
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d1e6      	bne.n	8009b38 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2200      	movs	r2, #0
 8009b76:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f7f8 fe1b 	bl	80027b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b7e:	bf00      	nop
 8009b80:	3720      	adds	r7, #32
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b09c      	sub	sp, #112	; 0x70
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009b96:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ba0:	2b22      	cmp	r3, #34	; 0x22
 8009ba2:	f040 80be 	bne.w	8009d22 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009bb0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009bb4:	b2d9      	uxtb	r1, r3
 8009bb6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc0:	400a      	ands	r2, r1
 8009bc2:	b2d2      	uxtb	r2, r2
 8009bc4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bca:	1c5a      	adds	r2, r3, #1
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	3b01      	subs	r3, #1
 8009bda:	b29a      	uxth	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be8:	b29b      	uxth	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f040 80a1 	bne.w	8009d32 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bf8:	e853 3f00 	ldrex	r3, [r3]
 8009bfc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c04:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c10:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c12:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c16:	e841 2300 	strex	r3, r2, [r1]
 8009c1a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d1e6      	bne.n	8009bf0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2c:	e853 3f00 	ldrex	r3, [r3]
 8009c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c34:	f023 0301 	bic.w	r3, r3, #1
 8009c38:	667b      	str	r3, [r7, #100]	; 0x64
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	3308      	adds	r3, #8
 8009c40:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009c42:	647a      	str	r2, [r7, #68]	; 0x44
 8009c44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c4a:	e841 2300 	strex	r3, r2, [r1]
 8009c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d1e5      	bne.n	8009c22 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2220      	movs	r2, #32
 8009c5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a33      	ldr	r2, [pc, #204]	; (8009d3c <UART_RxISR_8BIT+0x1b4>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d01f      	beq.n	8009cb4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d018      	beq.n	8009cb4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009c96:	663b      	str	r3, [r7, #96]	; 0x60
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	461a      	mov	r2, r3
 8009c9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8009ca2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ca8:	e841 2300 	strex	r3, r2, [r1]
 8009cac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e6      	bne.n	8009c82 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d12e      	bne.n	8009d1a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc8:	693b      	ldr	r3, [r7, #16]
 8009cca:	e853 3f00 	ldrex	r3, [r3]
 8009cce:	60fb      	str	r3, [r7, #12]
   return(result);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f023 0310 	bic.w	r3, r3, #16
 8009cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ce0:	61fb      	str	r3, [r7, #28]
 8009ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce4:	69b9      	ldr	r1, [r7, #24]
 8009ce6:	69fa      	ldr	r2, [r7, #28]
 8009ce8:	e841 2300 	strex	r3, r2, [r1]
 8009cec:	617b      	str	r3, [r7, #20]
   return(result);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1e6      	bne.n	8009cc2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f003 0310 	and.w	r3, r3, #16
 8009cfe:	2b10      	cmp	r3, #16
 8009d00:	d103      	bne.n	8009d0a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	2210      	movs	r2, #16
 8009d08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009d10:	4619      	mov	r1, r3
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff f85e 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009d18:	e00b      	b.n	8009d32 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f7f8 fd60 	bl	80027e0 <HAL_UART_RxCpltCallback>
}
 8009d20:	e007      	b.n	8009d32 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	699a      	ldr	r2, [r3, #24]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f042 0208 	orr.w	r2, r2, #8
 8009d30:	619a      	str	r2, [r3, #24]
}
 8009d32:	bf00      	nop
 8009d34:	3770      	adds	r7, #112	; 0x70
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	40008000 	.word	0x40008000

08009d40 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b09c      	sub	sp, #112	; 0x70
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009d4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009d58:	2b22      	cmp	r3, #34	; 0x22
 8009d5a:	f040 80be 	bne.w	8009eda <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d6c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8009d6e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8009d72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8009d76:	4013      	ands	r3, r2
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009d7c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d82:	1c9a      	adds	r2, r3, #2
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	3b01      	subs	r3, #1
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	f040 80a1 	bne.w	8009eea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009db0:	e853 3f00 	ldrex	r3, [r3]
 8009db4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009dbc:	667b      	str	r3, [r7, #100]	; 0x64
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8009dc8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009dcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dce:	e841 2300 	strex	r3, r2, [r1]
 8009dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1e6      	bne.n	8009da8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	3308      	adds	r3, #8
 8009de0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009de4:	e853 3f00 	ldrex	r3, [r3]
 8009de8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dec:	f023 0301 	bic.w	r3, r3, #1
 8009df0:	663b      	str	r3, [r7, #96]	; 0x60
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	3308      	adds	r3, #8
 8009df8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dfa:	643a      	str	r2, [r7, #64]	; 0x40
 8009dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dfe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009e00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e02:	e841 2300 	strex	r3, r2, [r1]
 8009e06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d1e5      	bne.n	8009dda <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2220      	movs	r2, #32
 8009e12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	4a33      	ldr	r2, [pc, #204]	; (8009ef4 <UART_RxISR_16BIT+0x1b4>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d01f      	beq.n	8009e6c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d018      	beq.n	8009e6c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e40:	6a3b      	ldr	r3, [r7, #32]
 8009e42:	e853 3f00 	ldrex	r3, [r3]
 8009e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e48:	69fb      	ldr	r3, [r7, #28]
 8009e4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	461a      	mov	r2, r3
 8009e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e5a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e60:	e841 2300 	strex	r3, r2, [r1]
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1e6      	bne.n	8009e3a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d12e      	bne.n	8009ed2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2200      	movs	r2, #0
 8009e78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	f023 0310 	bic.w	r3, r3, #16
 8009e8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6979      	ldr	r1, [r7, #20]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e6      	bne.n	8009e7a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	69db      	ldr	r3, [r3, #28]
 8009eb2:	f003 0310 	and.w	r3, r3, #16
 8009eb6:	2b10      	cmp	r3, #16
 8009eb8:	d103      	bne.n	8009ec2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2210      	movs	r2, #16
 8009ec0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009ec8:	4619      	mov	r1, r3
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f7fe ff82 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009ed0:	e00b      	b.n	8009eea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f7f8 fc84 	bl	80027e0 <HAL_UART_RxCpltCallback>
}
 8009ed8:	e007      	b.n	8009eea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	699a      	ldr	r2, [r3, #24]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0208 	orr.w	r2, r2, #8
 8009ee8:	619a      	str	r2, [r3, #24]
}
 8009eea:	bf00      	nop
 8009eec:	3770      	adds	r7, #112	; 0x70
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop
 8009ef4:	40008000 	.word	0x40008000

08009ef8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b0ac      	sub	sp, #176	; 0xb0
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009f06:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	689b      	ldr	r3, [r3, #8]
 8009f24:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009f2e:	2b22      	cmp	r3, #34	; 0x22
 8009f30:	f040 8182 	bne.w	800a238 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009f3a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009f3e:	e125      	b.n	800a18c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009f4a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8009f4e:	b2d9      	uxtb	r1, r3
 8009f50:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8009f54:	b2da      	uxtb	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f5a:	400a      	ands	r2, r1
 8009f5c:	b2d2      	uxtb	r2, r2
 8009f5e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f64:	1c5a      	adds	r2, r3, #1
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	3b01      	subs	r3, #1
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	69db      	ldr	r3, [r3, #28]
 8009f82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009f86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f8a:	f003 0307 	and.w	r3, r3, #7
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d053      	beq.n	800a03a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009f92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f96:	f003 0301 	and.w	r3, r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d011      	beq.n	8009fc2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00b      	beq.n	8009fc2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb8:	f043 0201 	orr.w	r2, r3, #1
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009fc6:	f003 0302 	and.w	r3, r3, #2
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d011      	beq.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009fd2:	f003 0301 	and.w	r3, r3, #1
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00b      	beq.n	8009ff2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fe8:	f043 0204 	orr.w	r2, r3, #4
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8009ffe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a002:	f003 0301 	and.w	r3, r3, #1
 800a006:	2b00      	cmp	r3, #0
 800a008:	d00b      	beq.n	800a022 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2204      	movs	r2, #4
 800a010:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a018:	f043 0202 	orr.w	r2, r3, #2
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d006      	beq.n	800a03a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7fe fec8 	bl	8008dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a040:	b29b      	uxth	r3, r3
 800a042:	2b00      	cmp	r3, #0
 800a044:	f040 80a2 	bne.w	800a18c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a04e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a050:	e853 3f00 	ldrex	r3, [r3]
 800a054:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800a056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a058:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a05c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	461a      	mov	r2, r3
 800a066:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a06a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a06c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800a070:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a072:	e841 2300 	strex	r3, r2, [r1]
 800a076:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800a078:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d1e4      	bne.n	800a048 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3308      	adds	r3, #8
 800a084:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a086:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a088:	e853 3f00 	ldrex	r3, [r3]
 800a08c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800a08e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	3308      	adds	r3, #8
 800a0a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a0a6:	66ba      	str	r2, [r7, #104]	; 0x68
 800a0a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800a0ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0ae:	e841 2300 	strex	r3, r2, [r1]
 800a0b2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a0b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1e1      	bne.n	800a07e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2220      	movs	r2, #32
 800a0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a5f      	ldr	r2, [pc, #380]	; (800a250 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d021      	beq.n	800a11c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01a      	beq.n	800a11c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a0ee:	e853 3f00 	ldrex	r3, [r3]
 800a0f2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800a0f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a0fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a108:	657b      	str	r3, [r7, #84]	; 0x54
 800a10a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a10e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a110:	e841 2300 	strex	r3, r2, [r1]
 800a114:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1e4      	bne.n	800a0e6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a120:	2b01      	cmp	r3, #1
 800a122:	d130      	bne.n	800a186 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a132:	e853 3f00 	ldrex	r3, [r3]
 800a136:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a13a:	f023 0310 	bic.w	r3, r3, #16
 800a13e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a14c:	643b      	str	r3, [r7, #64]	; 0x40
 800a14e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a154:	e841 2300 	strex	r3, r2, [r1]
 800a158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d1e4      	bne.n	800a12a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	69db      	ldr	r3, [r3, #28]
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	2b10      	cmp	r3, #16
 800a16c:	d103      	bne.n	800a176 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	2210      	movs	r2, #16
 800a174:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7fe fe28 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
 800a184:	e002      	b.n	800a18c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7f8 fb2a 	bl	80027e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a18c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800a190:	2b00      	cmp	r3, #0
 800a192:	d006      	beq.n	800a1a2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800a194:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a198:	f003 0320 	and.w	r3, r3, #32
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	f47f aecf 	bne.w	8009f40 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a1a8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a1ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d049      	beq.n	800a248 <UART_RxISR_8BIT_FIFOEN+0x350>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d242      	bcs.n	800a248 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	e853 3f00 	ldrex	r3, [r3]
 800a1d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a1e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ee:	e841 2300 	strex	r3, r2, [r1]
 800a1f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d1e3      	bne.n	800a1c2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a15      	ldr	r2, [pc, #84]	; (800a254 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800a1fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	e853 3f00 	ldrex	r3, [r3]
 800a20c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	f043 0320 	orr.w	r3, r3, #32
 800a214:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	461a      	mov	r2, r3
 800a21e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a222:	61bb      	str	r3, [r7, #24]
 800a224:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a226:	6979      	ldr	r1, [r7, #20]
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	e841 2300 	strex	r3, r2, [r1]
 800a22e:	613b      	str	r3, [r7, #16]
   return(result);
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d1e4      	bne.n	800a200 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a236:	e007      	b.n	800a248 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	699a      	ldr	r2, [r3, #24]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f042 0208 	orr.w	r2, r2, #8
 800a246:	619a      	str	r2, [r3, #24]
}
 800a248:	bf00      	nop
 800a24a:	37b0      	adds	r7, #176	; 0xb0
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}
 800a250:	40008000 	.word	0x40008000
 800a254:	08009b89 	.word	0x08009b89

0800a258 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b0ae      	sub	sp, #184	; 0xb8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a266:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a28e:	2b22      	cmp	r3, #34	; 0x22
 800a290:	f040 8186 	bne.w	800a5a0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a29a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a29e:	e129      	b.n	800a4f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800a2b2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800a2b6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2c2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2c8:	1c9a      	adds	r2, r3, #2
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a2d4:	b29b      	uxth	r3, r3
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	b29a      	uxth	r2, r3
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	69db      	ldr	r3, [r3, #28]
 800a2e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800a2ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2ee:	f003 0307 	and.w	r3, r3, #7
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d053      	beq.n	800a39e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a2f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2fa:	f003 0301 	and.w	r3, r3, #1
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d011      	beq.n	800a326 <UART_RxISR_16BIT_FIFOEN+0xce>
 800a302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00b      	beq.n	800a326 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	2201      	movs	r2, #1
 800a314:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a31c:	f043 0201 	orr.w	r2, r3, #1
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a326:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d011      	beq.n	800a356 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800a332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a336:	f003 0301 	and.w	r3, r3, #1
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d00b      	beq.n	800a356 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2202      	movs	r2, #2
 800a344:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a34c:	f043 0204 	orr.w	r2, r3, #4
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a35a:	f003 0304 	and.w	r3, r3, #4
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d011      	beq.n	800a386 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800a362:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d00b      	beq.n	800a386 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2204      	movs	r2, #4
 800a374:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a37c:	f043 0202 	orr.w	r2, r3, #2
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d006      	beq.n	800a39e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7fe fd16 	bl	8008dc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2200      	movs	r2, #0
 800a39a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	f040 80a4 	bne.w	800a4f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a3ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	461a      	mov	r2, r3
 800a3ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a3ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a3d2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a3d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a3da:	e841 2300 	strex	r3, r2, [r1]
 800a3de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a3e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d1e2      	bne.n	800a3ac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3f0:	e853 3f00 	ldrex	r3, [r3]
 800a3f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a3f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a3f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3fc:	f023 0301 	bic.w	r3, r3, #1
 800a400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3308      	adds	r3, #8
 800a40a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a40e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a416:	e841 2300 	strex	r3, r2, [r1]
 800a41a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a41c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d1e1      	bne.n	800a3e6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2220      	movs	r2, #32
 800a426:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a5f      	ldr	r2, [pc, #380]	; (800a5b8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d021      	beq.n	800a484 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d01a      	beq.n	800a484 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a456:	e853 3f00 	ldrex	r3, [r3]
 800a45a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a45c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a45e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a462:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a470:	65bb      	str	r3, [r7, #88]	; 0x58
 800a472:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a474:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a476:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a478:	e841 2300 	strex	r3, r2, [r1]
 800a47c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a47e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a480:	2b00      	cmp	r3, #0
 800a482:	d1e4      	bne.n	800a44e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d130      	bne.n	800a4ee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49a:	e853 3f00 	ldrex	r3, [r3]
 800a49e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4a2:	f023 0310 	bic.w	r3, r3, #16
 800a4a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4bc:	e841 2300 	strex	r3, r2, [r1]
 800a4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d1e4      	bne.n	800a492 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	69db      	ldr	r3, [r3, #28]
 800a4ce:	f003 0310 	and.w	r3, r3, #16
 800a4d2:	2b10      	cmp	r3, #16
 800a4d4:	d103      	bne.n	800a4de <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	2210      	movs	r2, #16
 800a4dc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7fe fc74 	bl	8008dd4 <HAL_UARTEx_RxEventCallback>
 800a4ec:	e002      	b.n	800a4f4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7f8 f976 	bl	80027e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800a4f4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d006      	beq.n	800a50a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800a4fc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a500:	f003 0320 	and.w	r3, r3, #32
 800a504:	2b00      	cmp	r3, #0
 800a506:	f47f aecb 	bne.w	800a2a0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a510:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800a514:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d049      	beq.n	800a5b0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a522:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800a526:	429a      	cmp	r2, r3
 800a528:	d242      	bcs.n	800a5b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3308      	adds	r3, #8
 800a530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	623b      	str	r3, [r7, #32]
   return(result);
 800a53a:	6a3b      	ldr	r3, [r7, #32]
 800a53c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a540:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	3308      	adds	r3, #8
 800a54a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a54e:	633a      	str	r2, [r7, #48]	; 0x30
 800a550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a556:	e841 2300 	strex	r3, r2, [r1]
 800a55a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1e3      	bne.n	800a52a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	4a15      	ldr	r2, [pc, #84]	; (800a5bc <UART_RxISR_16BIT_FIFOEN+0x364>)
 800a566:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	e853 3f00 	ldrex	r3, [r3]
 800a574:	60fb      	str	r3, [r7, #12]
   return(result);
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f043 0320 	orr.w	r3, r3, #32
 800a57c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	461a      	mov	r2, r3
 800a586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a58a:	61fb      	str	r3, [r7, #28]
 800a58c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a58e:	69b9      	ldr	r1, [r7, #24]
 800a590:	69fa      	ldr	r2, [r7, #28]
 800a592:	e841 2300 	strex	r3, r2, [r1]
 800a596:	617b      	str	r3, [r7, #20]
   return(result);
 800a598:	697b      	ldr	r3, [r7, #20]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1e4      	bne.n	800a568 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800a59e:	e007      	b.n	800a5b0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0208 	orr.w	r2, r2, #8
 800a5ae:	619a      	str	r2, [r3, #24]
}
 800a5b0:	bf00      	nop
 800a5b2:	37b8      	adds	r7, #184	; 0xb8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	40008000 	.word	0x40008000
 800a5bc:	08009d41 	.word	0x08009d41

0800a5c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b083      	sub	sp, #12
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a5c8:	bf00      	nop
 800a5ca:	370c      	adds	r7, #12
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bc80      	pop	{r7}
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a5d2:	b480      	push	{r7}
 800a5d4:	b083      	sub	sp, #12
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a5da:	bf00      	nop
 800a5dc:	370c      	adds	r7, #12
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bc80      	pop	{r7}
 800a5e2:	4770      	bx	lr

0800a5e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a5ec:	bf00      	nop
 800a5ee:	370c      	adds	r7, #12
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bc80      	pop	{r7}
 800a5f4:	4770      	bx	lr

0800a5f6 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b088      	sub	sp, #32
 800a5fa:	af02      	add	r7, sp, #8
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	1d3b      	adds	r3, r7, #4
 800a600:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800a604:	2300      	movs	r3, #0
 800a606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d101      	bne.n	800a616 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800a612:	2302      	movs	r3, #2
 800a614:	e046      	b.n	800a6a4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2201      	movs	r2, #1
 800a61a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	2224      	movs	r2, #36	; 0x24
 800a622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0201 	bic.w	r2, r2, #1
 800a634:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d105      	bne.n	800a65c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800a650:	1d3b      	adds	r3, r7, #4
 800a652:	e893 0006 	ldmia.w	r3, {r1, r2}
 800a656:	68f8      	ldr	r0, [r7, #12]
 800a658:	f000 f90e 	bl	800a878 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a66c:	f7f7 fba4 	bl	8001db8 <HAL_GetTick>
 800a670:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a672:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	2200      	movs	r2, #0
 800a67c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f7fe ff16 	bl	80094b2 <UART_WaitOnFlagUntilTimeout>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	75fb      	strb	r3, [r7, #23]
 800a690:	e003      	b.n	800a69a <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	2220      	movs	r2, #32
 800a696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2200      	movs	r2, #0
 800a69e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return status;
 800a6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3718      	adds	r7, #24
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}

0800a6ac <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b089      	sub	sp, #36	; 0x24
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <HAL_UARTEx_EnableStopMode+0x16>
 800a6be:	2302      	movs	r3, #2
 800a6c0:	e021      	b.n	800a706 <HAL_UARTEx_EnableStopMode+0x5a>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2201      	movs	r2, #1
 800a6c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	e853 3f00 	ldrex	r3, [r3]
 800a6d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	f043 0302 	orr.w	r3, r3, #2
 800a6de:	61fb      	str	r3, [r7, #28]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	61bb      	str	r3, [r7, #24]
 800a6ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ec:	6979      	ldr	r1, [r7, #20]
 800a6ee:	69ba      	ldr	r2, [r7, #24]
 800a6f0:	e841 2300 	strex	r3, r2, [r1]
 800a6f4:	613b      	str	r3, [r7, #16]
   return(result);
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d1e6      	bne.n	800a6ca <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a704:	2300      	movs	r3, #0
}
 800a706:	4618      	mov	r0, r3
 800a708:	3724      	adds	r7, #36	; 0x24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bc80      	pop	{r7}
 800a70e:	4770      	bx	lr

0800a710 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <HAL_UARTEx_DisableFifoMode+0x16>
 800a722:	2302      	movs	r3, #2
 800a724:	e027      	b.n	800a776 <HAL_UARTEx_DisableFifoMode+0x66>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2201      	movs	r2, #1
 800a72a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	2224      	movs	r2, #36	; 0x24
 800a732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	681a      	ldr	r2, [r3, #0]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	f022 0201 	bic.w	r2, r2, #1
 800a74c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a754:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2220      	movs	r2, #32
 800a768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3714      	adds	r7, #20
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bc80      	pop	{r7}
 800a77e:	4770      	bx	lr

0800a780 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a790:	2b01      	cmp	r3, #1
 800a792:	d101      	bne.n	800a798 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a794:	2302      	movs	r3, #2
 800a796:	e02d      	b.n	800a7f4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2201      	movs	r2, #1
 800a79c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2224      	movs	r2, #36	; 0x24
 800a7a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f022 0201 	bic.w	r2, r2, #1
 800a7be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f871 	bl	800a8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	68fa      	ldr	r2, [r7, #12]
 800a7e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2220      	movs	r2, #32
 800a7e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3710      	adds	r7, #16
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	bd80      	pop	{r7, pc}

0800a7fc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800a80c:	2b01      	cmp	r3, #1
 800a80e:	d101      	bne.n	800a814 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a810:	2302      	movs	r3, #2
 800a812:	e02d      	b.n	800a870 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2201      	movs	r2, #1
 800a818:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2224      	movs	r2, #36	; 0x24
 800a820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0201 	bic.w	r2, r2, #1
 800a83a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	689b      	ldr	r3, [r3, #8]
 800a842:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 f833 	bl	800a8bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2220      	movs	r2, #32
 800a862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2200      	movs	r2, #0
 800a86a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a86e:	2300      	movs	r3, #0
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	1d3b      	adds	r3, r7, #4
 800a882:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f023 0210 	bic.w	r2, r3, #16
 800a890:	893b      	ldrh	r3, [r7, #8]
 800a892:	4619      	mov	r1, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	430a      	orrs	r2, r1
 800a89a:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 800a8a6:	7abb      	ldrb	r3, [r7, #10]
 800a8a8:	061a      	lsls	r2, r3, #24
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	430a      	orrs	r2, r1
 800a8b0:	605a      	str	r2, [r3, #4]
}
 800a8b2:	bf00      	nop
 800a8b4:	3714      	adds	r7, #20
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bc80      	pop	{r7}
 800a8ba:	4770      	bx	lr

0800a8bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d108      	bne.n	800a8de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8dc:	e031      	b.n	800a942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8de:	2308      	movs	r3, #8
 800a8e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8e2:	2308      	movs	r3, #8
 800a8e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	0e5b      	lsrs	r3, r3, #25
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	f003 0307 	and.w	r3, r3, #7
 800a8f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	689b      	ldr	r3, [r3, #8]
 800a8fc:	0f5b      	lsrs	r3, r3, #29
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	f003 0307 	and.w	r3, r3, #7
 800a904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	7b3a      	ldrb	r2, [r7, #12]
 800a90a:	4910      	ldr	r1, [pc, #64]	; (800a94c <UARTEx_SetNbDataToProcess+0x90>)
 800a90c:	5c8a      	ldrb	r2, [r1, r2]
 800a90e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a912:	7b3a      	ldrb	r2, [r7, #12]
 800a914:	490e      	ldr	r1, [pc, #56]	; (800a950 <UARTEx_SetNbDataToProcess+0x94>)
 800a916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a918:	fb93 f3f2 	sdiv	r3, r3, r2
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a924:	7bfb      	ldrb	r3, [r7, #15]
 800a926:	7b7a      	ldrb	r2, [r7, #13]
 800a928:	4908      	ldr	r1, [pc, #32]	; (800a94c <UARTEx_SetNbDataToProcess+0x90>)
 800a92a:	5c8a      	ldrb	r2, [r1, r2]
 800a92c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a930:	7b7a      	ldrb	r2, [r7, #13]
 800a932:	4907      	ldr	r1, [pc, #28]	; (800a950 <UARTEx_SetNbDataToProcess+0x94>)
 800a934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a936:	fb93 f3f2 	sdiv	r3, r3, r2
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a942:	bf00      	nop
 800a944:	3714      	adds	r7, #20
 800a946:	46bd      	mov	sp, r7
 800a948:	bc80      	pop	{r7}
 800a94a:	4770      	bx	lr
 800a94c:	08012ba4 	.word	0x08012ba4
 800a950:	08012bac 	.word	0x08012bac

0800a954 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a958:	4907      	ldr	r1, [pc, #28]	; (800a978 <MX_FATFS_Init+0x24>)
 800a95a:	4808      	ldr	r0, [pc, #32]	; (800a97c <MX_FATFS_Init+0x28>)
 800a95c:	f002 ff98 	bl	800d890 <FATFS_LinkDriver>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d002      	beq.n	800a96c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a966:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a96a:	e003      	b.n	800a974 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a96c:	4b04      	ldr	r3, [pc, #16]	; (800a980 <MX_FATFS_Init+0x2c>)
 800a96e:	2201      	movs	r2, #1
 800a970:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a972:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a974:	4618      	mov	r0, r3
 800a976:	bd80      	pop	{r7, pc}
 800a978:	200065e4 	.word	0x200065e4
 800a97c:	2000001c 	.word	0x2000001c
 800a980:	200065e8 	.word	0x200065e8

0800a984 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a984:	b480      	push	{r7}
 800a986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a988:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bc80      	pop	{r7}
 800a990:	4770      	bx	lr

0800a992 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a992:	b580      	push	{r7, lr}
 800a994:	b082      	sub	sp, #8
 800a996:	af00      	add	r7, sp, #0
 800a998:	4603      	mov	r3, r0
 800a99a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f9dc 	bl	800ad5c <USER_SPI_initialize>
 800a9a4:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3708      	adds	r7, #8
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a9ae:	b580      	push	{r7, lr}
 800a9b0:	b082      	sub	sp, #8
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	4603      	mov	r3, r0
 800a9b6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800a9b8:	79fb      	ldrb	r3, [r7, #7]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f000 fab8 	bl	800af30 <USER_SPI_status>
 800a9c0:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3708      	adds	r7, #8
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}

0800a9ca <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800a9da:	7bf8      	ldrb	r0, [r7, #15]
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	68b9      	ldr	r1, [r7, #8]
 800a9e2:	f000 fab9 	bl	800af58 <USER_SPI_read>
 800a9e6:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3710      	adds	r7, #16
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b084      	sub	sp, #16
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	60b9      	str	r1, [r7, #8]
 800a9f8:	607a      	str	r2, [r7, #4]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800aa00:	7bf8      	ldrb	r0, [r7, #15]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	68b9      	ldr	r1, [r7, #8]
 800aa08:	f000 fb0c 	bl	800b024 <USER_SPI_write>
 800aa0c:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}

0800aa16 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa16:	b580      	push	{r7, lr}
 800aa18:	b082      	sub	sp, #8
 800aa1a:	af00      	add	r7, sp, #0
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	603a      	str	r2, [r7, #0]
 800aa20:	71fb      	strb	r3, [r7, #7]
 800aa22:	460b      	mov	r3, r1
 800aa24:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800aa26:	79b9      	ldrb	r1, [r7, #6]
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	683a      	ldr	r2, [r7, #0]
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f000 fb75 	bl	800b11c <USER_SPI_ioctl>
 800aa32:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3708      	adds	r7, #8
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}

0800aa3c <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b082      	sub	sp, #8
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800aa44:	f7f7 f9b8 	bl	8001db8 <HAL_GetTick>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	4a04      	ldr	r2, [pc, #16]	; (800aa5c <SPI_Timer_On+0x20>)
 800aa4c:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800aa4e:	4a04      	ldr	r2, [pc, #16]	; (800aa60 <SPI_Timer_On+0x24>)
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6013      	str	r3, [r2, #0]
}
 800aa54:	bf00      	nop
 800aa56:	3708      	adds	r7, #8
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	200065ec 	.word	0x200065ec
 800aa60:	200065f0 	.word	0x200065f0

0800aa64 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800aa68:	f7f7 f9a6 	bl	8001db8 <HAL_GetTick>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	4b06      	ldr	r3, [pc, #24]	; (800aa88 <SPI_Timer_Status+0x24>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	1ad2      	subs	r2, r2, r3
 800aa74:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <SPI_Timer_Status+0x28>)
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	429a      	cmp	r2, r3
 800aa7a:	bf34      	ite	cc
 800aa7c:	2301      	movcc	r3, #1
 800aa7e:	2300      	movcs	r3, #0
 800aa80:	b2db      	uxtb	r3, r3
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	200065ec 	.word	0x200065ec
 800aa8c:	200065f0 	.word	0x200065f0

0800aa90 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	4603      	mov	r3, r0
 800aa98:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800aa9a:	f107 020f 	add.w	r2, r7, #15
 800aa9e:	1df9      	adds	r1, r7, #7
 800aaa0:	2332      	movs	r3, #50	; 0x32
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	4804      	ldr	r0, [pc, #16]	; (800aab8 <xchg_spi+0x28>)
 800aaa8:	f7fb ffd4 	bl	8006a54 <HAL_SPI_TransmitReceive>
    return rxDat;
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3710      	adds	r7, #16
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}
 800aab6:	bf00      	nop
 800aab8:	2000641c 	.word	0x2000641c

0800aabc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800aabc:	b590      	push	{r4, r7, lr}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
 800aaca:	e00a      	b.n	800aae2 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	18d4      	adds	r4, r2, r3
 800aad2:	20ff      	movs	r0, #255	; 0xff
 800aad4:	f7ff ffdc 	bl	800aa90 <xchg_spi>
 800aad8:	4603      	mov	r3, r0
 800aada:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	3301      	adds	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	68fa      	ldr	r2, [r7, #12]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d3f0      	bcc.n	800aacc <rcvr_spi_multi+0x10>
	}
}
 800aaea:	bf00      	nop
 800aaec:	bf00      	nop
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}

0800aaf4 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800aafe:	2300      	movs	r3, #0
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	e009      	b.n	800ab18 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	781b      	ldrb	r3, [r3, #0]
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7ff ffbf 	bl	800aa90 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	3301      	adds	r3, #1
 800ab16:	60fb      	str	r3, [r7, #12]
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d3f1      	bcc.n	800ab04 <xmit_spi_multi+0x10>
	}
}
 800ab20:	bf00      	nop
 800ab22:	bf00      	nop
 800ab24:	3710      	adds	r7, #16
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b086      	sub	sp, #24
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800ab32:	f7f7 f941 	bl	8001db8 <HAL_GetTick>
 800ab36:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800ab3c:	20ff      	movs	r0, #255	; 0xff
 800ab3e:	f7ff ffa7 	bl	800aa90 <xchg_spi>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800ab46:	7bfb      	ldrb	r3, [r7, #15]
 800ab48:	2bff      	cmp	r3, #255	; 0xff
 800ab4a:	d007      	beq.n	800ab5c <wait_ready+0x32>
 800ab4c:	f7f7 f934 	bl	8001db8 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	1ad3      	subs	r3, r2, r3
 800ab56:	693a      	ldr	r2, [r7, #16]
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d8ef      	bhi.n	800ab3c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800ab5c:	7bfb      	ldrb	r3, [r7, #15]
 800ab5e:	2bff      	cmp	r3, #255	; 0xff
 800ab60:	bf0c      	ite	eq
 800ab62:	2301      	moveq	r3, #1
 800ab64:	2300      	movne	r3, #0
 800ab66:	b2db      	uxtb	r3, r3
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}

0800ab70 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800ab74:	2201      	movs	r2, #1
 800ab76:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab7a:	4804      	ldr	r0, [pc, #16]	; (800ab8c <despiselect+0x1c>)
 800ab7c:	f7f9 fd1f 	bl	80045be <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ab80:	20ff      	movs	r0, #255	; 0xff
 800ab82:	f7ff ff85 	bl	800aa90 <xchg_spi>

}
 800ab86:	bf00      	nop
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	48000400 	.word	0x48000400

0800ab90 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800ab94:	2200      	movs	r2, #0
 800ab96:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab9a:	480a      	ldr	r0, [pc, #40]	; (800abc4 <spiselect+0x34>)
 800ab9c:	f7f9 fd0f 	bl	80045be <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800aba0:	20ff      	movs	r0, #255	; 0xff
 800aba2:	f7ff ff75 	bl	800aa90 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800aba6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800abaa:	f7ff ffbe 	bl	800ab2a <wait_ready>
 800abae:	4603      	mov	r3, r0
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d001      	beq.n	800abb8 <spiselect+0x28>
 800abb4:	2301      	movs	r3, #1
 800abb6:	e002      	b.n	800abbe <spiselect+0x2e>

	despiselect();
 800abb8:	f7ff ffda 	bl	800ab70 <despiselect>
	return 0;	/* Timeout */
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	48000400 	.word	0x48000400

0800abc8 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800abd2:	20c8      	movs	r0, #200	; 0xc8
 800abd4:	f7ff ff32 	bl	800aa3c <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800abd8:	20ff      	movs	r0, #255	; 0xff
 800abda:	f7ff ff59 	bl	800aa90 <xchg_spi>
 800abde:	4603      	mov	r3, r0
 800abe0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
 800abe4:	2bff      	cmp	r3, #255	; 0xff
 800abe6:	d104      	bne.n	800abf2 <rcvr_datablock+0x2a>
 800abe8:	f7ff ff3c 	bl	800aa64 <SPI_Timer_Status>
 800abec:	4603      	mov	r3, r0
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d1f2      	bne.n	800abd8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	2bfe      	cmp	r3, #254	; 0xfe
 800abf6:	d001      	beq.n	800abfc <rcvr_datablock+0x34>
 800abf8:	2300      	movs	r3, #0
 800abfa:	e00a      	b.n	800ac12 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800abfc:	6839      	ldr	r1, [r7, #0]
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f7ff ff5c 	bl	800aabc <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800ac04:	20ff      	movs	r0, #255	; 0xff
 800ac06:	f7ff ff43 	bl	800aa90 <xchg_spi>
 800ac0a:	20ff      	movs	r0, #255	; 0xff
 800ac0c:	f7ff ff40 	bl	800aa90 <xchg_spi>

	return 1;						/* Function succeeded */
 800ac10:	2301      	movs	r3, #1
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3710      	adds	r7, #16
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800ac26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ac2a:	f7ff ff7e 	bl	800ab2a <wait_ready>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d101      	bne.n	800ac38 <xmit_datablock+0x1e>
 800ac34:	2300      	movs	r3, #0
 800ac36:	e01e      	b.n	800ac76 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7ff ff28 	bl	800aa90 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800ac40:	78fb      	ldrb	r3, [r7, #3]
 800ac42:	2bfd      	cmp	r3, #253	; 0xfd
 800ac44:	d016      	beq.n	800ac74 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800ac46:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac4a:	6878      	ldr	r0, [r7, #4]
 800ac4c:	f7ff ff52 	bl	800aaf4 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800ac50:	20ff      	movs	r0, #255	; 0xff
 800ac52:	f7ff ff1d 	bl	800aa90 <xchg_spi>
 800ac56:	20ff      	movs	r0, #255	; 0xff
 800ac58:	f7ff ff1a 	bl	800aa90 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800ac5c:	20ff      	movs	r0, #255	; 0xff
 800ac5e:	f7ff ff17 	bl	800aa90 <xchg_spi>
 800ac62:	4603      	mov	r3, r0
 800ac64:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800ac66:	7bfb      	ldrb	r3, [r7, #15]
 800ac68:	f003 031f 	and.w	r3, r3, #31
 800ac6c:	2b05      	cmp	r3, #5
 800ac6e:	d001      	beq.n	800ac74 <xmit_datablock+0x5a>
 800ac70:	2300      	movs	r3, #0
 800ac72:	e000      	b.n	800ac76 <xmit_datablock+0x5c>
	}
	return 1;
 800ac74:	2301      	movs	r3, #1
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b084      	sub	sp, #16
 800ac82:	af00      	add	r7, sp, #0
 800ac84:	4603      	mov	r3, r0
 800ac86:	6039      	str	r1, [r7, #0]
 800ac88:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800ac8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da0e      	bge.n	800acb0 <send_cmd+0x32>
		cmd &= 0x7F;
 800ac92:	79fb      	ldrb	r3, [r7, #7]
 800ac94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac98:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	2037      	movs	r0, #55	; 0x37
 800ac9e:	f7ff ffee 	bl	800ac7e <send_cmd>
 800aca2:	4603      	mov	r3, r0
 800aca4:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800aca6:	7bbb      	ldrb	r3, [r7, #14]
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	d901      	bls.n	800acb0 <send_cmd+0x32>
 800acac:	7bbb      	ldrb	r3, [r7, #14]
 800acae:	e051      	b.n	800ad54 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800acb0:	79fb      	ldrb	r3, [r7, #7]
 800acb2:	2b0c      	cmp	r3, #12
 800acb4:	d008      	beq.n	800acc8 <send_cmd+0x4a>
		despiselect();
 800acb6:	f7ff ff5b 	bl	800ab70 <despiselect>
		if (!spiselect()) return 0xFF;
 800acba:	f7ff ff69 	bl	800ab90 <spiselect>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d101      	bne.n	800acc8 <send_cmd+0x4a>
 800acc4:	23ff      	movs	r3, #255	; 0xff
 800acc6:	e045      	b.n	800ad54 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	4618      	mov	r0, r3
 800acd2:	f7ff fedd 	bl	800aa90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	0e1b      	lsrs	r3, r3, #24
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fed7 	bl	800aa90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	0c1b      	lsrs	r3, r3, #16
 800ace6:	b2db      	uxtb	r3, r3
 800ace8:	4618      	mov	r0, r3
 800acea:	f7ff fed1 	bl	800aa90 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800acee:	683b      	ldr	r3, [r7, #0]
 800acf0:	0a1b      	lsrs	r3, r3, #8
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	4618      	mov	r0, r3
 800acf6:	f7ff fecb 	bl	800aa90 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fec6 	bl	800aa90 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800ad04:	2301      	movs	r3, #1
 800ad06:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d101      	bne.n	800ad12 <send_cmd+0x94>
 800ad0e:	2395      	movs	r3, #149	; 0x95
 800ad10:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d101      	bne.n	800ad1c <send_cmd+0x9e>
 800ad18:	2387      	movs	r3, #135	; 0x87
 800ad1a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800ad1c:	7bfb      	ldrb	r3, [r7, #15]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7ff feb6 	bl	800aa90 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800ad24:	79fb      	ldrb	r3, [r7, #7]
 800ad26:	2b0c      	cmp	r3, #12
 800ad28:	d102      	bne.n	800ad30 <send_cmd+0xb2>
 800ad2a:	20ff      	movs	r0, #255	; 0xff
 800ad2c:	f7ff feb0 	bl	800aa90 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800ad30:	230a      	movs	r3, #10
 800ad32:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800ad34:	20ff      	movs	r0, #255	; 0xff
 800ad36:	f7ff feab 	bl	800aa90 <xchg_spi>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800ad3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	da05      	bge.n	800ad52 <send_cmd+0xd4>
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
 800ad48:	3b01      	subs	r3, #1
 800ad4a:	73fb      	strb	r3, [r7, #15]
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1f0      	bne.n	800ad34 <send_cmd+0xb6>

	return res;							/* Return received response */
 800ad52:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3710      	adds	r7, #16
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}

0800ad5c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800ad5c:	b590      	push	{r4, r7, lr}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800ad66:	79fb      	ldrb	r3, [r7, #7]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <USER_SPI_initialize+0x14>
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	e0d4      	b.n	800af1a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800ad70:	4b6c      	ldr	r3, [pc, #432]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	b2db      	uxtb	r3, r3
 800ad76:	f003 0302 	and.w	r3, r3, #2
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d003      	beq.n	800ad86 <USER_SPI_initialize+0x2a>
 800ad7e:	4b69      	ldr	r3, [pc, #420]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	e0c9      	b.n	800af1a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 800ad86:	4b68      	ldr	r3, [pc, #416]	; (800af28 <USER_SPI_initialize+0x1cc>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ad90:	4b65      	ldr	r3, [pc, #404]	; (800af28 <USER_SPI_initialize+0x1cc>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800ad98:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800ad9a:	230a      	movs	r3, #10
 800ad9c:	73fb      	strb	r3, [r7, #15]
 800ad9e:	e005      	b.n	800adac <USER_SPI_initialize+0x50>
 800ada0:	20ff      	movs	r0, #255	; 0xff
 800ada2:	f7ff fe75 	bl	800aa90 <xchg_spi>
 800ada6:	7bfb      	ldrb	r3, [r7, #15]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	73fb      	strb	r3, [r7, #15]
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d1f6      	bne.n	800ada0 <USER_SPI_initialize+0x44>

	ty = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800adb6:	2100      	movs	r1, #0
 800adb8:	2000      	movs	r0, #0
 800adba:	f7ff ff60 	bl	800ac7e <send_cmd>
 800adbe:	4603      	mov	r3, r0
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	f040 808b 	bne.w	800aedc <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800adc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800adca:	f7ff fe37 	bl	800aa3c <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800adce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800add2:	2008      	movs	r0, #8
 800add4:	f7ff ff53 	bl	800ac7e <send_cmd>
 800add8:	4603      	mov	r3, r0
 800adda:	2b01      	cmp	r3, #1
 800addc:	d151      	bne.n	800ae82 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800adde:	2300      	movs	r3, #0
 800ade0:	73fb      	strb	r3, [r7, #15]
 800ade2:	e00d      	b.n	800ae00 <USER_SPI_initialize+0xa4>
 800ade4:	7bfc      	ldrb	r4, [r7, #15]
 800ade6:	20ff      	movs	r0, #255	; 0xff
 800ade8:	f7ff fe52 	bl	800aa90 <xchg_spi>
 800adec:	4603      	mov	r3, r0
 800adee:	461a      	mov	r2, r3
 800adf0:	f104 0310 	add.w	r3, r4, #16
 800adf4:	443b      	add	r3, r7
 800adf6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	3301      	adds	r3, #1
 800adfe:	73fb      	strb	r3, [r7, #15]
 800ae00:	7bfb      	ldrb	r3, [r7, #15]
 800ae02:	2b03      	cmp	r3, #3
 800ae04:	d9ee      	bls.n	800ade4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800ae06:	7abb      	ldrb	r3, [r7, #10]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d167      	bne.n	800aedc <USER_SPI_initialize+0x180>
 800ae0c:	7afb      	ldrb	r3, [r7, #11]
 800ae0e:	2baa      	cmp	r3, #170	; 0xaa
 800ae10:	d164      	bne.n	800aedc <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800ae12:	bf00      	nop
 800ae14:	f7ff fe26 	bl	800aa64 <SPI_Timer_Status>
 800ae18:	4603      	mov	r3, r0
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d007      	beq.n	800ae2e <USER_SPI_initialize+0xd2>
 800ae1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ae22:	20a9      	movs	r0, #169	; 0xa9
 800ae24:	f7ff ff2b 	bl	800ac7e <send_cmd>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d1f2      	bne.n	800ae14 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800ae2e:	f7ff fe19 	bl	800aa64 <SPI_Timer_Status>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d051      	beq.n	800aedc <USER_SPI_initialize+0x180>
 800ae38:	2100      	movs	r1, #0
 800ae3a:	203a      	movs	r0, #58	; 0x3a
 800ae3c:	f7ff ff1f 	bl	800ac7e <send_cmd>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d14a      	bne.n	800aedc <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800ae46:	2300      	movs	r3, #0
 800ae48:	73fb      	strb	r3, [r7, #15]
 800ae4a:	e00d      	b.n	800ae68 <USER_SPI_initialize+0x10c>
 800ae4c:	7bfc      	ldrb	r4, [r7, #15]
 800ae4e:	20ff      	movs	r0, #255	; 0xff
 800ae50:	f7ff fe1e 	bl	800aa90 <xchg_spi>
 800ae54:	4603      	mov	r3, r0
 800ae56:	461a      	mov	r2, r3
 800ae58:	f104 0310 	add.w	r3, r4, #16
 800ae5c:	443b      	add	r3, r7
 800ae5e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3301      	adds	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
 800ae68:	7bfb      	ldrb	r3, [r7, #15]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d9ee      	bls.n	800ae4c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800ae6e:	7a3b      	ldrb	r3, [r7, #8]
 800ae70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <USER_SPI_initialize+0x120>
 800ae78:	230c      	movs	r3, #12
 800ae7a:	e000      	b.n	800ae7e <USER_SPI_initialize+0x122>
 800ae7c:	2304      	movs	r3, #4
 800ae7e:	737b      	strb	r3, [r7, #13]
 800ae80:	e02c      	b.n	800aedc <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800ae82:	2100      	movs	r1, #0
 800ae84:	20a9      	movs	r0, #169	; 0xa9
 800ae86:	f7ff fefa 	bl	800ac7e <send_cmd>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d804      	bhi.n	800ae9a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800ae90:	2302      	movs	r3, #2
 800ae92:	737b      	strb	r3, [r7, #13]
 800ae94:	23a9      	movs	r3, #169	; 0xa9
 800ae96:	73bb      	strb	r3, [r7, #14]
 800ae98:	e003      	b.n	800aea2 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	737b      	strb	r3, [r7, #13]
 800ae9e:	2301      	movs	r3, #1
 800aea0:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800aea2:	bf00      	nop
 800aea4:	f7ff fdde 	bl	800aa64 <SPI_Timer_Status>
 800aea8:	4603      	mov	r3, r0
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d007      	beq.n	800aebe <USER_SPI_initialize+0x162>
 800aeae:	7bbb      	ldrb	r3, [r7, #14]
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7ff fee3 	bl	800ac7e <send_cmd>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d1f2      	bne.n	800aea4 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800aebe:	f7ff fdd1 	bl	800aa64 <SPI_Timer_Status>
 800aec2:	4603      	mov	r3, r0
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d007      	beq.n	800aed8 <USER_SPI_initialize+0x17c>
 800aec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aecc:	2010      	movs	r0, #16
 800aece:	f7ff fed6 	bl	800ac7e <send_cmd>
 800aed2:	4603      	mov	r3, r0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d001      	beq.n	800aedc <USER_SPI_initialize+0x180>
				ty = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800aedc:	4a13      	ldr	r2, [pc, #76]	; (800af2c <USER_SPI_initialize+0x1d0>)
 800aede:	7b7b      	ldrb	r3, [r7, #13]
 800aee0:	7013      	strb	r3, [r2, #0]
	despiselect();
 800aee2:	f7ff fe45 	bl	800ab70 <despiselect>

	if (ty) {			/* OK */
 800aee6:	7b7b      	ldrb	r3, [r7, #13]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d010      	beq.n	800af0e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800aeec:	4b0e      	ldr	r3, [pc, #56]	; (800af28 <USER_SPI_initialize+0x1cc>)
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <USER_SPI_initialize+0x1cc>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800aefa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	b2db      	uxtb	r3, r3
 800af02:	f023 0301 	bic.w	r3, r3, #1
 800af06:	b2da      	uxtb	r2, r3
 800af08:	4b06      	ldr	r3, [pc, #24]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800af0a:	701a      	strb	r2, [r3, #0]
 800af0c:	e002      	b.n	800af14 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800af0e:	4b05      	ldr	r3, [pc, #20]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800af10:	2201      	movs	r2, #1
 800af12:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800af14:	4b03      	ldr	r3, [pc, #12]	; (800af24 <USER_SPI_initialize+0x1c8>)
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	b2db      	uxtb	r3, r3
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3714      	adds	r7, #20
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd90      	pop	{r4, r7, pc}
 800af22:	bf00      	nop
 800af24:	20000030 	.word	0x20000030
 800af28:	2000641c 	.word	0x2000641c
 800af2c:	200065e9 	.word	0x200065e9

0800af30 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	4603      	mov	r3, r0
 800af38:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d001      	beq.n	800af44 <USER_SPI_status+0x14>
 800af40:	2301      	movs	r3, #1
 800af42:	e002      	b.n	800af4a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800af44:	4b03      	ldr	r3, [pc, #12]	; (800af54 <USER_SPI_status+0x24>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	b2db      	uxtb	r3, r3
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	bc80      	pop	{r7}
 800af52:	4770      	bx	lr
 800af54:	20000030 	.word	0x20000030

0800af58 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	60b9      	str	r1, [r7, #8]
 800af60:	607a      	str	r2, [r7, #4]
 800af62:	603b      	str	r3, [r7, #0]
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <USER_SPI_read+0x1c>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d101      	bne.n	800af78 <USER_SPI_read+0x20>
 800af74:	2304      	movs	r3, #4
 800af76:	e04d      	b.n	800b014 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800af78:	4b28      	ldr	r3, [pc, #160]	; (800b01c <USER_SPI_read+0xc4>)
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	b2db      	uxtb	r3, r3
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <USER_SPI_read+0x32>
 800af86:	2303      	movs	r3, #3
 800af88:	e044      	b.n	800b014 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800af8a:	4b25      	ldr	r3, [pc, #148]	; (800b020 <USER_SPI_read+0xc8>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	f003 0308 	and.w	r3, r3, #8
 800af92:	2b00      	cmp	r3, #0
 800af94:	d102      	bne.n	800af9c <USER_SPI_read+0x44>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	025b      	lsls	r3, r3, #9
 800af9a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d111      	bne.n	800afc6 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800afa2:	6879      	ldr	r1, [r7, #4]
 800afa4:	2011      	movs	r0, #17
 800afa6:	f7ff fe6a 	bl	800ac7e <send_cmd>
 800afaa:	4603      	mov	r3, r0
 800afac:	2b00      	cmp	r3, #0
 800afae:	d129      	bne.n	800b004 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800afb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afb4:	68b8      	ldr	r0, [r7, #8]
 800afb6:	f7ff fe07 	bl	800abc8 <rcvr_datablock>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d021      	beq.n	800b004 <USER_SPI_read+0xac>
			count = 0;
 800afc0:	2300      	movs	r3, #0
 800afc2:	603b      	str	r3, [r7, #0]
 800afc4:	e01e      	b.n	800b004 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800afc6:	6879      	ldr	r1, [r7, #4]
 800afc8:	2012      	movs	r0, #18
 800afca:	f7ff fe58 	bl	800ac7e <send_cmd>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d117      	bne.n	800b004 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800afd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afd8:	68b8      	ldr	r0, [r7, #8]
 800afda:	f7ff fdf5 	bl	800abc8 <rcvr_datablock>
 800afde:	4603      	mov	r3, r0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d00a      	beq.n	800affa <USER_SPI_read+0xa2>
				buff += 512;
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800afea:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	3b01      	subs	r3, #1
 800aff0:	603b      	str	r3, [r7, #0]
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1ed      	bne.n	800afd4 <USER_SPI_read+0x7c>
 800aff8:	e000      	b.n	800affc <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800affa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800affc:	2100      	movs	r1, #0
 800affe:	200c      	movs	r0, #12
 800b000:	f7ff fe3d 	bl	800ac7e <send_cmd>
		}
	}
	despiselect();
 800b004:	f7ff fdb4 	bl	800ab70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	bf14      	ite	ne
 800b00e:	2301      	movne	r3, #1
 800b010:	2300      	moveq	r3, #0
 800b012:	b2db      	uxtb	r3, r3
}
 800b014:	4618      	mov	r0, r3
 800b016:	3710      	adds	r7, #16
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20000030 	.word	0x20000030
 800b020:	200065e9 	.word	0x200065e9

0800b024 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	603b      	str	r3, [r7, #0]
 800b030:	4603      	mov	r3, r0
 800b032:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800b034:	7bfb      	ldrb	r3, [r7, #15]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <USER_SPI_write+0x1c>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d101      	bne.n	800b044 <USER_SPI_write+0x20>
 800b040:	2304      	movs	r3, #4
 800b042:	e063      	b.n	800b10c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800b044:	4b33      	ldr	r3, [pc, #204]	; (800b114 <USER_SPI_write+0xf0>)
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d001      	beq.n	800b056 <USER_SPI_write+0x32>
 800b052:	2303      	movs	r3, #3
 800b054:	e05a      	b.n	800b10c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <USER_SPI_write+0xf0>)
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	f003 0304 	and.w	r3, r3, #4
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <USER_SPI_write+0x44>
 800b064:	2302      	movs	r3, #2
 800b066:	e051      	b.n	800b10c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800b068:	4b2b      	ldr	r3, [pc, #172]	; (800b118 <USER_SPI_write+0xf4>)
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	f003 0308 	and.w	r3, r3, #8
 800b070:	2b00      	cmp	r3, #0
 800b072:	d102      	bne.n	800b07a <USER_SPI_write+0x56>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	025b      	lsls	r3, r3, #9
 800b078:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d110      	bne.n	800b0a2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800b080:	6879      	ldr	r1, [r7, #4]
 800b082:	2018      	movs	r0, #24
 800b084:	f7ff fdfb 	bl	800ac7e <send_cmd>
 800b088:	4603      	mov	r3, r0
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d136      	bne.n	800b0fc <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800b08e:	21fe      	movs	r1, #254	; 0xfe
 800b090:	68b8      	ldr	r0, [r7, #8]
 800b092:	f7ff fdc2 	bl	800ac1a <xmit_datablock>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d02f      	beq.n	800b0fc <USER_SPI_write+0xd8>
			count = 0;
 800b09c:	2300      	movs	r3, #0
 800b09e:	603b      	str	r3, [r7, #0]
 800b0a0:	e02c      	b.n	800b0fc <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800b0a2:	4b1d      	ldr	r3, [pc, #116]	; (800b118 <USER_SPI_write+0xf4>)
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	f003 0306 	and.w	r3, r3, #6
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d003      	beq.n	800b0b6 <USER_SPI_write+0x92>
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	2097      	movs	r0, #151	; 0x97
 800b0b2:	f7ff fde4 	bl	800ac7e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	2019      	movs	r0, #25
 800b0ba:	f7ff fde0 	bl	800ac7e <send_cmd>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d11b      	bne.n	800b0fc <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800b0c4:	21fc      	movs	r1, #252	; 0xfc
 800b0c6:	68b8      	ldr	r0, [r7, #8]
 800b0c8:	f7ff fda7 	bl	800ac1a <xmit_datablock>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d00a      	beq.n	800b0e8 <USER_SPI_write+0xc4>
				buff += 512;
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b0d8:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	603b      	str	r3, [r7, #0]
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1ee      	bne.n	800b0c4 <USER_SPI_write+0xa0>
 800b0e6:	e000      	b.n	800b0ea <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800b0e8:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800b0ea:	21fd      	movs	r1, #253	; 0xfd
 800b0ec:	2000      	movs	r0, #0
 800b0ee:	f7ff fd94 	bl	800ac1a <xmit_datablock>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <USER_SPI_write+0xd8>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800b0fc:	f7ff fd38 	bl	800ab70 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	2b00      	cmp	r3, #0
 800b104:	bf14      	ite	ne
 800b106:	2301      	movne	r3, #1
 800b108:	2300      	moveq	r3, #0
 800b10a:	b2db      	uxtb	r3, r3
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000030 	.word	0x20000030
 800b118:	200065e9 	.word	0x200065e9

0800b11c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b08c      	sub	sp, #48	; 0x30
 800b120:	af00      	add	r7, sp, #0
 800b122:	4603      	mov	r3, r0
 800b124:	603a      	str	r2, [r7, #0]
 800b126:	71fb      	strb	r3, [r7, #7]
 800b128:	460b      	mov	r3, r1
 800b12a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800b12c:	79fb      	ldrb	r3, [r7, #7]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <USER_SPI_ioctl+0x1a>
 800b132:	2304      	movs	r3, #4
 800b134:	e15a      	b.n	800b3ec <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800b136:	4baf      	ldr	r3, [pc, #700]	; (800b3f4 <USER_SPI_ioctl+0x2d8>)
 800b138:	781b      	ldrb	r3, [r3, #0]
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0301 	and.w	r3, r3, #1
 800b140:	2b00      	cmp	r3, #0
 800b142:	d001      	beq.n	800b148 <USER_SPI_ioctl+0x2c>
 800b144:	2303      	movs	r3, #3
 800b146:	e151      	b.n	800b3ec <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800b148:	2301      	movs	r3, #1
 800b14a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800b14e:	79bb      	ldrb	r3, [r7, #6]
 800b150:	2b04      	cmp	r3, #4
 800b152:	f200 8136 	bhi.w	800b3c2 <USER_SPI_ioctl+0x2a6>
 800b156:	a201      	add	r2, pc, #4	; (adr r2, 800b15c <USER_SPI_ioctl+0x40>)
 800b158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b15c:	0800b171 	.word	0x0800b171
 800b160:	0800b185 	.word	0x0800b185
 800b164:	0800b3c3 	.word	0x0800b3c3
 800b168:	0800b231 	.word	0x0800b231
 800b16c:	0800b327 	.word	0x0800b327
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800b170:	f7ff fd0e 	bl	800ab90 <spiselect>
 800b174:	4603      	mov	r3, r0
 800b176:	2b00      	cmp	r3, #0
 800b178:	f000 8127 	beq.w	800b3ca <USER_SPI_ioctl+0x2ae>
 800b17c:	2300      	movs	r3, #0
 800b17e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b182:	e122      	b.n	800b3ca <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b184:	2100      	movs	r1, #0
 800b186:	2009      	movs	r0, #9
 800b188:	f7ff fd79 	bl	800ac7e <send_cmd>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f040 811d 	bne.w	800b3ce <USER_SPI_ioctl+0x2b2>
 800b194:	f107 030c 	add.w	r3, r7, #12
 800b198:	2110      	movs	r1, #16
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7ff fd14 	bl	800abc8 <rcvr_datablock>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f000 8113 	beq.w	800b3ce <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800b1a8:	7b3b      	ldrb	r3, [r7, #12]
 800b1aa:	099b      	lsrs	r3, r3, #6
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b01      	cmp	r3, #1
 800b1b0:	d111      	bne.n	800b1d6 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b1b2:	7d7b      	ldrb	r3, [r7, #21]
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	7d3b      	ldrb	r3, [r7, #20]
 800b1b8:	021b      	lsls	r3, r3, #8
 800b1ba:	4413      	add	r3, r2
 800b1bc:	461a      	mov	r2, r3
 800b1be:	7cfb      	ldrb	r3, [r7, #19]
 800b1c0:	041b      	lsls	r3, r3, #16
 800b1c2:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b1c6:	4413      	add	r3, r2
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	029a      	lsls	r2, r3, #10
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	e028      	b.n	800b228 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b1d6:	7c7b      	ldrb	r3, [r7, #17]
 800b1d8:	f003 030f 	and.w	r3, r3, #15
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	7dbb      	ldrb	r3, [r7, #22]
 800b1e0:	09db      	lsrs	r3, r3, #7
 800b1e2:	b2db      	uxtb	r3, r3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	7d7b      	ldrb	r3, [r7, #21]
 800b1ea:	005b      	lsls	r3, r3, #1
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	f003 0306 	and.w	r3, r3, #6
 800b1f2:	b2db      	uxtb	r3, r3
 800b1f4:	4413      	add	r3, r2
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	3302      	adds	r3, #2
 800b1fa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b1fe:	7d3b      	ldrb	r3, [r7, #20]
 800b200:	099b      	lsrs	r3, r3, #6
 800b202:	b2db      	uxtb	r3, r3
 800b204:	461a      	mov	r2, r3
 800b206:	7cfb      	ldrb	r3, [r7, #19]
 800b208:	009b      	lsls	r3, r3, #2
 800b20a:	441a      	add	r2, r3
 800b20c:	7cbb      	ldrb	r3, [r7, #18]
 800b20e:	029b      	lsls	r3, r3, #10
 800b210:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b214:	4413      	add	r3, r2
 800b216:	3301      	adds	r3, #1
 800b218:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800b21a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b21e:	3b09      	subs	r3, #9
 800b220:	69fa      	ldr	r2, [r7, #28]
 800b222:	409a      	lsls	r2, r3
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b22e:	e0ce      	b.n	800b3ce <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800b230:	4b71      	ldr	r3, [pc, #452]	; (800b3f8 <USER_SPI_ioctl+0x2dc>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 0304 	and.w	r3, r3, #4
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d031      	beq.n	800b2a0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800b23c:	2100      	movs	r1, #0
 800b23e:	208d      	movs	r0, #141	; 0x8d
 800b240:	f7ff fd1d 	bl	800ac7e <send_cmd>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	f040 80c3 	bne.w	800b3d2 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800b24c:	20ff      	movs	r0, #255	; 0xff
 800b24e:	f7ff fc1f 	bl	800aa90 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800b252:	f107 030c 	add.w	r3, r7, #12
 800b256:	2110      	movs	r1, #16
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff fcb5 	bl	800abc8 <rcvr_datablock>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	f000 80b6 	beq.w	800b3d2 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800b266:	2330      	movs	r3, #48	; 0x30
 800b268:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b26c:	e007      	b.n	800b27e <USER_SPI_ioctl+0x162>
 800b26e:	20ff      	movs	r0, #255	; 0xff
 800b270:	f7ff fc0e 	bl	800aa90 <xchg_spi>
 800b274:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b278:	3b01      	subs	r3, #1
 800b27a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b27e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b282:	2b00      	cmp	r3, #0
 800b284:	d1f3      	bne.n	800b26e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b286:	7dbb      	ldrb	r3, [r7, #22]
 800b288:	091b      	lsrs	r3, r3, #4
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	2310      	movs	r3, #16
 800b290:	fa03 f202 	lsl.w	r2, r3, r2
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800b29e:	e098      	b.n	800b3d2 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800b2a0:	2100      	movs	r1, #0
 800b2a2:	2009      	movs	r0, #9
 800b2a4:	f7ff fceb 	bl	800ac7e <send_cmd>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f040 8091 	bne.w	800b3d2 <USER_SPI_ioctl+0x2b6>
 800b2b0:	f107 030c 	add.w	r3, r7, #12
 800b2b4:	2110      	movs	r1, #16
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fc86 	bl	800abc8 <rcvr_datablock>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f000 8087 	beq.w	800b3d2 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800b2c4:	4b4c      	ldr	r3, [pc, #304]	; (800b3f8 <USER_SPI_ioctl+0x2dc>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 0302 	and.w	r3, r3, #2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d012      	beq.n	800b2f6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b2d0:	7dbb      	ldrb	r3, [r7, #22]
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b2d8:	7dfa      	ldrb	r2, [r7, #23]
 800b2da:	09d2      	lsrs	r2, r2, #7
 800b2dc:	b2d2      	uxtb	r2, r2
 800b2de:	4413      	add	r3, r2
 800b2e0:	1c5a      	adds	r2, r3, #1
 800b2e2:	7e7b      	ldrb	r3, [r7, #25]
 800b2e4:	099b      	lsrs	r3, r3, #6
 800b2e6:	b2db      	uxtb	r3, r3
 800b2e8:	3b01      	subs	r3, #1
 800b2ea:	fa02 f303 	lsl.w	r3, r2, r3
 800b2ee:	461a      	mov	r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	601a      	str	r2, [r3, #0]
 800b2f4:	e013      	b.n	800b31e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b2f6:	7dbb      	ldrb	r3, [r7, #22]
 800b2f8:	109b      	asrs	r3, r3, #2
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	f003 031f 	and.w	r3, r3, #31
 800b300:	3301      	adds	r3, #1
 800b302:	7dfa      	ldrb	r2, [r7, #23]
 800b304:	00d2      	lsls	r2, r2, #3
 800b306:	f002 0218 	and.w	r2, r2, #24
 800b30a:	7df9      	ldrb	r1, [r7, #23]
 800b30c:	0949      	lsrs	r1, r1, #5
 800b30e:	b2c9      	uxtb	r1, r1
 800b310:	440a      	add	r2, r1
 800b312:	3201      	adds	r2, #1
 800b314:	fb02 f303 	mul.w	r3, r2, r3
 800b318:	461a      	mov	r2, r3
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800b31e:	2300      	movs	r3, #0
 800b320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800b324:	e055      	b.n	800b3d2 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b326:	4b34      	ldr	r3, [pc, #208]	; (800b3f8 <USER_SPI_ioctl+0x2dc>)
 800b328:	781b      	ldrb	r3, [r3, #0]
 800b32a:	f003 0306 	and.w	r3, r3, #6
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d051      	beq.n	800b3d6 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b332:	f107 020c 	add.w	r2, r7, #12
 800b336:	79fb      	ldrb	r3, [r7, #7]
 800b338:	210b      	movs	r1, #11
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff feee 	bl	800b11c <USER_SPI_ioctl>
 800b340:	4603      	mov	r3, r0
 800b342:	2b00      	cmp	r3, #0
 800b344:	d149      	bne.n	800b3da <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b346:	7b3b      	ldrb	r3, [r7, #12]
 800b348:	099b      	lsrs	r3, r3, #6
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <USER_SPI_ioctl+0x23e>
 800b350:	7dbb      	ldrb	r3, [r7, #22]
 800b352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b356:	2b00      	cmp	r3, #0
 800b358:	d041      	beq.n	800b3de <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	623b      	str	r3, [r7, #32]
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	62bb      	str	r3, [r7, #40]	; 0x28
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	685b      	ldr	r3, [r3, #4]
 800b368:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800b36a:	4b23      	ldr	r3, [pc, #140]	; (800b3f8 <USER_SPI_ioctl+0x2dc>)
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	f003 0308 	and.w	r3, r3, #8
 800b372:	2b00      	cmp	r3, #0
 800b374:	d105      	bne.n	800b382 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800b376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b378:	025b      	lsls	r3, r3, #9
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	025b      	lsls	r3, r3, #9
 800b380:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800b382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b384:	2020      	movs	r0, #32
 800b386:	f7ff fc7a 	bl	800ac7e <send_cmd>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d128      	bne.n	800b3e2 <USER_SPI_ioctl+0x2c6>
 800b390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b392:	2021      	movs	r0, #33	; 0x21
 800b394:	f7ff fc73 	bl	800ac7e <send_cmd>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d121      	bne.n	800b3e2 <USER_SPI_ioctl+0x2c6>
 800b39e:	2100      	movs	r1, #0
 800b3a0:	2026      	movs	r0, #38	; 0x26
 800b3a2:	f7ff fc6c 	bl	800ac7e <send_cmd>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d11a      	bne.n	800b3e2 <USER_SPI_ioctl+0x2c6>
 800b3ac:	f247 5030 	movw	r0, #30000	; 0x7530
 800b3b0:	f7ff fbbb 	bl	800ab2a <wait_ready>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d013      	beq.n	800b3e2 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800b3c0:	e00f      	b.n	800b3e2 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800b3c2:	2304      	movs	r3, #4
 800b3c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b3c8:	e00c      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b3ca:	bf00      	nop
 800b3cc:	e00a      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b3ce:	bf00      	nop
 800b3d0:	e008      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b3d2:	bf00      	nop
 800b3d4:	e006      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800b3d6:	bf00      	nop
 800b3d8:	e004      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800b3da:	bf00      	nop
 800b3dc:	e002      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800b3de:	bf00      	nop
 800b3e0:	e000      	b.n	800b3e4 <USER_SPI_ioctl+0x2c8>
		break;
 800b3e2:	bf00      	nop
	}

	despiselect();
 800b3e4:	f7ff fbc4 	bl	800ab70 <despiselect>

	return res;
 800b3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3730      	adds	r7, #48	; 0x30
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	20000030 	.word	0x20000030
 800b3f8:	200065e9 	.word	0x200065e9

0800b3fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b406:	79fb      	ldrb	r3, [r7, #7]
 800b408:	4a08      	ldr	r2, [pc, #32]	; (800b42c <disk_status+0x30>)
 800b40a:	009b      	lsls	r3, r3, #2
 800b40c:	4413      	add	r3, r2
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	79fa      	ldrb	r2, [r7, #7]
 800b414:	4905      	ldr	r1, [pc, #20]	; (800b42c <disk_status+0x30>)
 800b416:	440a      	add	r2, r1
 800b418:	7a12      	ldrb	r2, [r2, #8]
 800b41a:	4610      	mov	r0, r2
 800b41c:	4798      	blx	r3
 800b41e:	4603      	mov	r3, r0
 800b420:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b422:	7bfb      	ldrb	r3, [r7, #15]
}
 800b424:	4618      	mov	r0, r3
 800b426:	3710      	adds	r7, #16
 800b428:	46bd      	mov	sp, r7
 800b42a:	bd80      	pop	{r7, pc}
 800b42c:	2000661c 	.word	0x2000661c

0800b430 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	4603      	mov	r3, r0
 800b438:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b43a:	2300      	movs	r3, #0
 800b43c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	4a0d      	ldr	r2, [pc, #52]	; (800b478 <disk_initialize+0x48>)
 800b442:	5cd3      	ldrb	r3, [r2, r3]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d111      	bne.n	800b46c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b448:	79fb      	ldrb	r3, [r7, #7]
 800b44a:	4a0b      	ldr	r2, [pc, #44]	; (800b478 <disk_initialize+0x48>)
 800b44c:	2101      	movs	r1, #1
 800b44e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b450:	79fb      	ldrb	r3, [r7, #7]
 800b452:	4a09      	ldr	r2, [pc, #36]	; (800b478 <disk_initialize+0x48>)
 800b454:	009b      	lsls	r3, r3, #2
 800b456:	4413      	add	r3, r2
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	79fa      	ldrb	r2, [r7, #7]
 800b45e:	4906      	ldr	r1, [pc, #24]	; (800b478 <disk_initialize+0x48>)
 800b460:	440a      	add	r2, r1
 800b462:	7a12      	ldrb	r2, [r2, #8]
 800b464:	4610      	mov	r0, r2
 800b466:	4798      	blx	r3
 800b468:	4603      	mov	r3, r0
 800b46a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	2000661c 	.word	0x2000661c

0800b47c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b47c:	b590      	push	{r4, r7, lr}
 800b47e:	b087      	sub	sp, #28
 800b480:	af00      	add	r7, sp, #0
 800b482:	60b9      	str	r1, [r7, #8]
 800b484:	607a      	str	r2, [r7, #4]
 800b486:	603b      	str	r3, [r7, #0]
 800b488:	4603      	mov	r3, r0
 800b48a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	4a0a      	ldr	r2, [pc, #40]	; (800b4b8 <disk_read+0x3c>)
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	689c      	ldr	r4, [r3, #8]
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	4a07      	ldr	r2, [pc, #28]	; (800b4b8 <disk_read+0x3c>)
 800b49c:	4413      	add	r3, r2
 800b49e:	7a18      	ldrb	r0, [r3, #8]
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	68b9      	ldr	r1, [r7, #8]
 800b4a6:	47a0      	blx	r4
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	371c      	adds	r7, #28
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	2000661c 	.word	0x2000661c

0800b4bc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b4bc:	b590      	push	{r4, r7, lr}
 800b4be:	b087      	sub	sp, #28
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	60b9      	str	r1, [r7, #8]
 800b4c4:	607a      	str	r2, [r7, #4]
 800b4c6:	603b      	str	r3, [r7, #0]
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b4cc:	7bfb      	ldrb	r3, [r7, #15]
 800b4ce:	4a0a      	ldr	r2, [pc, #40]	; (800b4f8 <disk_write+0x3c>)
 800b4d0:	009b      	lsls	r3, r3, #2
 800b4d2:	4413      	add	r3, r2
 800b4d4:	685b      	ldr	r3, [r3, #4]
 800b4d6:	68dc      	ldr	r4, [r3, #12]
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	4a07      	ldr	r2, [pc, #28]	; (800b4f8 <disk_write+0x3c>)
 800b4dc:	4413      	add	r3, r2
 800b4de:	7a18      	ldrb	r0, [r3, #8]
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	68b9      	ldr	r1, [r7, #8]
 800b4e6:	47a0      	blx	r4
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	75fb      	strb	r3, [r7, #23]
  return res;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd90      	pop	{r4, r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	2000661c 	.word	0x2000661c

0800b4fc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	603a      	str	r2, [r7, #0]
 800b506:	71fb      	strb	r3, [r7, #7]
 800b508:	460b      	mov	r3, r1
 800b50a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b50c:	79fb      	ldrb	r3, [r7, #7]
 800b50e:	4a09      	ldr	r2, [pc, #36]	; (800b534 <disk_ioctl+0x38>)
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	4413      	add	r3, r2
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	691b      	ldr	r3, [r3, #16]
 800b518:	79fa      	ldrb	r2, [r7, #7]
 800b51a:	4906      	ldr	r1, [pc, #24]	; (800b534 <disk_ioctl+0x38>)
 800b51c:	440a      	add	r2, r1
 800b51e:	7a10      	ldrb	r0, [r2, #8]
 800b520:	79b9      	ldrb	r1, [r7, #6]
 800b522:	683a      	ldr	r2, [r7, #0]
 800b524:	4798      	blx	r3
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]
  return res;
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	2000661c 	.word	0x2000661c

0800b538 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	3301      	adds	r3, #1
 800b544:	781b      	ldrb	r3, [r3, #0]
 800b546:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b548:	89fb      	ldrh	r3, [r7, #14]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	b21a      	sxth	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	781b      	ldrb	r3, [r3, #0]
 800b552:	b21b      	sxth	r3, r3
 800b554:	4313      	orrs	r3, r2
 800b556:	b21b      	sxth	r3, r3
 800b558:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b55a:	89fb      	ldrh	r3, [r7, #14]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	bc80      	pop	{r7}
 800b564:	4770      	bx	lr

0800b566 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b566:	b480      	push	{r7}
 800b568:	b085      	sub	sp, #20
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	3303      	adds	r3, #3
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	021b      	lsls	r3, r3, #8
 800b57a:	687a      	ldr	r2, [r7, #4]
 800b57c:	3202      	adds	r2, #2
 800b57e:	7812      	ldrb	r2, [r2, #0]
 800b580:	4313      	orrs	r3, r2
 800b582:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	021b      	lsls	r3, r3, #8
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	3201      	adds	r2, #1
 800b58c:	7812      	ldrb	r2, [r2, #0]
 800b58e:	4313      	orrs	r3, r2
 800b590:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	021b      	lsls	r3, r3, #8
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	7812      	ldrb	r2, [r2, #0]
 800b59a:	4313      	orrs	r3, r2
 800b59c:	60fb      	str	r3, [r7, #12]
	return rv;
 800b59e:	68fb      	ldr	r3, [r7, #12]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3714      	adds	r7, #20
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bc80      	pop	{r7}
 800b5a8:	4770      	bx	lr

0800b5aa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b5aa:	b480      	push	{r7}
 800b5ac:	b083      	sub	sp, #12
 800b5ae:	af00      	add	r7, sp, #0
 800b5b0:	6078      	str	r0, [r7, #4]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	1c5a      	adds	r2, r3, #1
 800b5ba:	607a      	str	r2, [r7, #4]
 800b5bc:	887a      	ldrh	r2, [r7, #2]
 800b5be:	b2d2      	uxtb	r2, r2
 800b5c0:	701a      	strb	r2, [r3, #0]
 800b5c2:	887b      	ldrh	r3, [r7, #2]
 800b5c4:	0a1b      	lsrs	r3, r3, #8
 800b5c6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	1c5a      	adds	r2, r3, #1
 800b5cc:	607a      	str	r2, [r7, #4]
 800b5ce:	887a      	ldrh	r2, [r7, #2]
 800b5d0:	b2d2      	uxtb	r2, r2
 800b5d2:	701a      	strb	r2, [r3, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bc80      	pop	{r7}
 800b5dc:	4770      	bx	lr

0800b5de <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b5de:	b480      	push	{r7}
 800b5e0:	b083      	sub	sp, #12
 800b5e2:	af00      	add	r7, sp, #0
 800b5e4:	6078      	str	r0, [r7, #4]
 800b5e6:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	1c5a      	adds	r2, r3, #1
 800b5ec:	607a      	str	r2, [r7, #4]
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	701a      	strb	r2, [r3, #0]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	607a      	str	r2, [r7, #4]
 800b600:	683a      	ldr	r2, [r7, #0]
 800b602:	b2d2      	uxtb	r2, r2
 800b604:	701a      	strb	r2, [r3, #0]
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	0a1b      	lsrs	r3, r3, #8
 800b60a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	607a      	str	r2, [r7, #4]
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	b2d2      	uxtb	r2, r2
 800b616:	701a      	strb	r2, [r3, #0]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	0a1b      	lsrs	r3, r3, #8
 800b61c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	1c5a      	adds	r2, r3, #1
 800b622:	607a      	str	r2, [r7, #4]
 800b624:	683a      	ldr	r2, [r7, #0]
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]
}
 800b62a:	bf00      	nop
 800b62c:	370c      	adds	r7, #12
 800b62e:	46bd      	mov	sp, r7
 800b630:	bc80      	pop	{r7}
 800b632:	4770      	bx	lr

0800b634 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800b634:	b480      	push	{r7}
 800b636:	b087      	sub	sp, #28
 800b638:	af00      	add	r7, sp, #0
 800b63a:	60f8      	str	r0, [r7, #12]
 800b63c:	60b9      	str	r1, [r7, #8]
 800b63e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00d      	beq.n	800b66a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800b64e:	693a      	ldr	r2, [r7, #16]
 800b650:	1c53      	adds	r3, r2, #1
 800b652:	613b      	str	r3, [r7, #16]
 800b654:	697b      	ldr	r3, [r7, #20]
 800b656:	1c59      	adds	r1, r3, #1
 800b658:	6179      	str	r1, [r7, #20]
 800b65a:	7812      	ldrb	r2, [r2, #0]
 800b65c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	3b01      	subs	r3, #1
 800b662:	607b      	str	r3, [r7, #4]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d1f1      	bne.n	800b64e <mem_cpy+0x1a>
	}
}
 800b66a:	bf00      	nop
 800b66c:	371c      	adds	r7, #28
 800b66e:	46bd      	mov	sp, r7
 800b670:	bc80      	pop	{r7}
 800b672:	4770      	bx	lr

0800b674 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	617a      	str	r2, [r7, #20]
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	b2d2      	uxtb	r2, r2
 800b68e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	3b01      	subs	r3, #1
 800b694:	607b      	str	r3, [r7, #4]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d1f3      	bne.n	800b684 <mem_set+0x10>
}
 800b69c:	bf00      	nop
 800b69e:	bf00      	nop
 800b6a0:	371c      	adds	r7, #28
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bc80      	pop	{r7}
 800b6a6:	4770      	bx	lr

0800b6a8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800b6a8:	b480      	push	{r7}
 800b6aa:	b089      	sub	sp, #36	; 0x24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	60f8      	str	r0, [r7, #12]
 800b6b0:	60b9      	str	r1, [r7, #8]
 800b6b2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	61fb      	str	r3, [r7, #28]
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	61fa      	str	r2, [r7, #28]
 800b6c6:	781b      	ldrb	r3, [r3, #0]
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	1c5a      	adds	r2, r3, #1
 800b6ce:	61ba      	str	r2, [r7, #24]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	1acb      	subs	r3, r1, r3
 800b6d4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	607b      	str	r3, [r7, #4]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <mem_cmp+0x40>
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d0eb      	beq.n	800b6c0 <mem_cmp+0x18>

	return r;
 800b6e8:	697b      	ldr	r3, [r7, #20]
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3724      	adds	r7, #36	; 0x24
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bc80      	pop	{r7}
 800b6f2:	4770      	bx	lr

0800b6f4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800b6fe:	e002      	b.n	800b706 <chk_chr+0x12>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3301      	adds	r3, #1
 800b704:	607b      	str	r3, [r7, #4]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d005      	beq.n	800b71a <chk_chr+0x26>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	461a      	mov	r2, r3
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	4293      	cmp	r3, r2
 800b718:	d1f2      	bne.n	800b700 <chk_chr+0xc>
	return *str;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	781b      	ldrb	r3, [r3, #0]
}
 800b71e:	4618      	mov	r0, r3
 800b720:	370c      	adds	r7, #12
 800b722:	46bd      	mov	sp, r7
 800b724:	bc80      	pop	{r7}
 800b726:	4770      	bx	lr

0800b728 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b732:	2300      	movs	r3, #0
 800b734:	60bb      	str	r3, [r7, #8]
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	60fb      	str	r3, [r7, #12]
 800b73a:	e029      	b.n	800b790 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800b73c:	4a26      	ldr	r2, [pc, #152]	; (800b7d8 <chk_lock+0xb0>)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	011b      	lsls	r3, r3, #4
 800b742:	4413      	add	r3, r2
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d01d      	beq.n	800b786 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b74a:	4a23      	ldr	r2, [pc, #140]	; (800b7d8 <chk_lock+0xb0>)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	011b      	lsls	r3, r3, #4
 800b750:	4413      	add	r3, r2
 800b752:	681a      	ldr	r2, [r3, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d116      	bne.n	800b78a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800b75c:	4a1e      	ldr	r2, [pc, #120]	; (800b7d8 <chk_lock+0xb0>)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	011b      	lsls	r3, r3, #4
 800b762:	4413      	add	r3, r2
 800b764:	3304      	adds	r3, #4
 800b766:	681a      	ldr	r2, [r3, #0]
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d10c      	bne.n	800b78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b770:	4a19      	ldr	r2, [pc, #100]	; (800b7d8 <chk_lock+0xb0>)
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	011b      	lsls	r3, r3, #4
 800b776:	4413      	add	r3, r2
 800b778:	3308      	adds	r3, #8
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b780:	429a      	cmp	r2, r3
 800b782:	d102      	bne.n	800b78a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b784:	e007      	b.n	800b796 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b786:	2301      	movs	r3, #1
 800b788:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	3301      	adds	r3, #1
 800b78e:	60fb      	str	r3, [r7, #12]
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d9d2      	bls.n	800b73c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d109      	bne.n	800b7b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d102      	bne.n	800b7a8 <chk_lock+0x80>
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d101      	bne.n	800b7ac <chk_lock+0x84>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e010      	b.n	800b7ce <chk_lock+0xa6>
 800b7ac:	2312      	movs	r3, #18
 800b7ae:	e00e      	b.n	800b7ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d108      	bne.n	800b7c8 <chk_lock+0xa0>
 800b7b6:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <chk_lock+0xb0>)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	011b      	lsls	r3, r3, #4
 800b7bc:	4413      	add	r3, r2
 800b7be:	330c      	adds	r3, #12
 800b7c0:	881b      	ldrh	r3, [r3, #0]
 800b7c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c6:	d101      	bne.n	800b7cc <chk_lock+0xa4>
 800b7c8:	2310      	movs	r3, #16
 800b7ca:	e000      	b.n	800b7ce <chk_lock+0xa6>
 800b7cc:	2300      	movs	r3, #0
}
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	3714      	adds	r7, #20
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bc80      	pop	{r7}
 800b7d6:	4770      	bx	lr
 800b7d8:	200065fc 	.word	0x200065fc

0800b7dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	e002      	b.n	800b7ee <enq_lock+0x12>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	3301      	adds	r3, #1
 800b7ec:	607b      	str	r3, [r7, #4]
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d806      	bhi.n	800b802 <enq_lock+0x26>
 800b7f4:	4a08      	ldr	r2, [pc, #32]	; (800b818 <enq_lock+0x3c>)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	011b      	lsls	r3, r3, #4
 800b7fa:	4413      	add	r3, r2
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d1f2      	bne.n	800b7e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2b02      	cmp	r3, #2
 800b806:	bf14      	ite	ne
 800b808:	2301      	movne	r3, #1
 800b80a:	2300      	moveq	r3, #0
 800b80c:	b2db      	uxtb	r3, r3
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	bc80      	pop	{r7}
 800b816:	4770      	bx	lr
 800b818:	200065fc 	.word	0x200065fc

0800b81c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b826:	2300      	movs	r3, #0
 800b828:	60fb      	str	r3, [r7, #12]
 800b82a:	e01f      	b.n	800b86c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b82c:	4a41      	ldr	r2, [pc, #260]	; (800b934 <inc_lock+0x118>)
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	011b      	lsls	r3, r3, #4
 800b832:	4413      	add	r3, r2
 800b834:	681a      	ldr	r2, [r3, #0]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d113      	bne.n	800b866 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b83e:	4a3d      	ldr	r2, [pc, #244]	; (800b934 <inc_lock+0x118>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	011b      	lsls	r3, r3, #4
 800b844:	4413      	add	r3, r2
 800b846:	3304      	adds	r3, #4
 800b848:	681a      	ldr	r2, [r3, #0]
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b84e:	429a      	cmp	r2, r3
 800b850:	d109      	bne.n	800b866 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b852:	4a38      	ldr	r2, [pc, #224]	; (800b934 <inc_lock+0x118>)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	011b      	lsls	r3, r3, #4
 800b858:	4413      	add	r3, r2
 800b85a:	3308      	adds	r3, #8
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b862:	429a      	cmp	r2, r3
 800b864:	d006      	beq.n	800b874 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3301      	adds	r3, #1
 800b86a:	60fb      	str	r3, [r7, #12]
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d9dc      	bls.n	800b82c <inc_lock+0x10>
 800b872:	e000      	b.n	800b876 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b874:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d132      	bne.n	800b8e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b87c:	2300      	movs	r3, #0
 800b87e:	60fb      	str	r3, [r7, #12]
 800b880:	e002      	b.n	800b888 <inc_lock+0x6c>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3301      	adds	r3, #1
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d806      	bhi.n	800b89c <inc_lock+0x80>
 800b88e:	4a29      	ldr	r2, [pc, #164]	; (800b934 <inc_lock+0x118>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	4413      	add	r3, r2
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d1f2      	bne.n	800b882 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d101      	bne.n	800b8a6 <inc_lock+0x8a>
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	e040      	b.n	800b928 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681a      	ldr	r2, [r3, #0]
 800b8aa:	4922      	ldr	r1, [pc, #136]	; (800b934 <inc_lock+0x118>)
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	011b      	lsls	r3, r3, #4
 800b8b0:	440b      	add	r3, r1
 800b8b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	491e      	ldr	r1, [pc, #120]	; (800b934 <inc_lock+0x118>)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	011b      	lsls	r3, r3, #4
 800b8be:	440b      	add	r3, r1
 800b8c0:	3304      	adds	r3, #4
 800b8c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	695a      	ldr	r2, [r3, #20]
 800b8c8:	491a      	ldr	r1, [pc, #104]	; (800b934 <inc_lock+0x118>)
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	011b      	lsls	r3, r3, #4
 800b8ce:	440b      	add	r3, r1
 800b8d0:	3308      	adds	r3, #8
 800b8d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b8d4:	4a17      	ldr	r2, [pc, #92]	; (800b934 <inc_lock+0x118>)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	011b      	lsls	r3, r3, #4
 800b8da:	4413      	add	r3, r2
 800b8dc:	330c      	adds	r3, #12
 800b8de:	2200      	movs	r2, #0
 800b8e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d009      	beq.n	800b8fc <inc_lock+0xe0>
 800b8e8:	4a12      	ldr	r2, [pc, #72]	; (800b934 <inc_lock+0x118>)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	011b      	lsls	r3, r3, #4
 800b8ee:	4413      	add	r3, r2
 800b8f0:	330c      	adds	r3, #12
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d001      	beq.n	800b8fc <inc_lock+0xe0>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e015      	b.n	800b928 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d108      	bne.n	800b914 <inc_lock+0xf8>
 800b902:	4a0c      	ldr	r2, [pc, #48]	; (800b934 <inc_lock+0x118>)
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	011b      	lsls	r3, r3, #4
 800b908:	4413      	add	r3, r2
 800b90a:	330c      	adds	r3, #12
 800b90c:	881b      	ldrh	r3, [r3, #0]
 800b90e:	3301      	adds	r3, #1
 800b910:	b29a      	uxth	r2, r3
 800b912:	e001      	b.n	800b918 <inc_lock+0xfc>
 800b914:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b918:	4906      	ldr	r1, [pc, #24]	; (800b934 <inc_lock+0x118>)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	011b      	lsls	r3, r3, #4
 800b91e:	440b      	add	r3, r1
 800b920:	330c      	adds	r3, #12
 800b922:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	3301      	adds	r3, #1
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bc80      	pop	{r7}
 800b930:	4770      	bx	lr
 800b932:	bf00      	nop
 800b934:	200065fc 	.word	0x200065fc

0800b938 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	3b01      	subs	r3, #1
 800b944:	607b      	str	r3, [r7, #4]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d825      	bhi.n	800b998 <dec_lock+0x60>
		n = Files[i].ctr;
 800b94c:	4a16      	ldr	r2, [pc, #88]	; (800b9a8 <dec_lock+0x70>)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	011b      	lsls	r3, r3, #4
 800b952:	4413      	add	r3, r2
 800b954:	330c      	adds	r3, #12
 800b956:	881b      	ldrh	r3, [r3, #0]
 800b958:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b95a:	89fb      	ldrh	r3, [r7, #14]
 800b95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b960:	d101      	bne.n	800b966 <dec_lock+0x2e>
 800b962:	2300      	movs	r3, #0
 800b964:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b966:	89fb      	ldrh	r3, [r7, #14]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d002      	beq.n	800b972 <dec_lock+0x3a>
 800b96c:	89fb      	ldrh	r3, [r7, #14]
 800b96e:	3b01      	subs	r3, #1
 800b970:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b972:	4a0d      	ldr	r2, [pc, #52]	; (800b9a8 <dec_lock+0x70>)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	011b      	lsls	r3, r3, #4
 800b978:	4413      	add	r3, r2
 800b97a:	330c      	adds	r3, #12
 800b97c:	89fa      	ldrh	r2, [r7, #14]
 800b97e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b980:	89fb      	ldrh	r3, [r7, #14]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d105      	bne.n	800b992 <dec_lock+0x5a>
 800b986:	4a08      	ldr	r2, [pc, #32]	; (800b9a8 <dec_lock+0x70>)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	011b      	lsls	r3, r3, #4
 800b98c:	4413      	add	r3, r2
 800b98e:	2200      	movs	r2, #0
 800b990:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b992:	2300      	movs	r3, #0
 800b994:	737b      	strb	r3, [r7, #13]
 800b996:	e001      	b.n	800b99c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b998:	2302      	movs	r3, #2
 800b99a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b99c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bc80      	pop	{r7}
 800b9a6:	4770      	bx	lr
 800b9a8:	200065fc 	.word	0x200065fc

0800b9ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	60fb      	str	r3, [r7, #12]
 800b9b8:	e010      	b.n	800b9dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b9ba:	4a0d      	ldr	r2, [pc, #52]	; (800b9f0 <clear_lock+0x44>)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	011b      	lsls	r3, r3, #4
 800b9c0:	4413      	add	r3, r2
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	429a      	cmp	r2, r3
 800b9c8:	d105      	bne.n	800b9d6 <clear_lock+0x2a>
 800b9ca:	4a09      	ldr	r2, [pc, #36]	; (800b9f0 <clear_lock+0x44>)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	011b      	lsls	r3, r3, #4
 800b9d0:	4413      	add	r3, r2
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	3301      	adds	r3, #1
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d9eb      	bls.n	800b9ba <clear_lock+0xe>
	}
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	3714      	adds	r7, #20
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bc80      	pop	{r7}
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	200065fc 	.word	0x200065fc

0800b9f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b086      	sub	sp, #24
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	78db      	ldrb	r3, [r3, #3]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d034      	beq.n	800ba72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	7858      	ldrb	r0, [r3, #1]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba18:	2301      	movs	r3, #1
 800ba1a:	697a      	ldr	r2, [r7, #20]
 800ba1c:	f7ff fd4e 	bl	800b4bc <disk_write>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d002      	beq.n	800ba2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	73fb      	strb	r3, [r7, #15]
 800ba2a:	e022      	b.n	800ba72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	1ad2      	subs	r2, r2, r3
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d217      	bcs.n	800ba72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	789b      	ldrb	r3, [r3, #2]
 800ba46:	613b      	str	r3, [r7, #16]
 800ba48:	e010      	b.n	800ba6c <sync_window+0x78>
					wsect += fs->fsize;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	699b      	ldr	r3, [r3, #24]
 800ba4e:	697a      	ldr	r2, [r7, #20]
 800ba50:	4413      	add	r3, r2
 800ba52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	7858      	ldrb	r0, [r3, #1]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba5e:	2301      	movs	r3, #1
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	f7ff fd2b 	bl	800b4bc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	3b01      	subs	r3, #1
 800ba6a:	613b      	str	r3, [r7, #16]
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	2b01      	cmp	r3, #1
 800ba70:	d8eb      	bhi.n	800ba4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ba72:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3718      	adds	r7, #24
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	683a      	ldr	r2, [r7, #0]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d01b      	beq.n	800bacc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	f7ff ffad 	bl	800b9f4 <sync_window>
 800ba9a:	4603      	mov	r3, r0
 800ba9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ba9e:	7bfb      	ldrb	r3, [r7, #15]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d113      	bne.n	800bacc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	7858      	ldrb	r0, [r3, #1]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800baae:	2301      	movs	r3, #1
 800bab0:	683a      	ldr	r2, [r7, #0]
 800bab2:	f7ff fce3 	bl	800b47c <disk_read>
 800bab6:	4603      	mov	r3, r0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d004      	beq.n	800bac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800babc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	683a      	ldr	r2, [r7, #0]
 800baca:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800bacc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
	...

0800bad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b084      	sub	sp, #16
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f7ff ff87 	bl	800b9f4 <sync_window>
 800bae6:	4603      	mov	r3, r0
 800bae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800baea:	7bfb      	ldrb	r3, [r7, #15]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d158      	bne.n	800bba2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	2b03      	cmp	r3, #3
 800baf6:	d148      	bne.n	800bb8a <sync_fs+0xb2>
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	791b      	ldrb	r3, [r3, #4]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d144      	bne.n	800bb8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	3330      	adds	r3, #48	; 0x30
 800bb04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bb08:	2100      	movs	r1, #0
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7ff fdb2 	bl	800b674 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3330      	adds	r3, #48	; 0x30
 800bb14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bb1c:	4618      	mov	r0, r3
 800bb1e:	f7ff fd44 	bl	800b5aa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	3330      	adds	r3, #48	; 0x30
 800bb26:	4921      	ldr	r1, [pc, #132]	; (800bbac <sync_fs+0xd4>)
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fd58 	bl	800b5de <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	3330      	adds	r3, #48	; 0x30
 800bb32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb36:	491e      	ldr	r1, [pc, #120]	; (800bbb0 <sync_fs+0xd8>)
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7ff fd50 	bl	800b5de <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	3330      	adds	r3, #48	; 0x30
 800bb42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7ff fd46 	bl	800b5de <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	3330      	adds	r3, #48	; 0x30
 800bb56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	4619      	mov	r1, r3
 800bb60:	4610      	mov	r0, r2
 800bb62:	f7ff fd3c 	bl	800b5de <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	69db      	ldr	r3, [r3, #28]
 800bb6a:	1c5a      	adds	r2, r3, #1
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	7858      	ldrb	r0, [r3, #1]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb7e:	2301      	movs	r3, #1
 800bb80:	f7ff fc9c 	bl	800b4bc <disk_write>
			fs->fsi_flag = 0;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	2100      	movs	r1, #0
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff fcb2 	bl	800b4fc <disk_ioctl>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d001      	beq.n	800bba2 <sync_fs+0xca>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3710      	adds	r7, #16
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	41615252 	.word	0x41615252
 800bbb0:	61417272 	.word	0x61417272

0800bbb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	3b02      	subs	r3, #2
 800bbc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	695b      	ldr	r3, [r3, #20]
 800bbc8:	3b02      	subs	r3, #2
 800bbca:	683a      	ldr	r2, [r7, #0]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d301      	bcc.n	800bbd4 <clust2sect+0x20>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	e008      	b.n	800bbe6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	895b      	ldrh	r3, [r3, #10]
 800bbd8:	461a      	mov	r2, r3
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	fb03 f202 	mul.w	r2, r3, r2
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe4:	4413      	add	r3, r2
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bc80      	pop	{r7}
 800bbee:	4770      	bx	lr

0800bbf0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b01      	cmp	r3, #1
 800bc04:	d904      	bls.n	800bc10 <get_fat+0x20>
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d302      	bcc.n	800bc16 <get_fat+0x26>
		val = 1;	/* Internal error */
 800bc10:	2301      	movs	r3, #1
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e08f      	b.n	800bd36 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800bc16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc1a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	d062      	beq.n	800bcea <get_fat+0xfa>
 800bc24:	2b03      	cmp	r3, #3
 800bc26:	dc7c      	bgt.n	800bd22 <get_fat+0x132>
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d002      	beq.n	800bc32 <get_fat+0x42>
 800bc2c:	2b02      	cmp	r3, #2
 800bc2e:	d042      	beq.n	800bcb6 <get_fat+0xc6>
 800bc30:	e077      	b.n	800bd22 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	60fb      	str	r3, [r7, #12]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	085b      	lsrs	r3, r3, #1
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	6a1a      	ldr	r2, [r3, #32]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	0a5b      	lsrs	r3, r3, #9
 800bc48:	4413      	add	r3, r2
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	6938      	ldr	r0, [r7, #16]
 800bc4e:	f7ff ff15 	bl	800ba7c <move_window>
 800bc52:	4603      	mov	r3, r0
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d167      	bne.n	800bd28 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	60fa      	str	r2, [r7, #12]
 800bc5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc62:	693a      	ldr	r2, [r7, #16]
 800bc64:	4413      	add	r3, r2
 800bc66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc6a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bc6c:	693b      	ldr	r3, [r7, #16]
 800bc6e:	6a1a      	ldr	r2, [r3, #32]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	0a5b      	lsrs	r3, r3, #9
 800bc74:	4413      	add	r3, r2
 800bc76:	4619      	mov	r1, r3
 800bc78:	6938      	ldr	r0, [r7, #16]
 800bc7a:	f7ff feff 	bl	800ba7c <move_window>
 800bc7e:	4603      	mov	r3, r0
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d153      	bne.n	800bd2c <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bc92:	021b      	lsls	r3, r3, #8
 800bc94:	461a      	mov	r2, r3
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	4313      	orrs	r3, r2
 800bc9a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	f003 0301 	and.w	r3, r3, #1
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <get_fat+0xbc>
 800bca6:	68bb      	ldr	r3, [r7, #8]
 800bca8:	091b      	lsrs	r3, r3, #4
 800bcaa:	e002      	b.n	800bcb2 <get_fat+0xc2>
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bcb2:	617b      	str	r3, [r7, #20]
			break;
 800bcb4:	e03f      	b.n	800bd36 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bcb6:	693b      	ldr	r3, [r7, #16]
 800bcb8:	6a1a      	ldr	r2, [r3, #32]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	0a1b      	lsrs	r3, r3, #8
 800bcbe:	4413      	add	r3, r2
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	6938      	ldr	r0, [r7, #16]
 800bcc4:	f7ff feda 	bl	800ba7c <move_window>
 800bcc8:	4603      	mov	r3, r0
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d130      	bne.n	800bd30 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800bcdc:	4413      	add	r3, r2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff fc2a 	bl	800b538 <ld_word>
 800bce4:	4603      	mov	r3, r0
 800bce6:	617b      	str	r3, [r7, #20]
			break;
 800bce8:	e025      	b.n	800bd36 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	6a1a      	ldr	r2, [r3, #32]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	09db      	lsrs	r3, r3, #7
 800bcf2:	4413      	add	r3, r2
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6938      	ldr	r0, [r7, #16]
 800bcf8:	f7ff fec0 	bl	800ba7c <move_window>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d118      	bne.n	800bd34 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800bd10:	4413      	add	r3, r2
 800bd12:	4618      	mov	r0, r3
 800bd14:	f7ff fc27 	bl	800b566 <ld_dword>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800bd1e:	617b      	str	r3, [r7, #20]
			break;
 800bd20:	e009      	b.n	800bd36 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800bd22:	2301      	movs	r3, #1
 800bd24:	617b      	str	r3, [r7, #20]
 800bd26:	e006      	b.n	800bd36 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd28:	bf00      	nop
 800bd2a:	e004      	b.n	800bd36 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800bd2c:	bf00      	nop
 800bd2e:	e002      	b.n	800bd36 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800bd30:	bf00      	nop
 800bd32:	e000      	b.n	800bd36 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800bd34:	bf00      	nop
		}
	}

	return val;
 800bd36:	697b      	ldr	r3, [r7, #20]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3718      	adds	r7, #24
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800bd40:	b590      	push	{r4, r7, lr}
 800bd42:	b089      	sub	sp, #36	; 0x24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2b01      	cmp	r3, #1
 800bd54:	f240 80d9 	bls.w	800bf0a <put_fat+0x1ca>
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	695b      	ldr	r3, [r3, #20]
 800bd5c:	68ba      	ldr	r2, [r7, #8]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	f080 80d3 	bcs.w	800bf0a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	2b03      	cmp	r3, #3
 800bd6a:	f000 8096 	beq.w	800be9a <put_fat+0x15a>
 800bd6e:	2b03      	cmp	r3, #3
 800bd70:	f300 80cb 	bgt.w	800bf0a <put_fat+0x1ca>
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d002      	beq.n	800bd7e <put_fat+0x3e>
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d06e      	beq.n	800be5a <put_fat+0x11a>
 800bd7c:	e0c5      	b.n	800bf0a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	61bb      	str	r3, [r7, #24]
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	085b      	lsrs	r3, r3, #1
 800bd86:	69ba      	ldr	r2, [r7, #24]
 800bd88:	4413      	add	r3, r2
 800bd8a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	6a1a      	ldr	r2, [r3, #32]
 800bd90:	69bb      	ldr	r3, [r7, #24]
 800bd92:	0a5b      	lsrs	r3, r3, #9
 800bd94:	4413      	add	r3, r2
 800bd96:	4619      	mov	r1, r3
 800bd98:	68f8      	ldr	r0, [r7, #12]
 800bd9a:	f7ff fe6f 	bl	800ba7c <move_window>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800bda2:	7ffb      	ldrb	r3, [r7, #31]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	f040 80a9 	bne.w	800befc <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	1c59      	adds	r1, r3, #1
 800bdb4:	61b9      	str	r1, [r7, #24]
 800bdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdba:	4413      	add	r3, r2
 800bdbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d00d      	beq.n	800bde4 <put_fat+0xa4>
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b25b      	sxtb	r3, r3
 800bdce:	f003 030f 	and.w	r3, r3, #15
 800bdd2:	b25a      	sxtb	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	011b      	lsls	r3, r3, #4
 800bdda:	b25b      	sxtb	r3, r3
 800bddc:	4313      	orrs	r3, r2
 800bdde:	b25b      	sxtb	r3, r3
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	e001      	b.n	800bde8 <put_fat+0xa8>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	697a      	ldr	r2, [r7, #20]
 800bdea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2201      	movs	r2, #1
 800bdf0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1a      	ldr	r2, [r3, #32]
 800bdf6:	69bb      	ldr	r3, [r7, #24]
 800bdf8:	0a5b      	lsrs	r3, r3, #9
 800bdfa:	4413      	add	r3, r2
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	68f8      	ldr	r0, [r7, #12]
 800be00:	f7ff fe3c 	bl	800ba7c <move_window>
 800be04:	4603      	mov	r3, r0
 800be06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be08:	7ffb      	ldrb	r3, [r7, #31]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d178      	bne.n	800bf00 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be14:	69bb      	ldr	r3, [r7, #24]
 800be16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be1a:	4413      	add	r3, r2
 800be1c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b00      	cmp	r3, #0
 800be26:	d003      	beq.n	800be30 <put_fat+0xf0>
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	091b      	lsrs	r3, r3, #4
 800be2c:	b2db      	uxtb	r3, r3
 800be2e:	e00e      	b.n	800be4e <put_fat+0x10e>
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	b25b      	sxtb	r3, r3
 800be36:	f023 030f 	bic.w	r3, r3, #15
 800be3a:	b25a      	sxtb	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	0a1b      	lsrs	r3, r3, #8
 800be40:	b25b      	sxtb	r3, r3
 800be42:	f003 030f 	and.w	r3, r3, #15
 800be46:	b25b      	sxtb	r3, r3
 800be48:	4313      	orrs	r3, r2
 800be4a:	b25b      	sxtb	r3, r3
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	2201      	movs	r2, #1
 800be56:	70da      	strb	r2, [r3, #3]
			break;
 800be58:	e057      	b.n	800bf0a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6a1a      	ldr	r2, [r3, #32]
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	4413      	add	r3, r2
 800be64:	4619      	mov	r1, r3
 800be66:	68f8      	ldr	r0, [r7, #12]
 800be68:	f7ff fe08 	bl	800ba7c <move_window>
 800be6c:	4603      	mov	r3, r0
 800be6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800be70:	7ffb      	ldrb	r3, [r7, #31]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d146      	bne.n	800bf04 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	005b      	lsls	r3, r3, #1
 800be80:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800be84:	4413      	add	r3, r2
 800be86:	687a      	ldr	r2, [r7, #4]
 800be88:	b292      	uxth	r2, r2
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f7ff fb8c 	bl	800b5aa <st_word>
			fs->wflag = 1;
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	2201      	movs	r2, #1
 800be96:	70da      	strb	r2, [r3, #3]
			break;
 800be98:	e037      	b.n	800bf0a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	6a1a      	ldr	r2, [r3, #32]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	09db      	lsrs	r3, r3, #7
 800bea2:	4413      	add	r3, r2
 800bea4:	4619      	mov	r1, r3
 800bea6:	68f8      	ldr	r0, [r7, #12]
 800bea8:	f7ff fde8 	bl	800ba7c <move_window>
 800beac:	4603      	mov	r3, r0
 800beae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800beb0:	7ffb      	ldrb	r3, [r7, #31]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d128      	bne.n	800bf08 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800beca:	4413      	add	r3, r2
 800becc:	4618      	mov	r0, r3
 800bece:	f7ff fb4a 	bl	800b566 <ld_dword>
 800bed2:	4603      	mov	r3, r0
 800bed4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800bed8:	4323      	orrs	r3, r4
 800beda:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	009b      	lsls	r3, r3, #2
 800bee6:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800beea:	4413      	add	r3, r2
 800beec:	6879      	ldr	r1, [r7, #4]
 800beee:	4618      	mov	r0, r3
 800bef0:	f7ff fb75 	bl	800b5de <st_dword>
			fs->wflag = 1;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2201      	movs	r2, #1
 800bef8:	70da      	strb	r2, [r3, #3]
			break;
 800befa:	e006      	b.n	800bf0a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800befc:	bf00      	nop
 800befe:	e004      	b.n	800bf0a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf00:	bf00      	nop
 800bf02:	e002      	b.n	800bf0a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf04:	bf00      	nop
 800bf06:	e000      	b.n	800bf0a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800bf08:	bf00      	nop
		}
	}
	return res;
 800bf0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3724      	adds	r7, #36	; 0x24
 800bf10:	46bd      	mov	sp, r7
 800bf12:	bd90      	pop	{r4, r7, pc}

0800bf14 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b088      	sub	sp, #32
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	60f8      	str	r0, [r7, #12]
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800bf20:	2300      	movs	r3, #0
 800bf22:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800bf2a:	68bb      	ldr	r3, [r7, #8]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d904      	bls.n	800bf3a <remove_chain+0x26>
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	68ba      	ldr	r2, [r7, #8]
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d301      	bcc.n	800bf3e <remove_chain+0x2a>
 800bf3a:	2302      	movs	r3, #2
 800bf3c:	e04b      	b.n	800bfd6 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d00c      	beq.n	800bf5e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800bf44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bf48:	6879      	ldr	r1, [r7, #4]
 800bf4a:	69b8      	ldr	r0, [r7, #24]
 800bf4c:	f7ff fef8 	bl	800bd40 <put_fat>
 800bf50:	4603      	mov	r3, r0
 800bf52:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800bf54:	7ffb      	ldrb	r3, [r7, #31]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d001      	beq.n	800bf5e <remove_chain+0x4a>
 800bf5a:	7ffb      	ldrb	r3, [r7, #31]
 800bf5c:	e03b      	b.n	800bfd6 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800bf5e:	68b9      	ldr	r1, [r7, #8]
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f7ff fe45 	bl	800bbf0 <get_fat>
 800bf66:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d031      	beq.n	800bfd2 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d101      	bne.n	800bf78 <remove_chain+0x64>
 800bf74:	2302      	movs	r3, #2
 800bf76:	e02e      	b.n	800bfd6 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf7e:	d101      	bne.n	800bf84 <remove_chain+0x70>
 800bf80:	2301      	movs	r3, #1
 800bf82:	e028      	b.n	800bfd6 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800bf84:	2200      	movs	r2, #0
 800bf86:	68b9      	ldr	r1, [r7, #8]
 800bf88:	69b8      	ldr	r0, [r7, #24]
 800bf8a:	f7ff fed9 	bl	800bd40 <put_fat>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800bf92:	7ffb      	ldrb	r3, [r7, #31]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d001      	beq.n	800bf9c <remove_chain+0x88>
 800bf98:	7ffb      	ldrb	r3, [r7, #31]
 800bf9a:	e01c      	b.n	800bfd6 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	691a      	ldr	r2, [r3, #16]
 800bfa0:	69bb      	ldr	r3, [r7, #24]
 800bfa2:	695b      	ldr	r3, [r3, #20]
 800bfa4:	3b02      	subs	r3, #2
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d20b      	bcs.n	800bfc2 <remove_chain+0xae>
			fs->free_clst++;
 800bfaa:	69bb      	ldr	r3, [r7, #24]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	1c5a      	adds	r2, r3, #1
 800bfb0:	69bb      	ldr	r3, [r7, #24]
 800bfb2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	791b      	ldrb	r3, [r3, #4]
 800bfb8:	f043 0301 	orr.w	r3, r3, #1
 800bfbc:	b2da      	uxtb	r2, r3
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	695b      	ldr	r3, [r3, #20]
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d3c6      	bcc.n	800bf5e <remove_chain+0x4a>
 800bfd0:	e000      	b.n	800bfd4 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800bfd2:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3720      	adds	r7, #32
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b088      	sub	sp, #32
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10d      	bne.n	800c010 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	68db      	ldr	r3, [r3, #12]
 800bff8:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d004      	beq.n	800c00a <create_chain+0x2c>
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	695b      	ldr	r3, [r3, #20]
 800c004:	69ba      	ldr	r2, [r7, #24]
 800c006:	429a      	cmp	r2, r3
 800c008:	d31b      	bcc.n	800c042 <create_chain+0x64>
 800c00a:	2301      	movs	r3, #1
 800c00c:	61bb      	str	r3, [r7, #24]
 800c00e:	e018      	b.n	800c042 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c010:	6839      	ldr	r1, [r7, #0]
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f7ff fdec 	bl	800bbf0 <get_fat>
 800c018:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d801      	bhi.n	800c024 <create_chain+0x46>
 800c020:	2301      	movs	r3, #1
 800c022:	e070      	b.n	800c106 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c02a:	d101      	bne.n	800c030 <create_chain+0x52>
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	e06a      	b.n	800c106 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	429a      	cmp	r2, r3
 800c038:	d201      	bcs.n	800c03e <create_chain+0x60>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	e063      	b.n	800c106 <create_chain+0x128>
		scl = clst;
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	3301      	adds	r3, #1
 800c04a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	695b      	ldr	r3, [r3, #20]
 800c050:	69fa      	ldr	r2, [r7, #28]
 800c052:	429a      	cmp	r2, r3
 800c054:	d307      	bcc.n	800c066 <create_chain+0x88>
				ncl = 2;
 800c056:	2302      	movs	r3, #2
 800c058:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c05a:	69fa      	ldr	r2, [r7, #28]
 800c05c:	69bb      	ldr	r3, [r7, #24]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d901      	bls.n	800c066 <create_chain+0x88>
 800c062:	2300      	movs	r3, #0
 800c064:	e04f      	b.n	800c106 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c066:	69f9      	ldr	r1, [r7, #28]
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f7ff fdc1 	bl	800bbf0 <get_fat>
 800c06e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00e      	beq.n	800c094 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2b01      	cmp	r3, #1
 800c07a:	d003      	beq.n	800c084 <create_chain+0xa6>
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c082:	d101      	bne.n	800c088 <create_chain+0xaa>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	e03e      	b.n	800c106 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c088:	69fa      	ldr	r2, [r7, #28]
 800c08a:	69bb      	ldr	r3, [r7, #24]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d1da      	bne.n	800c046 <create_chain+0x68>
 800c090:	2300      	movs	r3, #0
 800c092:	e038      	b.n	800c106 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c094:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c09a:	69f9      	ldr	r1, [r7, #28]
 800c09c:	6938      	ldr	r0, [r7, #16]
 800c09e:	f7ff fe4f 	bl	800bd40 <put_fat>
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c0a6:	7dfb      	ldrb	r3, [r7, #23]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d109      	bne.n	800c0c0 <create_chain+0xe2>
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d006      	beq.n	800c0c0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c0b2:	69fa      	ldr	r2, [r7, #28]
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6938      	ldr	r0, [r7, #16]
 800c0b8:	f7ff fe42 	bl	800bd40 <put_fat>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c0c0:	7dfb      	ldrb	r3, [r7, #23]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d116      	bne.n	800c0f4 <create_chain+0x116>
		fs->last_clst = ncl;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	69fa      	ldr	r2, [r7, #28]
 800c0ca:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c0cc:	693b      	ldr	r3, [r7, #16]
 800c0ce:	691a      	ldr	r2, [r3, #16]
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	695b      	ldr	r3, [r3, #20]
 800c0d4:	3b02      	subs	r3, #2
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d804      	bhi.n	800c0e4 <create_chain+0x106>
 800c0da:	693b      	ldr	r3, [r7, #16]
 800c0dc:	691b      	ldr	r3, [r3, #16]
 800c0de:	1e5a      	subs	r2, r3, #1
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	791b      	ldrb	r3, [r3, #4]
 800c0e8:	f043 0301 	orr.w	r3, r3, #1
 800c0ec:	b2da      	uxtb	r2, r3
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	711a      	strb	r2, [r3, #4]
 800c0f2:	e007      	b.n	800c104 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c0f4:	7dfb      	ldrb	r3, [r7, #23]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d102      	bne.n	800c100 <create_chain+0x122>
 800c0fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0fe:	e000      	b.n	800c102 <create_chain+0x124>
 800c100:	2301      	movs	r3, #1
 800c102:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c104:	69fb      	ldr	r3, [r7, #28]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3720      	adds	r7, #32
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c10e:	b480      	push	{r7}
 800c110:	b087      	sub	sp, #28
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c122:	3304      	adds	r3, #4
 800c124:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	0a5b      	lsrs	r3, r3, #9
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	8952      	ldrh	r2, [r2, #10]
 800c12e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c132:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	1d1a      	adds	r2, r3, #4
 800c138:	613a      	str	r2, [r7, #16]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d101      	bne.n	800c148 <clmt_clust+0x3a>
 800c144:	2300      	movs	r3, #0
 800c146:	e010      	b.n	800c16a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800c148:	697a      	ldr	r2, [r7, #20]
 800c14a:	68bb      	ldr	r3, [r7, #8]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d307      	bcc.n	800c160 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	1ad3      	subs	r3, r2, r3
 800c156:	617b      	str	r3, [r7, #20]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	3304      	adds	r3, #4
 800c15c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c15e:	e7e9      	b.n	800c134 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800c160:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	4413      	add	r3, r2
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	371c      	adds	r7, #28
 800c16e:	46bd      	mov	sp, r7
 800c170:	bc80      	pop	{r7}
 800c172:	4770      	bx	lr

0800c174 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b086      	sub	sp, #24
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c18a:	d204      	bcs.n	800c196 <dir_sdi+0x22>
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	f003 031f 	and.w	r3, r3, #31
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <dir_sdi+0x26>
		return FR_INT_ERR;
 800c196:	2302      	movs	r3, #2
 800c198:	e063      	b.n	800c262 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	689b      	ldr	r3, [r3, #8]
 800c1a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c1a6:	697b      	ldr	r3, [r7, #20]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <dir_sdi+0x46>
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d902      	bls.n	800c1ba <dir_sdi+0x46>
		clst = fs->dirbase;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10c      	bne.n	800c1da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	095b      	lsrs	r3, r3, #5
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	8912      	ldrh	r2, [r2, #8]
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d301      	bcc.n	800c1d0 <dir_sdi+0x5c>
 800c1cc:	2302      	movs	r3, #2
 800c1ce:	e048      	b.n	800c262 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	61da      	str	r2, [r3, #28]
 800c1d8:	e029      	b.n	800c22e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	895b      	ldrh	r3, [r3, #10]
 800c1de:	025b      	lsls	r3, r3, #9
 800c1e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c1e2:	e019      	b.n	800c218 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	6979      	ldr	r1, [r7, #20]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff fd01 	bl	800bbf0 <get_fat>
 800c1ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1f6:	d101      	bne.n	800c1fc <dir_sdi+0x88>
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	e032      	b.n	800c262 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d904      	bls.n	800c20c <dir_sdi+0x98>
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	695b      	ldr	r3, [r3, #20]
 800c206:	697a      	ldr	r2, [r7, #20]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d301      	bcc.n	800c210 <dir_sdi+0x9c>
 800c20c:	2302      	movs	r3, #2
 800c20e:	e028      	b.n	800c262 <dir_sdi+0xee>
			ofs -= csz;
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d2e1      	bcs.n	800c1e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800c220:	6979      	ldr	r1, [r7, #20]
 800c222:	6938      	ldr	r0, [r7, #16]
 800c224:	f7ff fcc6 	bl	800bbb4 <clust2sect>
 800c228:	4602      	mov	r2, r0
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d101      	bne.n	800c240 <dir_sdi+0xcc>
 800c23c:	2302      	movs	r3, #2
 800c23e:	e010      	b.n	800c262 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	69da      	ldr	r2, [r3, #28]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	0a5b      	lsrs	r3, r3, #9
 800c248:	441a      	add	r2, r3
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c25a:	441a      	add	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3718      	adds	r7, #24
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}

0800c26a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c26a:	b580      	push	{r7, lr}
 800c26c:	b086      	sub	sp, #24
 800c26e:	af00      	add	r7, sp, #0
 800c270:	6078      	str	r0, [r7, #4]
 800c272:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	695b      	ldr	r3, [r3, #20]
 800c27e:	3320      	adds	r3, #32
 800c280:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	69db      	ldr	r3, [r3, #28]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <dir_next+0x28>
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c290:	d301      	bcc.n	800c296 <dir_next+0x2c>
 800c292:	2304      	movs	r3, #4
 800c294:	e0aa      	b.n	800c3ec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f040 8098 	bne.w	800c3d2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	69db      	ldr	r3, [r3, #28]
 800c2a6:	1c5a      	adds	r2, r3, #1
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	699b      	ldr	r3, [r3, #24]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d10b      	bne.n	800c2cc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	095b      	lsrs	r3, r3, #5
 800c2b8:	68fa      	ldr	r2, [r7, #12]
 800c2ba:	8912      	ldrh	r2, [r2, #8]
 800c2bc:	4293      	cmp	r3, r2
 800c2be:	f0c0 8088 	bcc.w	800c3d2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	61da      	str	r2, [r3, #28]
 800c2c8:	2304      	movs	r3, #4
 800c2ca:	e08f      	b.n	800c3ec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	0a5b      	lsrs	r3, r3, #9
 800c2d0:	68fa      	ldr	r2, [r7, #12]
 800c2d2:	8952      	ldrh	r2, [r2, #10]
 800c2d4:	3a01      	subs	r2, #1
 800c2d6:	4013      	ands	r3, r2
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d17a      	bne.n	800c3d2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	699b      	ldr	r3, [r3, #24]
 800c2e2:	4619      	mov	r1, r3
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	f7ff fc83 	bl	800bbf0 <get_fat>
 800c2ea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d801      	bhi.n	800c2f6 <dir_next+0x8c>
 800c2f2:	2302      	movs	r3, #2
 800c2f4:	e07a      	b.n	800c3ec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2fc:	d101      	bne.n	800c302 <dir_next+0x98>
 800c2fe:	2301      	movs	r3, #1
 800c300:	e074      	b.n	800c3ec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	695b      	ldr	r3, [r3, #20]
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	429a      	cmp	r2, r3
 800c30a:	d358      	bcc.n	800c3be <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d104      	bne.n	800c31c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2200      	movs	r2, #0
 800c316:	61da      	str	r2, [r3, #28]
 800c318:	2304      	movs	r3, #4
 800c31a:	e067      	b.n	800c3ec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	699b      	ldr	r3, [r3, #24]
 800c322:	4619      	mov	r1, r3
 800c324:	4610      	mov	r0, r2
 800c326:	f7ff fe5a 	bl	800bfde <create_chain>
 800c32a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c32c:	697b      	ldr	r3, [r7, #20]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d101      	bne.n	800c336 <dir_next+0xcc>
 800c332:	2307      	movs	r3, #7
 800c334:	e05a      	b.n	800c3ec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b01      	cmp	r3, #1
 800c33a:	d101      	bne.n	800c340 <dir_next+0xd6>
 800c33c:	2302      	movs	r3, #2
 800c33e:	e055      	b.n	800c3ec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c346:	d101      	bne.n	800c34c <dir_next+0xe2>
 800c348:	2301      	movs	r3, #1
 800c34a:	e04f      	b.n	800c3ec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c34c:	68f8      	ldr	r0, [r7, #12]
 800c34e:	f7ff fb51 	bl	800b9f4 <sync_window>
 800c352:	4603      	mov	r3, r0
 800c354:	2b00      	cmp	r3, #0
 800c356:	d001      	beq.n	800c35c <dir_next+0xf2>
 800c358:	2301      	movs	r3, #1
 800c35a:	e047      	b.n	800c3ec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	3330      	adds	r3, #48	; 0x30
 800c360:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c364:	2100      	movs	r1, #0
 800c366:	4618      	mov	r0, r3
 800c368:	f7ff f984 	bl	800b674 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c36c:	2300      	movs	r3, #0
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	6979      	ldr	r1, [r7, #20]
 800c372:	68f8      	ldr	r0, [r7, #12]
 800c374:	f7ff fc1e 	bl	800bbb4 <clust2sect>
 800c378:	4602      	mov	r2, r0
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	62da      	str	r2, [r3, #44]	; 0x2c
 800c37e:	e012      	b.n	800c3a6 <dir_next+0x13c>
						fs->wflag = 1;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2201      	movs	r2, #1
 800c384:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c386:	68f8      	ldr	r0, [r7, #12]
 800c388:	f7ff fb34 	bl	800b9f4 <sync_window>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <dir_next+0x12c>
 800c392:	2301      	movs	r3, #1
 800c394:	e02a      	b.n	800c3ec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	3301      	adds	r3, #1
 800c39a:	613b      	str	r3, [r7, #16]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	62da      	str	r2, [r3, #44]	; 0x2c
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	895b      	ldrh	r3, [r3, #10]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d3e6      	bcc.n	800c380 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	1ad2      	subs	r2, r2, r3
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	697a      	ldr	r2, [r7, #20]
 800c3c2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c3c4:	6979      	ldr	r1, [r7, #20]
 800c3c6:	68f8      	ldr	r0, [r7, #12]
 800c3c8:	f7ff fbf4 	bl	800bbb4 <clust2sect>
 800c3cc:	4602      	mov	r2, r0
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	68ba      	ldr	r2, [r7, #8]
 800c3d6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3e4:	441a      	add	r2, r3
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c3ea:	2300      	movs	r3, #0
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3718      	adds	r7, #24
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b086      	sub	sp, #24
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c404:	2100      	movs	r1, #0
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f7ff feb4 	bl	800c174 <dir_sdi>
 800c40c:	4603      	mov	r3, r0
 800c40e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d12b      	bne.n	800c46e <dir_alloc+0x7a>
		n = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	69db      	ldr	r3, [r3, #28]
 800c41e:	4619      	mov	r1, r3
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	f7ff fb2b 	bl	800ba7c <move_window>
 800c426:	4603      	mov	r3, r0
 800c428:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d11d      	bne.n	800c46c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a1b      	ldr	r3, [r3, #32]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2be5      	cmp	r3, #229	; 0xe5
 800c438:	d004      	beq.n	800c444 <dir_alloc+0x50>
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6a1b      	ldr	r3, [r3, #32]
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d107      	bne.n	800c454 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	3301      	adds	r3, #1
 800c448:	613b      	str	r3, [r7, #16]
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	683b      	ldr	r3, [r7, #0]
 800c44e:	429a      	cmp	r2, r3
 800c450:	d102      	bne.n	800c458 <dir_alloc+0x64>
 800c452:	e00c      	b.n	800c46e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c454:	2300      	movs	r3, #0
 800c456:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c458:	2101      	movs	r1, #1
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff ff05 	bl	800c26a <dir_next>
 800c460:	4603      	mov	r3, r0
 800c462:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c464:	7dfb      	ldrb	r3, [r7, #23]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0d7      	beq.n	800c41a <dir_alloc+0x26>
 800c46a:	e000      	b.n	800c46e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c46c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c46e:	7dfb      	ldrb	r3, [r7, #23]
 800c470:	2b04      	cmp	r3, #4
 800c472:	d101      	bne.n	800c478 <dir_alloc+0x84>
 800c474:	2307      	movs	r3, #7
 800c476:	75fb      	strb	r3, [r7, #23]
	return res;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b084      	sub	sp, #16
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	331a      	adds	r3, #26
 800c490:	4618      	mov	r0, r3
 800c492:	f7ff f851 	bl	800b538 <ld_word>
 800c496:	4603      	mov	r3, r0
 800c498:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	781b      	ldrb	r3, [r3, #0]
 800c49e:	2b03      	cmp	r3, #3
 800c4a0:	d109      	bne.n	800c4b6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c4a2:	683b      	ldr	r3, [r7, #0]
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff f846 	bl	800b538 <ld_word>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	041b      	lsls	r3, r3, #16
 800c4b0:	68fa      	ldr	r2, [r7, #12]
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	3710      	adds	r7, #16
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bd80      	pop	{r7, pc}

0800c4c0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b084      	sub	sp, #16
 800c4c4:	af00      	add	r7, sp, #0
 800c4c6:	60f8      	str	r0, [r7, #12]
 800c4c8:	60b9      	str	r1, [r7, #8]
 800c4ca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	331a      	adds	r3, #26
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	b292      	uxth	r2, r2
 800c4d4:	4611      	mov	r1, r2
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f7ff f867 	bl	800b5aa <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	781b      	ldrb	r3, [r3, #0]
 800c4e0:	2b03      	cmp	r3, #3
 800c4e2:	d109      	bne.n	800c4f8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f103 0214 	add.w	r2, r3, #20
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	0c1b      	lsrs	r3, r3, #16
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4610      	mov	r0, r2
 800c4f4:	f7ff f859 	bl	800b5aa <st_word>
	}
}
 800c4f8:	bf00      	nop
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c50e:	2100      	movs	r1, #0
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f7ff fe2f 	bl	800c174 <dir_sdi>
 800c516:	4603      	mov	r3, r0
 800c518:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800c51a:	7dfb      	ldrb	r3, [r7, #23]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <dir_find+0x24>
 800c520:	7dfb      	ldrb	r3, [r7, #23]
 800c522:	e03e      	b.n	800c5a2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	69db      	ldr	r3, [r3, #28]
 800c528:	4619      	mov	r1, r3
 800c52a:	6938      	ldr	r0, [r7, #16]
 800c52c:	f7ff faa6 	bl	800ba7c <move_window>
 800c530:	4603      	mov	r3, r0
 800c532:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c534:	7dfb      	ldrb	r3, [r7, #23]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d12f      	bne.n	800c59a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6a1b      	ldr	r3, [r3, #32]
 800c53e:	781b      	ldrb	r3, [r3, #0]
 800c540:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c542:	7bfb      	ldrb	r3, [r7, #15]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d102      	bne.n	800c54e <dir_find+0x4e>
 800c548:	2304      	movs	r3, #4
 800c54a:	75fb      	strb	r3, [r7, #23]
 800c54c:	e028      	b.n	800c5a0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	6a1b      	ldr	r3, [r3, #32]
 800c552:	330b      	adds	r3, #11
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6a1b      	ldr	r3, [r3, #32]
 800c564:	330b      	adds	r3, #11
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	f003 0308 	and.w	r3, r3, #8
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d10a      	bne.n	800c586 <dir_find+0x86>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6a18      	ldr	r0, [r3, #32]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	3324      	adds	r3, #36	; 0x24
 800c578:	220b      	movs	r2, #11
 800c57a:	4619      	mov	r1, r3
 800c57c:	f7ff f894 	bl	800b6a8 <mem_cmp>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d00b      	beq.n	800c59e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c586:	2100      	movs	r1, #0
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f7ff fe6e 	bl	800c26a <dir_next>
 800c58e:	4603      	mov	r3, r0
 800c590:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800c592:	7dfb      	ldrb	r3, [r7, #23]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d0c5      	beq.n	800c524 <dir_find+0x24>
 800c598:	e002      	b.n	800c5a0 <dir_find+0xa0>
		if (res != FR_OK) break;
 800c59a:	bf00      	nop
 800c59c:	e000      	b.n	800c5a0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800c59e:	bf00      	nop

	return res;
 800c5a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3718      	adds	r7, #24
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b084      	sub	sp, #16
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800c5b8:	2101      	movs	r1, #1
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f7ff ff1a 	bl	800c3f4 <dir_alloc>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c5c4:	7bfb      	ldrb	r3, [r7, #15]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d11c      	bne.n	800c604 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	69db      	ldr	r3, [r3, #28]
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f7ff fa53 	bl	800ba7c <move_window>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c5da:	7bfb      	ldrb	r3, [r7, #15]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d111      	bne.n	800c604 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	6a1b      	ldr	r3, [r3, #32]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	f7ff f843 	bl	800b674 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6a18      	ldr	r0, [r3, #32]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3324      	adds	r3, #36	; 0x24
 800c5f6:	220b      	movs	r2, #11
 800c5f8:	4619      	mov	r1, r3
 800c5fa:	f7ff f81b 	bl	800b634 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2201      	movs	r2, #1
 800c602:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c604:	7bfb      	ldrb	r3, [r7, #15]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
	...

0800c610 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b088      	sub	sp, #32
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	60fb      	str	r3, [r7, #12]
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3324      	adds	r3, #36	; 0x24
 800c624:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800c626:	220b      	movs	r2, #11
 800c628:	2120      	movs	r1, #32
 800c62a:	68b8      	ldr	r0, [r7, #8]
 800c62c:	f7ff f822 	bl	800b674 <mem_set>
	si = i = 0; ni = 8;
 800c630:	2300      	movs	r3, #0
 800c632:	613b      	str	r3, [r7, #16]
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	61fb      	str	r3, [r7, #28]
 800c638:	2308      	movs	r3, #8
 800c63a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800c63c:	69fb      	ldr	r3, [r7, #28]
 800c63e:	1c5a      	adds	r2, r3, #1
 800c640:	61fa      	str	r2, [r7, #28]
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	4413      	add	r3, r2
 800c646:	781b      	ldrb	r3, [r3, #0]
 800c648:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c64a:	7efb      	ldrb	r3, [r7, #27]
 800c64c:	2b20      	cmp	r3, #32
 800c64e:	d94e      	bls.n	800c6ee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800c650:	7efb      	ldrb	r3, [r7, #27]
 800c652:	2b2f      	cmp	r3, #47	; 0x2f
 800c654:	d006      	beq.n	800c664 <create_name+0x54>
 800c656:	7efb      	ldrb	r3, [r7, #27]
 800c658:	2b5c      	cmp	r3, #92	; 0x5c
 800c65a:	d110      	bne.n	800c67e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c65c:	e002      	b.n	800c664 <create_name+0x54>
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	3301      	adds	r3, #1
 800c662:	61fb      	str	r3, [r7, #28]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	69fb      	ldr	r3, [r7, #28]
 800c668:	4413      	add	r3, r2
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	2b2f      	cmp	r3, #47	; 0x2f
 800c66e:	d0f6      	beq.n	800c65e <create_name+0x4e>
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	4413      	add	r3, r2
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	2b5c      	cmp	r3, #92	; 0x5c
 800c67a:	d0f0      	beq.n	800c65e <create_name+0x4e>
			break;
 800c67c:	e038      	b.n	800c6f0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800c67e:	7efb      	ldrb	r3, [r7, #27]
 800c680:	2b2e      	cmp	r3, #46	; 0x2e
 800c682:	d003      	beq.n	800c68c <create_name+0x7c>
 800c684:	693a      	ldr	r2, [r7, #16]
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d30c      	bcc.n	800c6a6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	2b0b      	cmp	r3, #11
 800c690:	d002      	beq.n	800c698 <create_name+0x88>
 800c692:	7efb      	ldrb	r3, [r7, #27]
 800c694:	2b2e      	cmp	r3, #46	; 0x2e
 800c696:	d001      	beq.n	800c69c <create_name+0x8c>
 800c698:	2306      	movs	r3, #6
 800c69a:	e044      	b.n	800c726 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800c69c:	2308      	movs	r3, #8
 800c69e:	613b      	str	r3, [r7, #16]
 800c6a0:	230b      	movs	r3, #11
 800c6a2:	617b      	str	r3, [r7, #20]
			continue;
 800c6a4:	e022      	b.n	800c6ec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800c6a6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da04      	bge.n	800c6b8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800c6ae:	7efb      	ldrb	r3, [r7, #27]
 800c6b0:	3b80      	subs	r3, #128	; 0x80
 800c6b2:	4a1f      	ldr	r2, [pc, #124]	; (800c730 <create_name+0x120>)
 800c6b4:	5cd3      	ldrb	r3, [r2, r3]
 800c6b6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800c6b8:	7efb      	ldrb	r3, [r7, #27]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	481d      	ldr	r0, [pc, #116]	; (800c734 <create_name+0x124>)
 800c6be:	f7ff f819 	bl	800b6f4 <chk_chr>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d001      	beq.n	800c6cc <create_name+0xbc>
 800c6c8:	2306      	movs	r3, #6
 800c6ca:	e02c      	b.n	800c726 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800c6cc:	7efb      	ldrb	r3, [r7, #27]
 800c6ce:	2b60      	cmp	r3, #96	; 0x60
 800c6d0:	d905      	bls.n	800c6de <create_name+0xce>
 800c6d2:	7efb      	ldrb	r3, [r7, #27]
 800c6d4:	2b7a      	cmp	r3, #122	; 0x7a
 800c6d6:	d802      	bhi.n	800c6de <create_name+0xce>
 800c6d8:	7efb      	ldrb	r3, [r7, #27]
 800c6da:	3b20      	subs	r3, #32
 800c6dc:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	1c5a      	adds	r2, r3, #1
 800c6e2:	613a      	str	r2, [r7, #16]
 800c6e4:	68ba      	ldr	r2, [r7, #8]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	7efa      	ldrb	r2, [r7, #27]
 800c6ea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800c6ec:	e7a6      	b.n	800c63c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800c6ee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800c6f0:	68fa      	ldr	r2, [r7, #12]
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	441a      	add	r2, r3
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d101      	bne.n	800c704 <create_name+0xf4>
 800c700:	2306      	movs	r3, #6
 800c702:	e010      	b.n	800c726 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	2be5      	cmp	r3, #229	; 0xe5
 800c70a:	d102      	bne.n	800c712 <create_name+0x102>
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	2205      	movs	r2, #5
 800c710:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c712:	7efb      	ldrb	r3, [r7, #27]
 800c714:	2b20      	cmp	r3, #32
 800c716:	d801      	bhi.n	800c71c <create_name+0x10c>
 800c718:	2204      	movs	r2, #4
 800c71a:	e000      	b.n	800c71e <create_name+0x10e>
 800c71c:	2200      	movs	r2, #0
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	330b      	adds	r3, #11
 800c722:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800c724:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800c726:	4618      	mov	r0, r3
 800c728:	3720      	adds	r7, #32
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	08012bb4 	.word	0x08012bb4
 800c734:	08012900 	.word	0x08012900

0800c738 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c74c:	e002      	b.n	800c754 <follow_path+0x1c>
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	3301      	adds	r3, #1
 800c752:	603b      	str	r3, [r7, #0]
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	2b2f      	cmp	r3, #47	; 0x2f
 800c75a:	d0f8      	beq.n	800c74e <follow_path+0x16>
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	781b      	ldrb	r3, [r3, #0]
 800c760:	2b5c      	cmp	r3, #92	; 0x5c
 800c762:	d0f4      	beq.n	800c74e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	2200      	movs	r2, #0
 800c768:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	2b1f      	cmp	r3, #31
 800c770:	d80a      	bhi.n	800c788 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2280      	movs	r2, #128	; 0x80
 800c776:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c77a:	2100      	movs	r1, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f7ff fcf9 	bl	800c174 <dir_sdi>
 800c782:	4603      	mov	r3, r0
 800c784:	75fb      	strb	r3, [r7, #23]
 800c786:	e043      	b.n	800c810 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c788:	463b      	mov	r3, r7
 800c78a:	4619      	mov	r1, r3
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f7ff ff3f 	bl	800c610 <create_name>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c796:	7dfb      	ldrb	r3, [r7, #23]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d134      	bne.n	800c806 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f7ff feaf 	bl	800c500 <dir_find>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c7ac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c7ae:	7dfb      	ldrb	r3, [r7, #23]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00a      	beq.n	800c7ca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c7b4:	7dfb      	ldrb	r3, [r7, #23]
 800c7b6:	2b04      	cmp	r3, #4
 800c7b8:	d127      	bne.n	800c80a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	f003 0304 	and.w	r3, r3, #4
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d122      	bne.n	800c80a <follow_path+0xd2>
 800c7c4:	2305      	movs	r3, #5
 800c7c6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c7c8:	e01f      	b.n	800c80a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c7ca:	7afb      	ldrb	r3, [r7, #11]
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d11c      	bne.n	800c80e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	799b      	ldrb	r3, [r3, #6]
 800c7d8:	f003 0310 	and.w	r3, r3, #16
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d102      	bne.n	800c7e6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c7e0:	2305      	movs	r3, #5
 800c7e2:	75fb      	strb	r3, [r7, #23]
 800c7e4:	e014      	b.n	800c810 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	695b      	ldr	r3, [r3, #20]
 800c7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7f4:	4413      	add	r3, r2
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f7ff fe42 	bl	800c482 <ld_clust>
 800c7fe:	4602      	mov	r2, r0
 800c800:	693b      	ldr	r3, [r7, #16]
 800c802:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c804:	e7c0      	b.n	800c788 <follow_path+0x50>
			if (res != FR_OK) break;
 800c806:	bf00      	nop
 800c808:	e002      	b.n	800c810 <follow_path+0xd8>
				break;
 800c80a:	bf00      	nop
 800c80c:	e000      	b.n	800c810 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c80e:	bf00      	nop
			}
		}
	}

	return res;
 800c810:	7dfb      	ldrb	r3, [r7, #23]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3718      	adds	r7, #24
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c81a:	b480      	push	{r7}
 800c81c:	b087      	sub	sp, #28
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c826:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d031      	beq.n	800c894 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	617b      	str	r3, [r7, #20]
 800c836:	e002      	b.n	800c83e <get_ldnumber+0x24>
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	3301      	adds	r3, #1
 800c83c:	617b      	str	r3, [r7, #20]
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	781b      	ldrb	r3, [r3, #0]
 800c842:	2b20      	cmp	r3, #32
 800c844:	d903      	bls.n	800c84e <get_ldnumber+0x34>
 800c846:	697b      	ldr	r3, [r7, #20]
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	2b3a      	cmp	r3, #58	; 0x3a
 800c84c:	d1f4      	bne.n	800c838 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	2b3a      	cmp	r3, #58	; 0x3a
 800c854:	d11c      	bne.n	800c890 <get_ldnumber+0x76>
			tp = *path;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	60fa      	str	r2, [r7, #12]
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	3b30      	subs	r3, #48	; 0x30
 800c866:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	d80e      	bhi.n	800c88c <get_ldnumber+0x72>
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	429a      	cmp	r2, r3
 800c874:	d10a      	bne.n	800c88c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d107      	bne.n	800c88c <get_ldnumber+0x72>
					vol = (int)i;
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	3301      	adds	r3, #1
 800c884:	617b      	str	r3, [r7, #20]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	697a      	ldr	r2, [r7, #20]
 800c88a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	e002      	b.n	800c896 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c890:	2300      	movs	r3, #0
 800c892:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c894:	693b      	ldr	r3, [r7, #16]
}
 800c896:	4618      	mov	r0, r3
 800c898:	371c      	adds	r7, #28
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bc80      	pop	{r7}
 800c89e:	4770      	bx	lr

0800c8a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b082      	sub	sp, #8
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	70da      	strb	r2, [r3, #3]
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8b6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f7ff f8de 	bl	800ba7c <move_window>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d001      	beq.n	800c8ca <check_fs+0x2a>
 800c8c6:	2304      	movs	r3, #4
 800c8c8:	e038      	b.n	800c93c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	3330      	adds	r3, #48	; 0x30
 800c8ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	f7fe fe30 	bl	800b538 <ld_word>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d001      	beq.n	800c8e8 <check_fs+0x48>
 800c8e4:	2303      	movs	r3, #3
 800c8e6:	e029      	b.n	800c93c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8ee:	2be9      	cmp	r3, #233	; 0xe9
 800c8f0:	d009      	beq.n	800c906 <check_fs+0x66>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c8f8:	2beb      	cmp	r3, #235	; 0xeb
 800c8fa:	d11e      	bne.n	800c93a <check_fs+0x9a>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c902:	2b90      	cmp	r3, #144	; 0x90
 800c904:	d119      	bne.n	800c93a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3330      	adds	r3, #48	; 0x30
 800c90a:	3336      	adds	r3, #54	; 0x36
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7fe fe2a 	bl	800b566 <ld_dword>
 800c912:	4603      	mov	r3, r0
 800c914:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c918:	4a0a      	ldr	r2, [pc, #40]	; (800c944 <check_fs+0xa4>)
 800c91a:	4293      	cmp	r3, r2
 800c91c:	d101      	bne.n	800c922 <check_fs+0x82>
 800c91e:	2300      	movs	r3, #0
 800c920:	e00c      	b.n	800c93c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3330      	adds	r3, #48	; 0x30
 800c926:	3352      	adds	r3, #82	; 0x52
 800c928:	4618      	mov	r0, r3
 800c92a:	f7fe fe1c 	bl	800b566 <ld_dword>
 800c92e:	4603      	mov	r3, r0
 800c930:	4a05      	ldr	r2, [pc, #20]	; (800c948 <check_fs+0xa8>)
 800c932:	4293      	cmp	r3, r2
 800c934:	d101      	bne.n	800c93a <check_fs+0x9a>
 800c936:	2300      	movs	r3, #0
 800c938:	e000      	b.n	800c93c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c93a:	2302      	movs	r3, #2
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3708      	adds	r7, #8
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	00544146 	.word	0x00544146
 800c948:	33544146 	.word	0x33544146

0800c94c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b096      	sub	sp, #88	; 0x58
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	4613      	mov	r3, r2
 800c958:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	2200      	movs	r2, #0
 800c95e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff ff5a 	bl	800c81a <get_ldnumber>
 800c966:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	da01      	bge.n	800c972 <find_volume+0x26>
 800c96e:	230b      	movs	r3, #11
 800c970:	e22d      	b.n	800cdce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c972:	4aa1      	ldr	r2, [pc, #644]	; (800cbf8 <find_volume+0x2ac>)
 800c974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c97a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d101      	bne.n	800c986 <find_volume+0x3a>
 800c982:	230c      	movs	r3, #12
 800c984:	e223      	b.n	800cdce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c98a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	f023 0301 	bic.w	r3, r3, #1
 800c992:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c996:	781b      	ldrb	r3, [r3, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01a      	beq.n	800c9d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	785b      	ldrb	r3, [r3, #1]
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	f7fe fd2b 	bl	800b3fc <disk_status>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c9ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9b0:	f003 0301 	and.w	r3, r3, #1
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d10c      	bne.n	800c9d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d007      	beq.n	800c9ce <find_volume+0x82>
 800c9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9c2:	f003 0304 	and.w	r3, r3, #4
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d001      	beq.n	800c9ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c9ca:	230a      	movs	r3, #10
 800c9cc:	e1ff      	b.n	800cdce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	e1fd      	b.n	800cdce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9d4:	2200      	movs	r2, #0
 800c9d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c9d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9da:	b2da      	uxtb	r2, r3
 800c9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e2:	785b      	ldrb	r3, [r3, #1]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f7fe fd23 	bl	800b430 <disk_initialize>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c9f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c9f4:	f003 0301 	and.w	r3, r3, #1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d001      	beq.n	800ca00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e1e6      	b.n	800cdce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ca00:	79fb      	ldrb	r3, [r7, #7]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d007      	beq.n	800ca16 <find_volume+0xca>
 800ca06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ca0a:	f003 0304 	and.w	r3, r3, #4
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800ca12:	230a      	movs	r3, #10
 800ca14:	e1db      	b.n	800cdce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ca16:	2300      	movs	r3, #0
 800ca18:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ca1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ca1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ca1e:	f7ff ff3f 	bl	800c8a0 <check_fs>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ca28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ca2c:	2b02      	cmp	r3, #2
 800ca2e:	d149      	bne.n	800cac4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca30:	2300      	movs	r3, #0
 800ca32:	643b      	str	r3, [r7, #64]	; 0x40
 800ca34:	e01e      	b.n	800ca74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ca36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ca3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca3e:	011b      	lsls	r3, r3, #4
 800ca40:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ca44:	4413      	add	r3, r2
 800ca46:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ca48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca4a:	3304      	adds	r3, #4
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d006      	beq.n	800ca60 <find_volume+0x114>
 800ca52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca54:	3308      	adds	r3, #8
 800ca56:	4618      	mov	r0, r3
 800ca58:	f7fe fd85 	bl	800b566 <ld_dword>
 800ca5c:	4602      	mov	r2, r0
 800ca5e:	e000      	b.n	800ca62 <find_volume+0x116>
 800ca60:	2200      	movs	r2, #0
 800ca62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	3358      	adds	r3, #88	; 0x58
 800ca68:	443b      	add	r3, r7
 800ca6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ca6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca70:	3301      	adds	r3, #1
 800ca72:	643b      	str	r3, [r7, #64]	; 0x40
 800ca74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d9dd      	bls.n	800ca36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ca7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <find_volume+0x13e>
 800ca84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca86:	3b01      	subs	r3, #1
 800ca88:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ca8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	3358      	adds	r3, #88	; 0x58
 800ca90:	443b      	add	r3, r7
 800ca92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ca96:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ca98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d005      	beq.n	800caaa <find_volume+0x15e>
 800ca9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800caa0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800caa2:	f7ff fefd 	bl	800c8a0 <check_fs>
 800caa6:	4603      	mov	r3, r0
 800caa8:	e000      	b.n	800caac <find_volume+0x160>
 800caaa:	2303      	movs	r3, #3
 800caac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cab0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d905      	bls.n	800cac4 <find_volume+0x178>
 800cab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caba:	3301      	adds	r3, #1
 800cabc:	643b      	str	r3, [r7, #64]	; 0x40
 800cabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac0:	2b03      	cmp	r3, #3
 800cac2:	d9e2      	bls.n	800ca8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800cac4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cac8:	2b04      	cmp	r3, #4
 800caca:	d101      	bne.n	800cad0 <find_volume+0x184>
 800cacc:	2301      	movs	r3, #1
 800cace:	e17e      	b.n	800cdce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800cad0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cad4:	2b01      	cmp	r3, #1
 800cad6:	d901      	bls.n	800cadc <find_volume+0x190>
 800cad8:	230d      	movs	r3, #13
 800cada:	e178      	b.n	800cdce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cadc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cade:	3330      	adds	r3, #48	; 0x30
 800cae0:	330b      	adds	r3, #11
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fe fd28 	bl	800b538 <ld_word>
 800cae8:	4603      	mov	r3, r0
 800caea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caee:	d001      	beq.n	800caf4 <find_volume+0x1a8>
 800caf0:	230d      	movs	r3, #13
 800caf2:	e16c      	b.n	800cdce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800caf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf6:	3330      	adds	r3, #48	; 0x30
 800caf8:	3316      	adds	r3, #22
 800cafa:	4618      	mov	r0, r3
 800cafc:	f7fe fd1c 	bl	800b538 <ld_word>
 800cb00:	4603      	mov	r3, r0
 800cb02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cb04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d106      	bne.n	800cb18 <find_volume+0x1cc>
 800cb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb0c:	3330      	adds	r3, #48	; 0x30
 800cb0e:	3324      	adds	r3, #36	; 0x24
 800cb10:	4618      	mov	r0, r3
 800cb12:	f7fe fd28 	bl	800b566 <ld_dword>
 800cb16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800cb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cb1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb20:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb2a:	789b      	ldrb	r3, [r3, #2]
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d005      	beq.n	800cb3c <find_volume+0x1f0>
 800cb30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb32:	789b      	ldrb	r3, [r3, #2]
 800cb34:	2b02      	cmp	r3, #2
 800cb36:	d001      	beq.n	800cb3c <find_volume+0x1f0>
 800cb38:	230d      	movs	r3, #13
 800cb3a:	e148      	b.n	800cdce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cb3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb3e:	789b      	ldrb	r3, [r3, #2]
 800cb40:	461a      	mov	r2, r3
 800cb42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb44:	fb02 f303 	mul.w	r3, r2, r3
 800cb48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb58:	895b      	ldrh	r3, [r3, #10]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d008      	beq.n	800cb70 <find_volume+0x224>
 800cb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb60:	895b      	ldrh	r3, [r3, #10]
 800cb62:	461a      	mov	r2, r3
 800cb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb66:	895b      	ldrh	r3, [r3, #10]
 800cb68:	3b01      	subs	r3, #1
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <find_volume+0x228>
 800cb70:	230d      	movs	r3, #13
 800cb72:	e12c      	b.n	800cdce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cb74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb76:	3330      	adds	r3, #48	; 0x30
 800cb78:	3311      	adds	r3, #17
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7fe fcdc 	bl	800b538 <ld_word>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cb88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8a:	891b      	ldrh	r3, [r3, #8]
 800cb8c:	f003 030f 	and.w	r3, r3, #15
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d001      	beq.n	800cb9a <find_volume+0x24e>
 800cb96:	230d      	movs	r3, #13
 800cb98:	e119      	b.n	800cdce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cb9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb9c:	3330      	adds	r3, #48	; 0x30
 800cb9e:	3313      	adds	r3, #19
 800cba0:	4618      	mov	r0, r3
 800cba2:	f7fe fcc9 	bl	800b538 <ld_word>
 800cba6:	4603      	mov	r3, r0
 800cba8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cbaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d106      	bne.n	800cbbe <find_volume+0x272>
 800cbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbb2:	3330      	adds	r3, #48	; 0x30
 800cbb4:	3320      	adds	r3, #32
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe fcd5 	bl	800b566 <ld_dword>
 800cbbc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800cbbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbc0:	3330      	adds	r3, #48	; 0x30
 800cbc2:	330e      	adds	r3, #14
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fe fcb7 	bl	800b538 <ld_word>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800cbce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <find_volume+0x28c>
 800cbd4:	230d      	movs	r3, #13
 800cbd6:	e0fa      	b.n	800cdce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800cbd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cbda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cbdc:	4413      	add	r3, r2
 800cbde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbe0:	8912      	ldrh	r2, [r2, #8]
 800cbe2:	0912      	lsrs	r2, r2, #4
 800cbe4:	b292      	uxth	r2, r2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cbea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d204      	bcs.n	800cbfc <find_volume+0x2b0>
 800cbf2:	230d      	movs	r3, #13
 800cbf4:	e0eb      	b.n	800cdce <find_volume+0x482>
 800cbf6:	bf00      	nop
 800cbf8:	200065f4 	.word	0x200065f4
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800cbfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cc04:	8952      	ldrh	r2, [r2, #10]
 800cc06:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc0a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <find_volume+0x2ca>
 800cc12:	230d      	movs	r3, #13
 800cc14:	e0db      	b.n	800cdce <find_volume+0x482>
		fmt = FS_FAT32;
 800cc16:	2303      	movs	r3, #3
 800cc18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc1e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d802      	bhi.n	800cc2c <find_volume+0x2e0>
 800cc26:	2302      	movs	r3, #2
 800cc28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d802      	bhi.n	800cc3c <find_volume+0x2f0>
 800cc36:	2301      	movs	r3, #1
 800cc38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc3e:	1c9a      	adds	r2, r3, #2
 800cc40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc42:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc48:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cc4a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800cc4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4e:	441a      	add	r2, r3
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800cc54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc58:	441a      	add	r2, r3
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800cc5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cc62:	2b03      	cmp	r3, #3
 800cc64:	d11e      	bne.n	800cca4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc68:	3330      	adds	r3, #48	; 0x30
 800cc6a:	332a      	adds	r3, #42	; 0x2a
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7fe fc63 	bl	800b538 <ld_word>
 800cc72:	4603      	mov	r3, r0
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d001      	beq.n	800cc7c <find_volume+0x330>
 800cc78:	230d      	movs	r3, #13
 800cc7a:	e0a8      	b.n	800cdce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	891b      	ldrh	r3, [r3, #8]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d001      	beq.n	800cc88 <find_volume+0x33c>
 800cc84:	230d      	movs	r3, #13
 800cc86:	e0a2      	b.n	800cdce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cc88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc8a:	3330      	adds	r3, #48	; 0x30
 800cc8c:	332c      	adds	r3, #44	; 0x2c
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f7fe fc69 	bl	800b566 <ld_dword>
 800cc94:	4602      	mov	r2, r0
 800cc96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc98:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	695b      	ldr	r3, [r3, #20]
 800cc9e:	009b      	lsls	r3, r3, #2
 800cca0:	647b      	str	r3, [r7, #68]	; 0x44
 800cca2:	e01f      	b.n	800cce4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	891b      	ldrh	r3, [r3, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d101      	bne.n	800ccb0 <find_volume+0x364>
 800ccac:	230d      	movs	r3, #13
 800ccae:	e08e      	b.n	800cdce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ccb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccb2:	6a1a      	ldr	r2, [r3, #32]
 800ccb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb6:	441a      	add	r2, r3
 800ccb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ccbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ccc0:	2b02      	cmp	r3, #2
 800ccc2:	d103      	bne.n	800cccc <find_volume+0x380>
 800ccc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccc6:	695b      	ldr	r3, [r3, #20]
 800ccc8:	005b      	lsls	r3, r3, #1
 800ccca:	e00a      	b.n	800cce2 <find_volume+0x396>
 800cccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccce:	695a      	ldr	r2, [r3, #20]
 800ccd0:	4613      	mov	r3, r2
 800ccd2:	005b      	lsls	r3, r3, #1
 800ccd4:	4413      	add	r3, r2
 800ccd6:	085a      	lsrs	r2, r3, #1
 800ccd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccda:	695b      	ldr	r3, [r3, #20]
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cce2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	699a      	ldr	r2, [r3, #24]
 800cce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ccee:	0a5b      	lsrs	r3, r3, #9
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d201      	bcs.n	800ccf8 <find_volume+0x3ac>
 800ccf4:	230d      	movs	r3, #13
 800ccf6:	e06a      	b.n	800cdce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ccf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccfe:	611a      	str	r2, [r3, #16]
 800cd00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd02:	691a      	ldr	r2, [r3, #16]
 800cd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd06:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800cd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0a:	2280      	movs	r2, #128	; 0x80
 800cd0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800cd0e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cd12:	2b03      	cmp	r3, #3
 800cd14:	d149      	bne.n	800cdaa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800cd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd18:	3330      	adds	r3, #48	; 0x30
 800cd1a:	3330      	adds	r3, #48	; 0x30
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	f7fe fc0b 	bl	800b538 <ld_word>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b01      	cmp	r3, #1
 800cd26:	d140      	bne.n	800cdaa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800cd28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd2a:	3301      	adds	r3, #1
 800cd2c:	4619      	mov	r1, r3
 800cd2e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cd30:	f7fe fea4 	bl	800ba7c <move_window>
 800cd34:	4603      	mov	r3, r0
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d137      	bne.n	800cdaa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800cd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800cd40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd42:	3330      	adds	r3, #48	; 0x30
 800cd44:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f7fe fbf5 	bl	800b538 <ld_word>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	461a      	mov	r2, r3
 800cd52:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cd56:	429a      	cmp	r2, r3
 800cd58:	d127      	bne.n	800cdaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800cd5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd5c:	3330      	adds	r3, #48	; 0x30
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7fe fc01 	bl	800b566 <ld_dword>
 800cd64:	4603      	mov	r3, r0
 800cd66:	4a1c      	ldr	r2, [pc, #112]	; (800cdd8 <find_volume+0x48c>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d11e      	bne.n	800cdaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800cd6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd6e:	3330      	adds	r3, #48	; 0x30
 800cd70:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800cd74:	4618      	mov	r0, r3
 800cd76:	f7fe fbf6 	bl	800b566 <ld_dword>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	4a17      	ldr	r2, [pc, #92]	; (800cddc <find_volume+0x490>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d113      	bne.n	800cdaa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800cd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd84:	3330      	adds	r3, #48	; 0x30
 800cd86:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7fe fbeb 	bl	800b566 <ld_dword>
 800cd90:	4602      	mov	r2, r0
 800cd92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd94:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800cd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd98:	3330      	adds	r3, #48	; 0x30
 800cd9a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f7fe fbe1 	bl	800b566 <ld_dword>
 800cda4:	4602      	mov	r2, r0
 800cda6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cda8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cdaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800cdb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800cdb2:	4b0b      	ldr	r3, [pc, #44]	; (800cde0 <find_volume+0x494>)
 800cdb4:	881b      	ldrh	r3, [r3, #0]
 800cdb6:	3301      	adds	r3, #1
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	4b09      	ldr	r3, [pc, #36]	; (800cde0 <find_volume+0x494>)
 800cdbc:	801a      	strh	r2, [r3, #0]
 800cdbe:	4b08      	ldr	r3, [pc, #32]	; (800cde0 <find_volume+0x494>)
 800cdc0:	881a      	ldrh	r2, [r3, #0]
 800cdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cdc6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cdc8:	f7fe fdf0 	bl	800b9ac <clear_lock>
#endif
	return FR_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3758      	adds	r7, #88	; 0x58
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	41615252 	.word	0x41615252
 800cddc:	61417272 	.word	0x61417272
 800cde0:	200065f8 	.word	0x200065f8

0800cde4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b084      	sub	sp, #16
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800cdee:	2309      	movs	r3, #9
 800cdf0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01c      	beq.n	800ce32 <validate+0x4e>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d018      	beq.n	800ce32 <validate+0x4e>
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d013      	beq.n	800ce32 <validate+0x4e>
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	889a      	ldrh	r2, [r3, #4]
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	88db      	ldrh	r3, [r3, #6]
 800ce14:	429a      	cmp	r2, r3
 800ce16:	d10c      	bne.n	800ce32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	785b      	ldrb	r3, [r3, #1]
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7fe faec 	bl	800b3fc <disk_status>
 800ce24:	4603      	mov	r3, r0
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d101      	bne.n	800ce32 <validate+0x4e>
			res = FR_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ce32:	7bfb      	ldrb	r3, [r7, #15]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d102      	bne.n	800ce3e <validate+0x5a>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	e000      	b.n	800ce40 <validate+0x5c>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	6013      	str	r3, [r2, #0]
	return res;
 800ce44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
	...

0800ce50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b088      	sub	sp, #32
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	60f8      	str	r0, [r7, #12]
 800ce58:	60b9      	str	r1, [r7, #8]
 800ce5a:	4613      	mov	r3, r2
 800ce5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ce5e:	68bb      	ldr	r3, [r7, #8]
 800ce60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ce62:	f107 0310 	add.w	r3, r7, #16
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7ff fcd7 	bl	800c81a <get_ldnumber>
 800ce6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce6e:	69fb      	ldr	r3, [r7, #28]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da01      	bge.n	800ce78 <f_mount+0x28>
 800ce74:	230b      	movs	r3, #11
 800ce76:	e02b      	b.n	800ced0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ce78:	4a17      	ldr	r2, [pc, #92]	; (800ced8 <f_mount+0x88>)
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d005      	beq.n	800ce94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ce88:	69b8      	ldr	r0, [r7, #24]
 800ce8a:	f7fe fd8f 	bl	800b9ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ce8e:	69bb      	ldr	r3, [r7, #24]
 800ce90:	2200      	movs	r2, #0
 800ce92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d002      	beq.n	800cea0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cea0:	68fa      	ldr	r2, [r7, #12]
 800cea2:	490d      	ldr	r1, [pc, #52]	; (800ced8 <f_mount+0x88>)
 800cea4:	69fb      	ldr	r3, [r7, #28]
 800cea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d002      	beq.n	800ceb6 <f_mount+0x66>
 800ceb0:	79fb      	ldrb	r3, [r7, #7]
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d001      	beq.n	800ceba <f_mount+0x6a>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	e00a      	b.n	800ced0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ceba:	f107 010c 	add.w	r1, r7, #12
 800cebe:	f107 0308 	add.w	r3, r7, #8
 800cec2:	2200      	movs	r2, #0
 800cec4:	4618      	mov	r0, r3
 800cec6:	f7ff fd41 	bl	800c94c <find_volume>
 800ceca:	4603      	mov	r3, r0
 800cecc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cece:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3720      	adds	r7, #32
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}
 800ced8:	200065f4 	.word	0x200065f4

0800cedc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b098      	sub	sp, #96	; 0x60
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	4613      	mov	r3, r2
 800cee8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d101      	bne.n	800cef4 <f_open+0x18>
 800cef0:	2309      	movs	r3, #9
 800cef2:	e1ad      	b.n	800d250 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cef4:	79fb      	ldrb	r3, [r7, #7]
 800cef6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cefa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800cefc:	79fa      	ldrb	r2, [r7, #7]
 800cefe:	f107 0110 	add.w	r1, r7, #16
 800cf02:	f107 0308 	add.w	r3, r7, #8
 800cf06:	4618      	mov	r0, r3
 800cf08:	f7ff fd20 	bl	800c94c <find_volume>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800cf12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f040 8191 	bne.w	800d23e <f_open+0x362>
		dj.obj.fs = fs;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800cf20:	68ba      	ldr	r2, [r7, #8]
 800cf22:	f107 0314 	add.w	r3, r7, #20
 800cf26:	4611      	mov	r1, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f7ff fc05 	bl	800c738 <follow_path>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800cf34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11a      	bne.n	800cf72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800cf3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800cf40:	b25b      	sxtb	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	da03      	bge.n	800cf4e <f_open+0x72>
				res = FR_INVALID_NAME;
 800cf46:	2306      	movs	r3, #6
 800cf48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cf4c:	e011      	b.n	800cf72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	f023 0301 	bic.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	bf14      	ite	ne
 800cf58:	2301      	movne	r3, #1
 800cf5a:	2300      	moveq	r3, #0
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	461a      	mov	r2, r3
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	4611      	mov	r1, r2
 800cf66:	4618      	mov	r0, r3
 800cf68:	f7fe fbde 	bl	800b728 <chk_lock>
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800cf72:	79fb      	ldrb	r3, [r7, #7]
 800cf74:	f003 031c 	and.w	r3, r3, #28
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d07f      	beq.n	800d07c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800cf7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d017      	beq.n	800cfb4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800cf84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cf88:	2b04      	cmp	r3, #4
 800cf8a:	d10e      	bne.n	800cfaa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800cf8c:	f7fe fc26 	bl	800b7dc <enq_lock>
 800cf90:	4603      	mov	r3, r0
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d006      	beq.n	800cfa4 <f_open+0xc8>
 800cf96:	f107 0314 	add.w	r3, r7, #20
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7ff fb05 	bl	800c5aa <dir_register>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	e000      	b.n	800cfa6 <f_open+0xca>
 800cfa4:	2312      	movs	r3, #18
 800cfa6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800cfaa:	79fb      	ldrb	r3, [r7, #7]
 800cfac:	f043 0308 	orr.w	r3, r3, #8
 800cfb0:	71fb      	strb	r3, [r7, #7]
 800cfb2:	e010      	b.n	800cfd6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800cfb4:	7ebb      	ldrb	r3, [r7, #26]
 800cfb6:	f003 0311 	and.w	r3, r3, #17
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d003      	beq.n	800cfc6 <f_open+0xea>
					res = FR_DENIED;
 800cfbe:	2307      	movs	r3, #7
 800cfc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cfc4:	e007      	b.n	800cfd6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
 800cfc8:	f003 0304 	and.w	r3, r3, #4
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <f_open+0xfa>
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800cfd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d168      	bne.n	800d0b0 <f_open+0x1d4>
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	f003 0308 	and.w	r3, r3, #8
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d063      	beq.n	800d0b0 <f_open+0x1d4>
				dw = GET_FATTIME();
 800cfe8:	f7fd fccc 	bl	800a984 <get_fattime>
 800cfec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800cfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff0:	330e      	adds	r3, #14
 800cff2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7fe faf2 	bl	800b5de <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800cffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffc:	3316      	adds	r3, #22
 800cffe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d000:	4618      	mov	r0, r3
 800d002:	f7fe faec 	bl	800b5de <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d008:	330b      	adds	r3, #11
 800d00a:	2220      	movs	r2, #32
 800d00c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d00e:	693b      	ldr	r3, [r7, #16]
 800d010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d012:	4611      	mov	r1, r2
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff fa34 	bl	800c482 <ld_clust>
 800d01a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d01c:	693b      	ldr	r3, [r7, #16]
 800d01e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d020:	2200      	movs	r2, #0
 800d022:	4618      	mov	r0, r3
 800d024:	f7ff fa4c 	bl	800c4c0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02a:	331c      	adds	r3, #28
 800d02c:	2100      	movs	r1, #0
 800d02e:	4618      	mov	r0, r3
 800d030:	f7fe fad5 	bl	800b5de <st_dword>
					fs->wflag = 1;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	2201      	movs	r2, #1
 800d038:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d037      	beq.n	800d0b0 <f_open+0x1d4>
						dw = fs->winsect;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d044:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d046:	f107 0314 	add.w	r3, r7, #20
 800d04a:	2200      	movs	r2, #0
 800d04c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d04e:	4618      	mov	r0, r3
 800d050:	f7fe ff60 	bl	800bf14 <remove_chain>
 800d054:	4603      	mov	r3, r0
 800d056:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d05a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d126      	bne.n	800d0b0 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d062:	693b      	ldr	r3, [r7, #16]
 800d064:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d066:	4618      	mov	r0, r3
 800d068:	f7fe fd08 	bl	800ba7c <move_window>
 800d06c:	4603      	mov	r3, r0
 800d06e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d072:	693b      	ldr	r3, [r7, #16]
 800d074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d076:	3a01      	subs	r2, #1
 800d078:	60da      	str	r2, [r3, #12]
 800d07a:	e019      	b.n	800d0b0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d080:	2b00      	cmp	r3, #0
 800d082:	d115      	bne.n	800d0b0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d084:	7ebb      	ldrb	r3, [r7, #26]
 800d086:	f003 0310 	and.w	r3, r3, #16
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d003      	beq.n	800d096 <f_open+0x1ba>
					res = FR_NO_FILE;
 800d08e:	2304      	movs	r3, #4
 800d090:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d094:	e00c      	b.n	800d0b0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d096:	79fb      	ldrb	r3, [r7, #7]
 800d098:	f003 0302 	and.w	r3, r3, #2
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d007      	beq.n	800d0b0 <f_open+0x1d4>
 800d0a0:	7ebb      	ldrb	r3, [r7, #26]
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d002      	beq.n	800d0b0 <f_open+0x1d4>
						res = FR_DENIED;
 800d0aa:	2307      	movs	r3, #7
 800d0ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d0b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d128      	bne.n	800d10a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d0b8:	79fb      	ldrb	r3, [r7, #7]
 800d0ba:	f003 0308 	and.w	r3, r3, #8
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d003      	beq.n	800d0ca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d0c2:	79fb      	ldrb	r3, [r7, #7]
 800d0c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0c8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d0d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	f023 0301 	bic.w	r3, r3, #1
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	bf14      	ite	ne
 800d0e2:	2301      	movne	r3, #1
 800d0e4:	2300      	moveq	r3, #0
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	461a      	mov	r2, r3
 800d0ea:	f107 0314 	add.w	r3, r7, #20
 800d0ee:	4611      	mov	r1, r2
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f7fe fb93 	bl	800b81c <inc_lock>
 800d0f6:	4602      	mov	r2, r0
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <f_open+0x22e>
 800d104:	2302      	movs	r3, #2
 800d106:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d10a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d10e:	2b00      	cmp	r3, #0
 800d110:	f040 8095 	bne.w	800d23e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d118:	4611      	mov	r1, r2
 800d11a:	4618      	mov	r0, r3
 800d11c:	f7ff f9b1 	bl	800c482 <ld_clust>
 800d120:	4602      	mov	r2, r0
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d128:	331c      	adds	r3, #28
 800d12a:	4618      	mov	r0, r3
 800d12c:	f7fe fa1b 	bl	800b566 <ld_dword>
 800d130:	4602      	mov	r2, r0
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d13c:	693a      	ldr	r2, [r7, #16]
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	88da      	ldrh	r2, [r3, #6]
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	79fa      	ldrb	r2, [r7, #7]
 800d14e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2200      	movs	r2, #0
 800d154:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2200      	movs	r2, #0
 800d15a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	3330      	adds	r3, #48	; 0x30
 800d166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d16a:	2100      	movs	r1, #0
 800d16c:	4618      	mov	r0, r3
 800d16e:	f7fe fa81 	bl	800b674 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d172:	79fb      	ldrb	r3, [r7, #7]
 800d174:	f003 0320 	and.w	r3, r3, #32
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d060      	beq.n	800d23e <f_open+0x362>
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d05c      	beq.n	800d23e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d18c:	693b      	ldr	r3, [r7, #16]
 800d18e:	895b      	ldrh	r3, [r3, #10]
 800d190:	025b      	lsls	r3, r3, #9
 800d192:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	68db      	ldr	r3, [r3, #12]
 800d19e:	657b      	str	r3, [r7, #84]	; 0x54
 800d1a0:	e016      	b.n	800d1d0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fd22 	bl	800bbf0 <get_fat>
 800d1ac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d1ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1b0:	2b01      	cmp	r3, #1
 800d1b2:	d802      	bhi.n	800d1ba <f_open+0x2de>
 800d1b4:	2302      	movs	r3, #2
 800d1b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d1ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d1bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1c0:	d102      	bne.n	800d1c8 <f_open+0x2ec>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d1c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	657b      	str	r3, [r7, #84]	; 0x54
 800d1d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d103      	bne.n	800d1e0 <f_open+0x304>
 800d1d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d8e0      	bhi.n	800d1a2 <f_open+0x2c6>
				}
				fp->clust = clst;
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d1e4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d1e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d127      	bne.n	800d23e <f_open+0x362>
 800d1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d022      	beq.n	800d23e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fe fcd9 	bl	800bbb4 <clust2sect>
 800d202:	6478      	str	r0, [r7, #68]	; 0x44
 800d204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d206:	2b00      	cmp	r3, #0
 800d208:	d103      	bne.n	800d212 <f_open+0x336>
						res = FR_INT_ERR;
 800d20a:	2302      	movs	r3, #2
 800d20c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d210:	e015      	b.n	800d23e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d212:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d214:	0a5a      	lsrs	r2, r3, #9
 800d216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d218:	441a      	add	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	7858      	ldrb	r0, [r3, #1]
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	6a1a      	ldr	r2, [r3, #32]
 800d22c:	2301      	movs	r3, #1
 800d22e:	f7fe f925 	bl	800b47c <disk_read>
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d002      	beq.n	800d23e <f_open+0x362>
 800d238:	2301      	movs	r3, #1
 800d23a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d23e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d242:	2b00      	cmp	r3, #0
 800d244:	d002      	beq.n	800d24c <f_open+0x370>
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d24c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d250:	4618      	mov	r0, r3
 800d252:	3760      	adds	r7, #96	; 0x60
 800d254:	46bd      	mov	sp, r7
 800d256:	bd80      	pop	{r7, pc}

0800d258 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b08c      	sub	sp, #48	; 0x30
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	60f8      	str	r0, [r7, #12]
 800d260:	60b9      	str	r1, [r7, #8]
 800d262:	607a      	str	r2, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d266:	68bb      	ldr	r3, [r7, #8]
 800d268:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	2200      	movs	r2, #0
 800d26e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	f107 0210 	add.w	r2, r7, #16
 800d276:	4611      	mov	r1, r2
 800d278:	4618      	mov	r0, r3
 800d27a:	f7ff fdb3 	bl	800cde4 <validate>
 800d27e:	4603      	mov	r3, r0
 800d280:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d107      	bne.n	800d29c <f_write+0x44>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	7d5b      	ldrb	r3, [r3, #21]
 800d290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <f_write+0x4a>
 800d29c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2a0:	e14b      	b.n	800d53a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	7d1b      	ldrb	r3, [r3, #20]
 800d2a6:	f003 0302 	and.w	r3, r3, #2
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d101      	bne.n	800d2b2 <f_write+0x5a>
 800d2ae:	2307      	movs	r3, #7
 800d2b0:	e143      	b.n	800d53a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	699a      	ldr	r2, [r3, #24]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	441a      	add	r2, r3
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	f080 812d 	bcs.w	800d51e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	699b      	ldr	r3, [r3, #24]
 800d2c8:	43db      	mvns	r3, r3
 800d2ca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d2cc:	e127      	b.n	800d51e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	699b      	ldr	r3, [r3, #24]
 800d2d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	f040 80e3 	bne.w	800d4a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	699b      	ldr	r3, [r3, #24]
 800d2e0:	0a5b      	lsrs	r3, r3, #9
 800d2e2:	693a      	ldr	r2, [r7, #16]
 800d2e4:	8952      	ldrh	r2, [r2, #10]
 800d2e6:	3a01      	subs	r2, #1
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d143      	bne.n	800d37a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	699b      	ldr	r3, [r3, #24]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d10c      	bne.n	800d314 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	689b      	ldr	r3, [r3, #8]
 800d2fe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d302:	2b00      	cmp	r3, #0
 800d304:	d11a      	bne.n	800d33c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	2100      	movs	r1, #0
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe fe67 	bl	800bfde <create_chain>
 800d310:	62b8      	str	r0, [r7, #40]	; 0x28
 800d312:	e013      	b.n	800d33c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d007      	beq.n	800d32c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	4619      	mov	r1, r3
 800d322:	68f8      	ldr	r0, [r7, #12]
 800d324:	f7fe fef3 	bl	800c10e <clmt_clust>
 800d328:	62b8      	str	r0, [r7, #40]	; 0x28
 800d32a:	e007      	b.n	800d33c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d32c:	68fa      	ldr	r2, [r7, #12]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	69db      	ldr	r3, [r3, #28]
 800d332:	4619      	mov	r1, r3
 800d334:	4610      	mov	r0, r2
 800d336:	f7fe fe52 	bl	800bfde <create_chain>
 800d33a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f000 80f2 	beq.w	800d528 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	2b01      	cmp	r3, #1
 800d348:	d104      	bne.n	800d354 <f_write+0xfc>
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2202      	movs	r2, #2
 800d34e:	755a      	strb	r2, [r3, #21]
 800d350:	2302      	movs	r3, #2
 800d352:	e0f2      	b.n	800d53a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d35a:	d104      	bne.n	800d366 <f_write+0x10e>
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2201      	movs	r2, #1
 800d360:	755a      	strb	r2, [r3, #21]
 800d362:	2301      	movs	r3, #1
 800d364:	e0e9      	b.n	800d53a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d36a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d102      	bne.n	800d37a <f_write+0x122>
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d378:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	7d1b      	ldrb	r3, [r3, #20]
 800d37e:	b25b      	sxtb	r3, r3
 800d380:	2b00      	cmp	r3, #0
 800d382:	da18      	bge.n	800d3b6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d384:	693b      	ldr	r3, [r7, #16]
 800d386:	7858      	ldrb	r0, [r3, #1]
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6a1a      	ldr	r2, [r3, #32]
 800d392:	2301      	movs	r3, #1
 800d394:	f7fe f892 	bl	800b4bc <disk_write>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d004      	beq.n	800d3a8 <f_write+0x150>
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	755a      	strb	r2, [r3, #21]
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e0c8      	b.n	800d53a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	7d1b      	ldrb	r3, [r3, #20]
 800d3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b0:	b2da      	uxtb	r2, r3
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d3b6:	693a      	ldr	r2, [r7, #16]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	69db      	ldr	r3, [r3, #28]
 800d3bc:	4619      	mov	r1, r3
 800d3be:	4610      	mov	r0, r2
 800d3c0:	f7fe fbf8 	bl	800bbb4 <clust2sect>
 800d3c4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d3c6:	697b      	ldr	r3, [r7, #20]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d104      	bne.n	800d3d6 <f_write+0x17e>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	755a      	strb	r2, [r3, #21]
 800d3d2:	2302      	movs	r3, #2
 800d3d4:	e0b1      	b.n	800d53a <f_write+0x2e2>
			sect += csect;
 800d3d6:	697a      	ldr	r2, [r7, #20]
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	4413      	add	r3, r2
 800d3dc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	0a5b      	lsrs	r3, r3, #9
 800d3e2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d3e4:	6a3b      	ldr	r3, [r7, #32]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d03c      	beq.n	800d464 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d3ea:	69ba      	ldr	r2, [r7, #24]
 800d3ec:	6a3b      	ldr	r3, [r7, #32]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	693a      	ldr	r2, [r7, #16]
 800d3f2:	8952      	ldrh	r2, [r2, #10]
 800d3f4:	4293      	cmp	r3, r2
 800d3f6:	d905      	bls.n	800d404 <f_write+0x1ac>
					cc = fs->csize - csect;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	895b      	ldrh	r3, [r3, #10]
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	69bb      	ldr	r3, [r7, #24]
 800d400:	1ad3      	subs	r3, r2, r3
 800d402:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	7858      	ldrb	r0, [r3, #1]
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	697a      	ldr	r2, [r7, #20]
 800d40c:	69f9      	ldr	r1, [r7, #28]
 800d40e:	f7fe f855 	bl	800b4bc <disk_write>
 800d412:	4603      	mov	r3, r0
 800d414:	2b00      	cmp	r3, #0
 800d416:	d004      	beq.n	800d422 <f_write+0x1ca>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	2201      	movs	r2, #1
 800d41c:	755a      	strb	r2, [r3, #21]
 800d41e:	2301      	movs	r3, #1
 800d420:	e08b      	b.n	800d53a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6a1a      	ldr	r2, [r3, #32]
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	6a3a      	ldr	r2, [r7, #32]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d915      	bls.n	800d45c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6a1a      	ldr	r2, [r3, #32]
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	1ad3      	subs	r3, r2, r3
 800d43e:	025b      	lsls	r3, r3, #9
 800d440:	69fa      	ldr	r2, [r7, #28]
 800d442:	4413      	add	r3, r2
 800d444:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d448:	4619      	mov	r1, r3
 800d44a:	f7fe f8f3 	bl	800b634 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	7d1b      	ldrb	r3, [r3, #20]
 800d452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d456:	b2da      	uxtb	r2, r3
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d45c:	6a3b      	ldr	r3, [r7, #32]
 800d45e:	025b      	lsls	r3, r3, #9
 800d460:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d462:	e03f      	b.n	800d4e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	6a1b      	ldr	r3, [r3, #32]
 800d468:	697a      	ldr	r2, [r7, #20]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d016      	beq.n	800d49c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	699a      	ldr	r2, [r3, #24]
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d476:	429a      	cmp	r2, r3
 800d478:	d210      	bcs.n	800d49c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	7858      	ldrb	r0, [r3, #1]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d484:	2301      	movs	r3, #1
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	f7fd fff8 	bl	800b47c <disk_read>
 800d48c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d004      	beq.n	800d49c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2201      	movs	r2, #1
 800d496:	755a      	strb	r2, [r3, #21]
 800d498:	2301      	movs	r3, #1
 800d49a:	e04e      	b.n	800d53a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	697a      	ldr	r2, [r7, #20]
 800d4a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	699b      	ldr	r3, [r3, #24]
 800d4a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d4ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d901      	bls.n	800d4bc <f_write+0x264>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	699b      	ldr	r3, [r3, #24]
 800d4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4ca:	4413      	add	r3, r2
 800d4cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ce:	69f9      	ldr	r1, [r7, #28]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f7fe f8af 	bl	800b634 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	7d1b      	ldrb	r3, [r3, #20]
 800d4da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d4e4:	69fa      	ldr	r2, [r7, #28]
 800d4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e8:	4413      	add	r3, r2
 800d4ea:	61fb      	str	r3, [r7, #28]
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	699a      	ldr	r2, [r3, #24]
 800d4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f2:	441a      	add	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	619a      	str	r2, [r3, #24]
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	429a      	cmp	r2, r3
 800d502:	bf38      	it	cc
 800d504:	461a      	movcc	r2, r3
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	60da      	str	r2, [r3, #12]
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	681a      	ldr	r2, [r3, #0]
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	441a      	add	r2, r3
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	601a      	str	r2, [r3, #0]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	2b00      	cmp	r3, #0
 800d522:	f47f aed4 	bne.w	800d2ce <f_write+0x76>
 800d526:	e000      	b.n	800d52a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d528:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	7d1b      	ldrb	r3, [r3, #20]
 800d52e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d532:	b2da      	uxtb	r2, r3
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3730      	adds	r7, #48	; 0x30
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b086      	sub	sp, #24
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f107 0208 	add.w	r2, r7, #8
 800d550:	4611      	mov	r1, r2
 800d552:	4618      	mov	r0, r3
 800d554:	f7ff fc46 	bl	800cde4 <validate>
 800d558:	4603      	mov	r3, r0
 800d55a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d168      	bne.n	800d634 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	7d1b      	ldrb	r3, [r3, #20]
 800d566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d062      	beq.n	800d634 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	7d1b      	ldrb	r3, [r3, #20]
 800d572:	b25b      	sxtb	r3, r3
 800d574:	2b00      	cmp	r3, #0
 800d576:	da15      	bge.n	800d5a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d578:	68bb      	ldr	r3, [r7, #8]
 800d57a:	7858      	ldrb	r0, [r3, #1]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	6a1a      	ldr	r2, [r3, #32]
 800d586:	2301      	movs	r3, #1
 800d588:	f7fd ff98 	bl	800b4bc <disk_write>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <f_sync+0x54>
 800d592:	2301      	movs	r3, #1
 800d594:	e04f      	b.n	800d636 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	7d1b      	ldrb	r3, [r3, #20]
 800d59a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d59e:	b2da      	uxtb	r2, r3
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d5a4:	f7fd f9ee 	bl	800a984 <get_fattime>
 800d5a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800d5aa:	68ba      	ldr	r2, [r7, #8]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	4610      	mov	r0, r2
 800d5b4:	f7fe fa62 	bl	800ba7c <move_window>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800d5bc:	7dfb      	ldrb	r3, [r7, #23]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d138      	bne.n	800d634 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	330b      	adds	r3, #11
 800d5cc:	781a      	ldrb	r2, [r3, #0]
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	330b      	adds	r3, #11
 800d5d2:	f042 0220 	orr.w	r2, r2, #32
 800d5d6:	b2d2      	uxtb	r2, r2
 800d5d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6818      	ldr	r0, [r3, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	689b      	ldr	r3, [r3, #8]
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	68f9      	ldr	r1, [r7, #12]
 800d5e6:	f7fe ff6b 	bl	800c4c0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	f103 021c 	add.w	r2, r3, #28
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	68db      	ldr	r3, [r3, #12]
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	4610      	mov	r0, r2
 800d5f8:	f7fd fff1 	bl	800b5de <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	3316      	adds	r3, #22
 800d600:	6939      	ldr	r1, [r7, #16]
 800d602:	4618      	mov	r0, r3
 800d604:	f7fd ffeb 	bl	800b5de <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	3312      	adds	r3, #18
 800d60c:	2100      	movs	r1, #0
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fd ffcb 	bl	800b5aa <st_word>
					fs->wflag = 1;
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	2201      	movs	r2, #1
 800d618:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800d61a:	68bb      	ldr	r3, [r7, #8]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f7fe fa5b 	bl	800bad8 <sync_fs>
 800d622:	4603      	mov	r3, r0
 800d624:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	7d1b      	ldrb	r3, [r3, #20]
 800d62a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800d634:	7dfb      	ldrb	r3, [r7, #23]
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}

0800d63e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800d63e:	b580      	push	{r7, lr}
 800d640:	b084      	sub	sp, #16
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f7ff ff7b 	bl	800d542 <f_sync>
 800d64c:	4603      	mov	r3, r0
 800d64e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800d650:	7bfb      	ldrb	r3, [r7, #15]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d118      	bne.n	800d688 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f107 0208 	add.w	r2, r7, #8
 800d65c:	4611      	mov	r1, r2
 800d65e:	4618      	mov	r0, r3
 800d660:	f7ff fbc0 	bl	800cde4 <validate>
 800d664:	4603      	mov	r3, r0
 800d666:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d10c      	bne.n	800d688 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	4618      	mov	r0, r3
 800d674:	f7fe f960 	bl	800b938 <dec_lock>
 800d678:	4603      	mov	r3, r0
 800d67a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800d67c:	7bfb      	ldrb	r3, [r7, #15]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d102      	bne.n	800d688 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800d688:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b092      	sub	sp, #72	; 0x48
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d69e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d6a2:	f107 030c 	add.w	r3, r7, #12
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7ff f94f 	bl	800c94c <find_volume>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d6b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f040 8099 	bne.w	800d7f0 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d6be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	691a      	ldr	r2, [r3, #16]
 800d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ca:	695b      	ldr	r3, [r3, #20]
 800d6cc:	3b02      	subs	r3, #2
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	d804      	bhi.n	800d6dc <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d4:	691a      	ldr	r2, [r3, #16]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	601a      	str	r2, [r3, #0]
 800d6da:	e089      	b.n	800d7f0 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d128      	bne.n	800d73a <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d6e8:	2302      	movs	r3, #2
 800d6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ee:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d6f0:	f107 0314 	add.w	r3, r7, #20
 800d6f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe fa7a 	bl	800bbf0 <get_fat>
 800d6fc:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d704:	d103      	bne.n	800d70e <f_getfree+0x7c>
 800d706:	2301      	movs	r3, #1
 800d708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d70c:	e063      	b.n	800d7d6 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d710:	2b01      	cmp	r3, #1
 800d712:	d103      	bne.n	800d71c <f_getfree+0x8a>
 800d714:	2302      	movs	r3, #2
 800d716:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d71a:	e05c      	b.n	800d7d6 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d71c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d102      	bne.n	800d728 <f_getfree+0x96>
 800d722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d724:	3301      	adds	r3, #1
 800d726:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d72a:	3301      	adds	r3, #1
 800d72c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d730:	695b      	ldr	r3, [r3, #20]
 800d732:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d734:	429a      	cmp	r2, r3
 800d736:	d3db      	bcc.n	800d6f0 <f_getfree+0x5e>
 800d738:	e04d      	b.n	800d7d6 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d742:	6a1b      	ldr	r3, [r3, #32]
 800d744:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d746:	2300      	movs	r3, #0
 800d748:	637b      	str	r3, [r7, #52]	; 0x34
 800d74a:	2300      	movs	r3, #0
 800d74c:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d74e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d750:	2b00      	cmp	r3, #0
 800d752:	d113      	bne.n	800d77c <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d758:	1c5a      	adds	r2, r3, #1
 800d75a:	63ba      	str	r2, [r7, #56]	; 0x38
 800d75c:	4619      	mov	r1, r3
 800d75e:	f7fe f98d 	bl	800ba7c <move_window>
 800d762:	4603      	mov	r3, r0
 800d764:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d768:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d131      	bne.n	800d7d4 <f_getfree+0x142>
							p = fs->win;
 800d770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d772:	3330      	adds	r3, #48	; 0x30
 800d774:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d776:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d77a:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	2b02      	cmp	r3, #2
 800d782:	d10f      	bne.n	800d7a4 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d784:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d786:	f7fd fed7 	bl	800b538 <ld_word>
 800d78a:	4603      	mov	r3, r0
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d102      	bne.n	800d796 <f_getfree+0x104>
 800d790:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d792:	3301      	adds	r3, #1
 800d794:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d798:	3302      	adds	r3, #2
 800d79a:	633b      	str	r3, [r7, #48]	; 0x30
 800d79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79e:	3b02      	subs	r3, #2
 800d7a0:	637b      	str	r3, [r7, #52]	; 0x34
 800d7a2:	e010      	b.n	800d7c6 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d7a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d7a6:	f7fd fede 	bl	800b566 <ld_dword>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <f_getfree+0x128>
 800d7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7bc:	3304      	adds	r3, #4
 800d7be:	633b      	str	r3, [r7, #48]	; 0x30
 800d7c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7c2:	3b04      	subs	r3, #4
 800d7c4:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d7c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d1bd      	bne.n	800d74e <f_getfree+0xbc>
 800d7d2:	e000      	b.n	800d7d6 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d7d4:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7da:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d7e0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e4:	791a      	ldrb	r2, [r3, #4]
 800d7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7e8:	f042 0201 	orr.w	r2, r2, #1
 800d7ec:	b2d2      	uxtb	r2, r2
 800d7ee:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d7f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3748      	adds	r7, #72	; 0x48
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b087      	sub	sp, #28
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d80a:	2301      	movs	r3, #1
 800d80c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d80e:	2300      	movs	r3, #0
 800d810:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d812:	4b1e      	ldr	r3, [pc, #120]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d814:	7a5b      	ldrb	r3, [r3, #9]
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d131      	bne.n	800d880 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d81c:	4b1b      	ldr	r3, [pc, #108]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d81e:	7a5b      	ldrb	r3, [r3, #9]
 800d820:	b2db      	uxtb	r3, r3
 800d822:	461a      	mov	r2, r3
 800d824:	4b19      	ldr	r3, [pc, #100]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d826:	2100      	movs	r1, #0
 800d828:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d82a:	4b18      	ldr	r3, [pc, #96]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d82c:	7a5b      	ldrb	r3, [r3, #9]
 800d82e:	b2db      	uxtb	r3, r3
 800d830:	4a16      	ldr	r2, [pc, #88]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d832:	009b      	lsls	r3, r3, #2
 800d834:	4413      	add	r3, r2
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d83a:	4b14      	ldr	r3, [pc, #80]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d83c:	7a5b      	ldrb	r3, [r3, #9]
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	461a      	mov	r2, r3
 800d842:	4b12      	ldr	r3, [pc, #72]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d844:	4413      	add	r3, r2
 800d846:	79fa      	ldrb	r2, [r7, #7]
 800d848:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d84a:	4b10      	ldr	r3, [pc, #64]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d84c:	7a5b      	ldrb	r3, [r3, #9]
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	b2d1      	uxtb	r1, r2
 800d854:	4a0d      	ldr	r2, [pc, #52]	; (800d88c <FATFS_LinkDriverEx+0x90>)
 800d856:	7251      	strb	r1, [r2, #9]
 800d858:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d85a:	7dbb      	ldrb	r3, [r7, #22]
 800d85c:	3330      	adds	r3, #48	; 0x30
 800d85e:	b2da      	uxtb	r2, r3
 800d860:	68bb      	ldr	r3, [r7, #8]
 800d862:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	3301      	adds	r3, #1
 800d868:	223a      	movs	r2, #58	; 0x3a
 800d86a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	3302      	adds	r3, #2
 800d870:	222f      	movs	r2, #47	; 0x2f
 800d872:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	3303      	adds	r3, #3
 800d878:	2200      	movs	r2, #0
 800d87a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d87c:	2300      	movs	r3, #0
 800d87e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d880:	7dfb      	ldrb	r3, [r7, #23]
}
 800d882:	4618      	mov	r0, r3
 800d884:	371c      	adds	r7, #28
 800d886:	46bd      	mov	sp, r7
 800d888:	bc80      	pop	{r7}
 800d88a:	4770      	bx	lr
 800d88c:	2000661c 	.word	0x2000661c

0800d890 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b082      	sub	sp, #8
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d89a:	2200      	movs	r2, #0
 800d89c:	6839      	ldr	r1, [r7, #0]
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7ff ffac 	bl	800d7fc <FATFS_LinkDriverEx>
 800d8a4:	4603      	mov	r3, r0
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3708      	adds	r7, #8
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	bd80      	pop	{r7, pc}
	...

0800d8b0 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b084      	sub	sp, #16
 800d8b4:	af02      	add	r7, sp, #8
 800d8b6:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 800d8b8:	4a24      	ldr	r2, [pc, #144]	; (800d94c <RadioInit+0x9c>)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 800d8be:	4b24      	ldr	r3, [pc, #144]	; (800d950 <RadioInit+0xa0>)
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 800d8c4:	4b22      	ldr	r3, [pc, #136]	; (800d950 <RadioInit+0xa0>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 800d8ca:	4b21      	ldr	r3, [pc, #132]	; (800d950 <RadioInit+0xa0>)
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800d8d0:	4b1f      	ldr	r3, [pc, #124]	; (800d950 <RadioInit+0xa0>)
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	659a      	str	r2, [r3, #88]	; 0x58
#if( RADIO_LR_FHSS_IS_ON == 1 )
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    SUBGRF_Init( RadioOnDioIrq );
 800d8d6:	481f      	ldr	r0, [pc, #124]	; (800d954 <RadioInit+0xa4>)
 800d8d8:	f001 ffc2 	bl	800f860 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 800d8dc:	4b1c      	ldr	r3, [pc, #112]	; (800d950 <RadioInit+0xa0>)
 800d8de:	2200      	movs	r2, #0
 800d8e0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 800d8e2:	4b1b      	ldr	r3, [pc, #108]	; (800d950 <RadioInit+0xa0>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 800d8e8:	f002 fa56 	bl	800fd98 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800d8ec:	2100      	movs	r1, #0
 800d8ee:	2000      	movs	r0, #0
 800d8f0:	f002 fe22 	bl	8010538 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 800d8f4:	2204      	movs	r2, #4
 800d8f6:	2100      	movs	r1, #0
 800d8f8:	2001      	movs	r0, #1
 800d8fa:	f002 fbdf 	bl	80100bc <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d8fe:	2300      	movs	r3, #0
 800d900:	2200      	movs	r2, #0
 800d902:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d906:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800d90a:	f002 fb0f 	bl	800ff2c <SUBGRF_SetDioIrqParams>

    RadioSleep();
 800d90e:	f000 fe99 	bl	800e644 <RadioSleep>
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d912:	2300      	movs	r3, #0
 800d914:	9300      	str	r3, [sp, #0]
 800d916:	4b10      	ldr	r3, [pc, #64]	; (800d958 <RadioInit+0xa8>)
 800d918:	2200      	movs	r2, #0
 800d91a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d91e:	480f      	ldr	r0, [pc, #60]	; (800d95c <RadioInit+0xac>)
 800d920:	f004 f8a4 	bl	8011a6c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800d924:	2300      	movs	r3, #0
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <RadioInit+0xb0>)
 800d92a:	2200      	movs	r2, #0
 800d92c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d930:	480c      	ldr	r0, [pc, #48]	; (800d964 <RadioInit+0xb4>)
 800d932:	f004 f89b 	bl	8011a6c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 800d936:	4809      	ldr	r0, [pc, #36]	; (800d95c <RadioInit+0xac>)
 800d938:	f004 f93c 	bl	8011bb4 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 800d93c:	4809      	ldr	r0, [pc, #36]	; (800d964 <RadioInit+0xb4>)
 800d93e:	f004 f939 	bl	8011bb4 <UTIL_TIMER_Stop>
}
 800d942:	bf00      	nop
 800d944:	3708      	adds	r7, #8
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	20006728 	.word	0x20006728
 800d950:	2000672c 	.word	0x2000672c
 800d954:	0800ea3d 	.word	0x0800ea3d
 800d958:	0800e9c5 	.word	0x0800e9c5
 800d95c:	20006788 	.word	0x20006788
 800d960:	0800e9d9 	.word	0x0800e9d9
 800d964:	200067a0 	.word	0x200067a0

0800d968 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 800d96c:	f001 ffc0 	bl	800f8f0 <SUBGRF_GetOperatingMode>
 800d970:	4603      	mov	r3, r0
 800d972:	2b07      	cmp	r3, #7
 800d974:	d00a      	beq.n	800d98c <RadioGetStatus+0x24>
 800d976:	2b07      	cmp	r3, #7
 800d978:	dc0a      	bgt.n	800d990 <RadioGetStatus+0x28>
 800d97a:	2b04      	cmp	r3, #4
 800d97c:	d002      	beq.n	800d984 <RadioGetStatus+0x1c>
 800d97e:	2b05      	cmp	r3, #5
 800d980:	d002      	beq.n	800d988 <RadioGetStatus+0x20>
 800d982:	e005      	b.n	800d990 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 800d984:	2302      	movs	r3, #2
 800d986:	e004      	b.n	800d992 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 800d988:	2301      	movs	r3, #1
 800d98a:	e002      	b.n	800d992 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 800d98c:	2303      	movs	r3, #3
 800d98e:	e000      	b.n	800d992 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 800d990:	2300      	movs	r3, #0
    }
}
 800d992:	4618      	mov	r0, r3
 800d994:	bd80      	pop	{r7, pc}
	...

0800d998 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b082      	sub	sp, #8
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	4603      	mov	r3, r0
 800d9a0:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 800d9a2:	4a2a      	ldr	r2, [pc, #168]	; (800da4c <RadioSetModem+0xb4>)
 800d9a4:	79fb      	ldrb	r3, [r7, #7]
 800d9a6:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 800d9a8:	79fb      	ldrb	r3, [r7, #7]
 800d9aa:	4618      	mov	r0, r3
 800d9ac:	f003 f997 	bl	8010cde <RFW_SetRadioModem>
    switch( modem )
 800d9b0:	79fb      	ldrb	r3, [r7, #7]
 800d9b2:	2b05      	cmp	r3, #5
 800d9b4:	d80e      	bhi.n	800d9d4 <RadioSetModem+0x3c>
 800d9b6:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <RadioSetModem+0x24>)
 800d9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9bc:	0800d9e3 	.word	0x0800d9e3
 800d9c0:	0800d9f1 	.word	0x0800d9f1
 800d9c4:	0800d9d5 	.word	0x0800d9d5
 800d9c8:	0800da17 	.word	0x0800da17
 800d9cc:	0800da25 	.word	0x0800da25
 800d9d0:	0800da33 	.word	0x0800da33
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 800d9d4:	2003      	movs	r0, #3
 800d9d6:	f002 fb4b 	bl	8010070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800d9da:	4b1c      	ldr	r3, [pc, #112]	; (800da4c <RadioSetModem+0xb4>)
 800d9dc:	2200      	movs	r2, #0
 800d9de:	735a      	strb	r2, [r3, #13]
        break;
 800d9e0:	e02f      	b.n	800da42 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	f002 fb44 	bl	8010070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800d9e8:	4b18      	ldr	r3, [pc, #96]	; (800da4c <RadioSetModem+0xb4>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	735a      	strb	r2, [r3, #13]
        break;
 800d9ee:	e028      	b.n	800da42 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 800d9f0:	2001      	movs	r0, #1
 800d9f2:	f002 fb3d 	bl	8010070 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 800d9f6:	4b15      	ldr	r3, [pc, #84]	; (800da4c <RadioSetModem+0xb4>)
 800d9f8:	7b5a      	ldrb	r2, [r3, #13]
 800d9fa:	4b14      	ldr	r3, [pc, #80]	; (800da4c <RadioSetModem+0xb4>)
 800d9fc:	7b1b      	ldrb	r3, [r3, #12]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d01e      	beq.n	800da40 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 800da02:	4b12      	ldr	r3, [pc, #72]	; (800da4c <RadioSetModem+0xb4>)
 800da04:	7b1a      	ldrb	r2, [r3, #12]
 800da06:	4b11      	ldr	r3, [pc, #68]	; (800da4c <RadioSetModem+0xb4>)
 800da08:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 800da0a:	4b10      	ldr	r3, [pc, #64]	; (800da4c <RadioSetModem+0xb4>)
 800da0c:	7b5b      	ldrb	r3, [r3, #13]
 800da0e:	4618      	mov	r0, r3
 800da10:	f000 ffa2 	bl	800e958 <RadioSetPublicNetwork>
        }
        break;
 800da14:	e014      	b.n	800da40 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800da16:	2002      	movs	r0, #2
 800da18:	f002 fb2a 	bl	8010070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800da1c:	4b0b      	ldr	r3, [pc, #44]	; (800da4c <RadioSetModem+0xb4>)
 800da1e:	2200      	movs	r2, #0
 800da20:	735a      	strb	r2, [r3, #13]
        break;
 800da22:	e00e      	b.n	800da42 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 800da24:	2002      	movs	r0, #2
 800da26:	f002 fb23 	bl	8010070 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800da2a:	4b08      	ldr	r3, [pc, #32]	; (800da4c <RadioSetModem+0xb4>)
 800da2c:	2200      	movs	r2, #0
 800da2e:	735a      	strb	r2, [r3, #13]
        break;
 800da30:	e007      	b.n	800da42 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 800da32:	2000      	movs	r0, #0
 800da34:	f002 fb1c 	bl	8010070 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 800da38:	4b04      	ldr	r3, [pc, #16]	; (800da4c <RadioSetModem+0xb4>)
 800da3a:	2200      	movs	r2, #0
 800da3c:	735a      	strb	r2, [r3, #13]
        break;
 800da3e:	e000      	b.n	800da42 <RadioSetModem+0xaa>
        break;
 800da40:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 800da42:	bf00      	nop
 800da44:	3708      	adds	r7, #8
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}
 800da4a:	bf00      	nop
 800da4c:	2000672c 	.word	0x2000672c

0800da50 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 800da50:	b580      	push	{r7, lr}
 800da52:	b082      	sub	sp, #8
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f002 fac3 	bl	800ffe4 <SUBGRF_SetRfFrequency>
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}

0800da66 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800da66:	b580      	push	{r7, lr}
 800da68:	b090      	sub	sp, #64	; 0x40
 800da6a:	af0a      	add	r7, sp, #40	; 0x28
 800da6c:	60f8      	str	r0, [r7, #12]
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	603b      	str	r3, [r7, #0]
 800da72:	4613      	mov	r3, r2
 800da74:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800da76:	2301      	movs	r3, #1
 800da78:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800da7a:	2300      	movs	r3, #0
 800da7c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 800da7e:	2300      	movs	r3, #0
 800da80:	613b      	str	r3, [r7, #16]

    RadioStandby( );
 800da82:	f000 fdf2 	bl	800e66a <RadioStandby>

    RadioSetModem( MODEM_FSK );
 800da86:	2000      	movs	r0, #0
 800da88:	f7ff ff86 	bl	800d998 <RadioSetModem>

    RadioSetChannel( freq );
 800da8c:	68f8      	ldr	r0, [r7, #12]
 800da8e:	f7ff ffdf 	bl	800da50 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800da92:	2301      	movs	r3, #1
 800da94:	9309      	str	r3, [sp, #36]	; 0x24
 800da96:	2300      	movs	r3, #0
 800da98:	9308      	str	r3, [sp, #32]
 800da9a:	2300      	movs	r3, #0
 800da9c:	9307      	str	r3, [sp, #28]
 800da9e:	2300      	movs	r3, #0
 800daa0:	9306      	str	r3, [sp, #24]
 800daa2:	2300      	movs	r3, #0
 800daa4:	9305      	str	r3, [sp, #20]
 800daa6:	2300      	movs	r3, #0
 800daa8:	9304      	str	r3, [sp, #16]
 800daaa:	2300      	movs	r3, #0
 800daac:	9303      	str	r3, [sp, #12]
 800daae:	2300      	movs	r3, #0
 800dab0:	9302      	str	r3, [sp, #8]
 800dab2:	2303      	movs	r3, #3
 800dab4:	9301      	str	r3, [sp, #4]
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	2300      	movs	r3, #0
 800dabc:	f44f 7216 	mov.w	r2, #600	; 0x258
 800dac0:	68b9      	ldr	r1, [r7, #8]
 800dac2:	2000      	movs	r0, #0
 800dac4:	f000 f83c 	bl	800db40 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800dac8:	2000      	movs	r0, #0
 800daca:	f000 fdd5 	bl	800e678 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 800dace:	f000 ff71 	bl	800e9b4 <RadioGetWakeupTime>
 800dad2:	4603      	mov	r3, r0
 800dad4:	4618      	mov	r0, r3
 800dad6:	f7f4 f983 	bl	8001de0 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800dada:	f004 f985 	bl	8011de8 <UTIL_TIMER_GetCurrentTime>
 800dade:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800dae0:	e00d      	b.n	800dafe <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 800dae2:	2000      	movs	r0, #0
 800dae4:	f000 feb6 	bl	800e854 <RadioRssi>
 800dae8:	4603      	mov	r3, r0
 800daea:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 800daec:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800daf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	dd02      	ble.n	800dafe <RadioIsChannelFree+0x98>
        {
            status = false;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]
            break;
 800dafc:	e006      	b.n	800db0c <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800dafe:	6938      	ldr	r0, [r7, #16]
 800db00:	f004 f984 	bl	8011e0c <UTIL_TIMER_GetElapsedTime>
 800db04:	4602      	mov	r2, r0
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	4293      	cmp	r3, r2
 800db0a:	d8ea      	bhi.n	800dae2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( );
 800db0c:	f000 fdad 	bl	800e66a <RadioStandby>

    return status;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3718      	adds	r7, #24
 800db16:	46bd      	mov	sp, r7
 800db18:	bd80      	pop	{r7, pc}

0800db1a <RadioRandom>:

static uint32_t RadioRandom( void )
{
 800db1a:	b580      	push	{r7, lr}
 800db1c:	b082      	sub	sp, #8
 800db1e:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 800db20:	2300      	movs	r3, #0
 800db22:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800db24:	2300      	movs	r3, #0
 800db26:	2200      	movs	r2, #0
 800db28:	2100      	movs	r1, #0
 800db2a:	2000      	movs	r0, #0
 800db2c:	f002 f9fe 	bl	800ff2c <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 800db30:	f001 ffaf 	bl	800fa92 <SUBGRF_GetRandom>
 800db34:	6078      	str	r0, [r7, #4]

    return rnd;
 800db36:	687b      	ldr	r3, [r7, #4]
}
 800db38:	4618      	mov	r0, r3
 800db3a:	3708      	adds	r7, #8
 800db3c:	46bd      	mov	sp, r7
 800db3e:	bd80      	pop	{r7, pc}

0800db40 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b08a      	sub	sp, #40	; 0x28
 800db44:	af00      	add	r7, sp, #0
 800db46:	60b9      	str	r1, [r7, #8]
 800db48:	607a      	str	r2, [r7, #4]
 800db4a:	461a      	mov	r2, r3
 800db4c:	4603      	mov	r3, r0
 800db4e:	73fb      	strb	r3, [r7, #15]
 800db50:	4613      	mov	r3, r2
 800db52:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 800db54:	4ab9      	ldr	r2, [pc, #740]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800db56:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800db5a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit();
 800db5c:	f003 f87d 	bl	8010c5a <RFW_DeInit>
    if( rxContinuous == true )
 800db60:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 800db6c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800db70:	2b00      	cmp	r3, #0
 800db72:	d004      	beq.n	800db7e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 800db74:	4ab2      	ldr	r2, [pc, #712]	; (800de40 <RadioSetRxConfig+0x300>)
 800db76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db7a:	7013      	strb	r3, [r2, #0]
 800db7c:	e002      	b.n	800db84 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800db7e:	4bb0      	ldr	r3, [pc, #704]	; (800de40 <RadioSetRxConfig+0x300>)
 800db80:	22ff      	movs	r2, #255	; 0xff
 800db82:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 800db84:	7bfb      	ldrb	r3, [r7, #15]
 800db86:	2b05      	cmp	r3, #5
 800db88:	d009      	beq.n	800db9e <RadioSetRxConfig+0x5e>
 800db8a:	2b05      	cmp	r3, #5
 800db8c:	f300 81d7 	bgt.w	800df3e <RadioSetRxConfig+0x3fe>
 800db90:	2b00      	cmp	r3, #0
 800db92:	f000 80bf 	beq.w	800dd14 <RadioSetRxConfig+0x1d4>
 800db96:	2b01      	cmp	r3, #1
 800db98:	f000 8124 	beq.w	800dde4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 800db9c:	e1cf      	b.n	800df3e <RadioSetRxConfig+0x3fe>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800db9e:	2001      	movs	r0, #1
 800dba0:	f002 f8bc 	bl	800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800dba4:	4ba5      	ldr	r3, [pc, #660]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dba6:	2200      	movs	r2, #0
 800dba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800dbac:	4aa3      	ldr	r2, [pc, #652]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800dbb2:	4ba2      	ldr	r3, [pc, #648]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbb4:	2209      	movs	r2, #9
 800dbb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 800dbba:	4ba0      	ldr	r3, [pc, #640]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbbc:	f44f 7248 	mov.w	r2, #800	; 0x320
 800dbc0:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800dbc2:	68b8      	ldr	r0, [r7, #8]
 800dbc4:	f002 ff7c 	bl	8010ac0 <SUBGRF_GetFskBandwidthRegValue>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	461a      	mov	r2, r3
 800dbcc:	4b9b      	ldr	r3, [pc, #620]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800dbd2:	4b9a      	ldr	r3, [pc, #616]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800dbd8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dbda:	00db      	lsls	r3, r3, #3
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	4b97      	ldr	r3, [pc, #604]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbe0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800dbe2:	4b96      	ldr	r3, [pc, #600]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 800dbe8:	4b94      	ldr	r3, [pc, #592]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbea:	2210      	movs	r2, #16
 800dbec:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800dbee:	4b93      	ldr	r3, [pc, #588]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 800dbf4:	4b91      	ldr	r3, [pc, #580]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800dbfa:	4b91      	ldr	r3, [pc, #580]	; (800de40 <RadioSetRxConfig+0x300>)
 800dbfc:	781a      	ldrb	r2, [r3, #0]
 800dbfe:	4b8f      	ldr	r3, [pc, #572]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dc00:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800dc02:	4b8e      	ldr	r3, [pc, #568]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dc04:	2201      	movs	r2, #1
 800dc06:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 800dc08:	4b8c      	ldr	r3, [pc, #560]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dc0a:	2200      	movs	r2, #0
 800dc0c:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 800dc0e:	2005      	movs	r0, #5
 800dc10:	f7ff fec2 	bl	800d998 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800dc14:	488b      	ldr	r0, [pc, #556]	; (800de44 <RadioSetRxConfig+0x304>)
 800dc16:	f002 fb1f 	bl	8010258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800dc1a:	488b      	ldr	r0, [pc, #556]	; (800de48 <RadioSetRxConfig+0x308>)
 800dc1c:	f002 fbee 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800dc20:	4a8a      	ldr	r2, [pc, #552]	; (800de4c <RadioSetRxConfig+0x30c>)
 800dc22:	f107 031c 	add.w	r3, r7, #28
 800dc26:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc2a:	e883 0003 	stmia.w	r3, {r0, r1}
 800dc2e:	f107 031c 	add.w	r3, r7, #28
 800dc32:	4618      	mov	r0, r3
 800dc34:	f001 feab 	bl	800f98e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800dc38:	f240 10ff 	movw	r0, #511	; 0x1ff
 800dc3c:	f001 fef6 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 800dc40:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800dc44:	f000 fe25 	bl	800e892 <RadioRead>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800dc4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc52:	f023 0310 	bic.w	r3, r3, #16
 800dc56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800dc5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc5e:	4619      	mov	r1, r3
 800dc60:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800dc64:	f000 fe03 	bl	800e86e <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800dc68:	2104      	movs	r1, #4
 800dc6a:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800dc6e:	f000 fdfe 	bl	800e86e <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 800dc72:	f640 009b 	movw	r0, #2203	; 0x89b
 800dc76:	f000 fe0c 	bl	800e892 <RadioRead>
 800dc7a:	4603      	mov	r3, r0
 800dc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800dc80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc84:	f023 031c 	bic.w	r3, r3, #28
 800dc88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 800dc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc90:	f043 0308 	orr.w	r3, r3, #8
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	4619      	mov	r1, r3
 800dc98:	f640 009b 	movw	r0, #2203	; 0x89b
 800dc9c:	f000 fde7 	bl	800e86e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800dca0:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800dca4:	f000 fdf5 	bl	800e892 <RadioRead>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800dcae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb2:	f023 0318 	bic.w	r3, r3, #24
 800dcb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 800dcba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcbe:	f043 0318 	orr.w	r3, r3, #24
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	f240 60d1 	movw	r0, #1745	; 0x6d1
 800dcca:	f000 fdd0 	bl	800e86e <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 800dcce:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800dcd2:	f000 fdde 	bl	800e892 <RadioRead>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800dcdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dce4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 800dce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcec:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800dcf8:	f000 fdb9 	bl	800e86e <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800dcfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800dcfe:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800dd02:	fb02 f303 	mul.w	r3, r2, r3
 800dd06:	461a      	mov	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd0e:	4a4b      	ldr	r2, [pc, #300]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd10:	6093      	str	r3, [r2, #8]
            break;
 800dd12:	e115      	b.n	800df40 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800dd14:	2000      	movs	r0, #0
 800dd16:	f002 f801 	bl	800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800dd1a:	4b48      	ldr	r3, [pc, #288]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800dd22:	4a46      	ldr	r2, [pc, #280]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800dd28:	4b44      	ldr	r3, [pc, #272]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd2a:	220b      	movs	r2, #11
 800dd2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800dd30:	68b8      	ldr	r0, [r7, #8]
 800dd32:	f002 fec5 	bl	8010ac0 <SUBGRF_GetFskBandwidthRegValue>
 800dd36:	4603      	mov	r3, r0
 800dd38:	461a      	mov	r2, r3
 800dd3a:	4b40      	ldr	r3, [pc, #256]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800dd40:	4b3e      	ldr	r3, [pc, #248]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800dd46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dd48:	00db      	lsls	r3, r3, #3
 800dd4a:	b29a      	uxth	r2, r3
 800dd4c:	4b3b      	ldr	r3, [pc, #236]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd4e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800dd50:	4b3a      	ldr	r3, [pc, #232]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd52:	2204      	movs	r2, #4
 800dd54:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 800dd56:	4b39      	ldr	r3, [pc, #228]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd58:	2218      	movs	r2, #24
 800dd5a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800dd5c:	4b37      	ldr	r3, [pc, #220]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd5e:	2200      	movs	r2, #0
 800dd60:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800dd62:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dd66:	f083 0301 	eor.w	r3, r3, #1
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b33      	ldr	r3, [pc, #204]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd70:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800dd72:	4b33      	ldr	r3, [pc, #204]	; (800de40 <RadioSetRxConfig+0x300>)
 800dd74:	781a      	ldrb	r2, [r3, #0]
 800dd76:	4b31      	ldr	r3, [pc, #196]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd78:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 800dd7a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800dd82:	4b2e      	ldr	r3, [pc, #184]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd84:	22f2      	movs	r2, #242	; 0xf2
 800dd86:	75da      	strb	r2, [r3, #23]
 800dd88:	e002      	b.n	800dd90 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800dd8a:	4b2c      	ldr	r3, [pc, #176]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800dd90:	4b2a      	ldr	r3, [pc, #168]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dd92:	2201      	movs	r2, #1
 800dd94:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800dd96:	f000 fc68 	bl	800e66a <RadioStandby>
            RadioSetModem( MODEM_FSK );
 800dd9a:	2000      	movs	r0, #0
 800dd9c:	f7ff fdfc 	bl	800d998 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800dda0:	4828      	ldr	r0, [pc, #160]	; (800de44 <RadioSetRxConfig+0x304>)
 800dda2:	f002 fa59 	bl	8010258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800dda6:	4828      	ldr	r0, [pc, #160]	; (800de48 <RadioSetRxConfig+0x308>)
 800dda8:	f002 fb28 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ddac:	4a28      	ldr	r2, [pc, #160]	; (800de50 <RadioSetRxConfig+0x310>)
 800ddae:	f107 0314 	add.w	r3, r7, #20
 800ddb2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ddb6:	e883 0003 	stmia.w	r3, {r0, r1}
 800ddba:	f107 0314 	add.w	r3, r7, #20
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f001 fde5 	bl	800f98e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800ddc4:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ddc8:	f001 fe30 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 800ddcc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ddce:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800ddd2:	fb02 f303 	mul.w	r3, r2, r3
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddde:	4a17      	ldr	r2, [pc, #92]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800dde0:	6093      	str	r3, [r2, #8]
            break;
 800dde2:	e0ad      	b.n	800df40 <RadioSetRxConfig+0x400>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800dde4:	2000      	movs	r0, #0
 800dde6:	f001 ff99 	bl	800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ddea:	4b14      	ldr	r3, [pc, #80]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	4b11      	ldr	r3, [pc, #68]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800ddf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800ddfc:	4a15      	ldr	r2, [pc, #84]	; (800de54 <RadioSetRxConfig+0x314>)
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	4413      	add	r3, r2
 800de02:	781a      	ldrb	r2, [r3, #0]
 800de04:	4b0d      	ldr	r3, [pc, #52]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800de06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800de0a:	4a0c      	ldr	r2, [pc, #48]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
 800de0e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d105      	bne.n	800de24 <RadioSetRxConfig+0x2e4>
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b0b      	cmp	r3, #11
 800de1c:	d008      	beq.n	800de30 <RadioSetRxConfig+0x2f0>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b0c      	cmp	r3, #12
 800de22:	d005      	beq.n	800de30 <RadioSetRxConfig+0x2f0>
 800de24:	68bb      	ldr	r3, [r7, #8]
 800de26:	2b01      	cmp	r3, #1
 800de28:	d116      	bne.n	800de58 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	2b0c      	cmp	r3, #12
 800de2e:	d113      	bne.n	800de58 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800de30:	4b02      	ldr	r3, [pc, #8]	; (800de3c <RadioSetRxConfig+0x2fc>)
 800de32:	2201      	movs	r2, #1
 800de34:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800de38:	e012      	b.n	800de60 <RadioSetRxConfig+0x320>
 800de3a:	bf00      	nop
 800de3c:	2000672c 	.word	0x2000672c
 800de40:	20000031 	.word	0x20000031
 800de44:	20006764 	.word	0x20006764
 800de48:	2000673a 	.word	0x2000673a
 800de4c:	08012944 	.word	0x08012944
 800de50:	0801294c 	.word	0x0801294c
 800de54:	08012cc0 	.word	0x08012cc0
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800de58:	4b3b      	ldr	r3, [pc, #236]	; (800df48 <RadioSetRxConfig+0x408>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800de60:	4b39      	ldr	r3, [pc, #228]	; (800df48 <RadioSetRxConfig+0x408>)
 800de62:	2201      	movs	r2, #1
 800de64:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800de66:	4b38      	ldr	r3, [pc, #224]	; (800df48 <RadioSetRxConfig+0x408>)
 800de68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800de6c:	2b05      	cmp	r3, #5
 800de6e:	d004      	beq.n	800de7a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800de70:	4b35      	ldr	r3, [pc, #212]	; (800df48 <RadioSetRxConfig+0x408>)
 800de72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800de76:	2b06      	cmp	r3, #6
 800de78:	d10a      	bne.n	800de90 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 800de7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de7c:	2b0b      	cmp	r3, #11
 800de7e:	d803      	bhi.n	800de88 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800de80:	4b31      	ldr	r3, [pc, #196]	; (800df48 <RadioSetRxConfig+0x408>)
 800de82:	220c      	movs	r2, #12
 800de84:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800de86:	e006      	b.n	800de96 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800de88:	4a2f      	ldr	r2, [pc, #188]	; (800df48 <RadioSetRxConfig+0x408>)
 800de8a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de8c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800de8e:	e002      	b.n	800de96 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800de90:	4a2d      	ldr	r2, [pc, #180]	; (800df48 <RadioSetRxConfig+0x408>)
 800de92:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800de94:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800de96:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800de9a:	4b2b      	ldr	r3, [pc, #172]	; (800df48 <RadioSetRxConfig+0x408>)
 800de9c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800de9e:	4b2b      	ldr	r3, [pc, #172]	; (800df4c <RadioSetRxConfig+0x40c>)
 800dea0:	781a      	ldrb	r2, [r3, #0]
 800dea2:	4b29      	ldr	r3, [pc, #164]	; (800df48 <RadioSetRxConfig+0x408>)
 800dea4:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800dea6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800deaa:	4b27      	ldr	r3, [pc, #156]	; (800df48 <RadioSetRxConfig+0x408>)
 800deac:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800deb0:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800deb4:	4b24      	ldr	r3, [pc, #144]	; (800df48 <RadioSetRxConfig+0x408>)
 800deb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800deba:	f000 fbd6 	bl	800e66a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800debe:	2001      	movs	r0, #1
 800dec0:	f7ff fd6a 	bl	800d998 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800dec4:	4822      	ldr	r0, [pc, #136]	; (800df50 <RadioSetRxConfig+0x410>)
 800dec6:	f002 f9c7 	bl	8010258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800deca:	4822      	ldr	r0, [pc, #136]	; (800df54 <RadioSetRxConfig+0x414>)
 800decc:	f002 fa96 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800ded0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800ded2:	b2db      	uxtb	r3, r3
 800ded4:	4618      	mov	r0, r3
 800ded6:	f001 ff30 	bl	800fd3a <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 800deda:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800dede:	f002 fbe9 	bl	80106b4 <SUBGRF_ReadRegister>
 800dee2:	4603      	mov	r3, r0
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	b2db      	uxtb	r3, r3
 800deea:	4619      	mov	r1, r3
 800deec:	f640 00a3 	movw	r0, #2211	; 0x8a3
 800def0:	f002 fbcc 	bl	801068c <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800def4:	4b14      	ldr	r3, [pc, #80]	; (800df48 <RadioSetRxConfig+0x408>)
 800def6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800defa:	2b01      	cmp	r3, #1
 800defc:	d10d      	bne.n	800df1a <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800defe:	f240 7036 	movw	r0, #1846	; 0x736
 800df02:	f002 fbd7 	bl	80106b4 <SUBGRF_ReadRegister>
 800df06:	4603      	mov	r3, r0
 800df08:	f023 0304 	bic.w	r3, r3, #4
 800df0c:	b2db      	uxtb	r3, r3
 800df0e:	4619      	mov	r1, r3
 800df10:	f240 7036 	movw	r0, #1846	; 0x736
 800df14:	f002 fbba 	bl	801068c <SUBGRF_WriteRegister>
 800df18:	e00c      	b.n	800df34 <RadioSetRxConfig+0x3f4>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800df1a:	f240 7036 	movw	r0, #1846	; 0x736
 800df1e:	f002 fbc9 	bl	80106b4 <SUBGRF_ReadRegister>
 800df22:	4603      	mov	r3, r0
 800df24:	f043 0304 	orr.w	r3, r3, #4
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	4619      	mov	r1, r3
 800df2c:	f240 7036 	movw	r0, #1846	; 0x736
 800df30:	f002 fbac 	bl	801068c <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 800df34:	4b04      	ldr	r3, [pc, #16]	; (800df48 <RadioSetRxConfig+0x408>)
 800df36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df3a:	609a      	str	r2, [r3, #8]
            break;
 800df3c:	e000      	b.n	800df40 <RadioSetRxConfig+0x400>
            break;
 800df3e:	bf00      	nop
    }
}
 800df40:	bf00      	nop
 800df42:	3728      	adds	r7, #40	; 0x28
 800df44:	46bd      	mov	sp, r7
 800df46:	bd80      	pop	{r7, pc}
 800df48:	2000672c 	.word	0x2000672c
 800df4c:	20000031 	.word	0x20000031
 800df50:	20006764 	.word	0x20006764
 800df54:	2000673a 	.word	0x2000673a

0800df58 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b086      	sub	sp, #24
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	60ba      	str	r2, [r7, #8]
 800df60:	607b      	str	r3, [r7, #4]
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
 800df66:	460b      	mov	r3, r1
 800df68:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    RFW_DeInit();
 800df6a:	f002 fe76 	bl	8010c5a <RFW_DeInit>
    switch( modem )
 800df6e:	7bfb      	ldrb	r3, [r7, #15]
 800df70:	2b04      	cmp	r3, #4
 800df72:	f000 80c7 	beq.w	800e104 <RadioSetTxConfig+0x1ac>
 800df76:	2b04      	cmp	r3, #4
 800df78:	f300 80d6 	bgt.w	800e128 <RadioSetTxConfig+0x1d0>
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d002      	beq.n	800df86 <RadioSetTxConfig+0x2e>
 800df80:	2b01      	cmp	r3, #1
 800df82:	d059      	beq.n	800e038 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800df84:	e0d0      	b.n	800e128 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800df86:	4b77      	ldr	r3, [pc, #476]	; (800e164 <RadioSetTxConfig+0x20c>)
 800df88:	2200      	movs	r2, #0
 800df8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 800df8e:	4a75      	ldr	r2, [pc, #468]	; (800e164 <RadioSetTxConfig+0x20c>)
 800df90:	6a3b      	ldr	r3, [r7, #32]
 800df92:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800df94:	4b73      	ldr	r3, [pc, #460]	; (800e164 <RadioSetTxConfig+0x20c>)
 800df96:	220b      	movs	r2, #11
 800df98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800df9c:	6878      	ldr	r0, [r7, #4]
 800df9e:	f002 fd8f 	bl	8010ac0 <SUBGRF_GetFskBandwidthRegValue>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	461a      	mov	r2, r3
 800dfa6:	4b6f      	ldr	r3, [pc, #444]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 800dfac:	4a6d      	ldr	r2, [pc, #436]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfae:	68bb      	ldr	r3, [r7, #8]
 800dfb0:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800dfb2:	4b6c      	ldr	r3, [pc, #432]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800dfb8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800dfba:	00db      	lsls	r3, r3, #3
 800dfbc:	b29a      	uxth	r2, r3
 800dfbe:	4b69      	ldr	r3, [pc, #420]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfc0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800dfc2:	4b68      	ldr	r3, [pc, #416]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfc4:	2204      	movs	r2, #4
 800dfc6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800dfc8:	4b66      	ldr	r3, [pc, #408]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfca:	2218      	movs	r2, #24
 800dfcc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800dfce:	4b65      	ldr	r3, [pc, #404]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfd0:	2200      	movs	r2, #0
 800dfd2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800dfd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800dfd8:	f083 0301 	eor.w	r3, r3, #1
 800dfdc:	b2db      	uxtb	r3, r3
 800dfde:	461a      	mov	r2, r3
 800dfe0:	4b60      	ldr	r3, [pc, #384]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfe2:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 800dfe4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d003      	beq.n	800dff4 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800dfec:	4b5d      	ldr	r3, [pc, #372]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dfee:	22f2      	movs	r2, #242	; 0xf2
 800dff0:	75da      	strb	r2, [r3, #23]
 800dff2:	e002      	b.n	800dffa <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800dff4:	4b5b      	ldr	r3, [pc, #364]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dff6:	2201      	movs	r2, #1
 800dff8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800dffa:	4b5a      	ldr	r3, [pc, #360]	; (800e164 <RadioSetTxConfig+0x20c>)
 800dffc:	2201      	movs	r2, #1
 800dffe:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 800e000:	f000 fb33 	bl	800e66a <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 800e004:	2000      	movs	r0, #0
 800e006:	f7ff fcc7 	bl	800d998 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e00a:	4857      	ldr	r0, [pc, #348]	; (800e168 <RadioSetTxConfig+0x210>)
 800e00c:	f002 f924 	bl	8010258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e010:	4856      	ldr	r0, [pc, #344]	; (800e16c <RadioSetTxConfig+0x214>)
 800e012:	f002 f9f3 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e016:	4a56      	ldr	r2, [pc, #344]	; (800e170 <RadioSetTxConfig+0x218>)
 800e018:	f107 0310 	add.w	r3, r7, #16
 800e01c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e020:	e883 0003 	stmia.w	r3, {r0, r1}
 800e024:	f107 0310 	add.w	r3, r7, #16
 800e028:	4618      	mov	r0, r3
 800e02a:	f001 fcb0 	bl	800f98e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800e02e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800e032:	f001 fcfb 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
            break;
 800e036:	e078      	b.n	800e12a <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e038:	4b4a      	ldr	r3, [pc, #296]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800e040:	6a3b      	ldr	r3, [r7, #32]
 800e042:	b2da      	uxtb	r2, r3
 800e044:	4b47      	ldr	r3, [pc, #284]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e046:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800e04a:	4a4a      	ldr	r2, [pc, #296]	; (800e174 <RadioSetTxConfig+0x21c>)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4413      	add	r3, r2
 800e050:	781a      	ldrb	r2, [r3, #0]
 800e052:	4b44      	ldr	r3, [pc, #272]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800e058:	4a42      	ldr	r2, [pc, #264]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e05a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e05e:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d105      	bne.n	800e074 <RadioSetTxConfig+0x11c>
 800e068:	6a3b      	ldr	r3, [r7, #32]
 800e06a:	2b0b      	cmp	r3, #11
 800e06c:	d008      	beq.n	800e080 <RadioSetTxConfig+0x128>
 800e06e:	6a3b      	ldr	r3, [r7, #32]
 800e070:	2b0c      	cmp	r3, #12
 800e072:	d005      	beq.n	800e080 <RadioSetTxConfig+0x128>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d107      	bne.n	800e08a <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	2b0c      	cmp	r3, #12
 800e07e:	d104      	bne.n	800e08a <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 800e080:	4b38      	ldr	r3, [pc, #224]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800e088:	e003      	b.n	800e092 <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e08a:	4b36      	ldr	r3, [pc, #216]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e092:	4b34      	ldr	r3, [pc, #208]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e094:	2201      	movs	r2, #1
 800e096:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e098:	4b32      	ldr	r3, [pc, #200]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e09a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e09e:	2b05      	cmp	r3, #5
 800e0a0:	d004      	beq.n	800e0ac <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800e0a2:	4b30      	ldr	r3, [pc, #192]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e0a8:	2b06      	cmp	r3, #6
 800e0aa:	d10a      	bne.n	800e0c2 <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 800e0ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0ae:	2b0b      	cmp	r3, #11
 800e0b0:	d803      	bhi.n	800e0ba <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800e0b2:	4b2c      	ldr	r3, [pc, #176]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0b4:	220c      	movs	r2, #12
 800e0b6:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800e0b8:	e006      	b.n	800e0c8 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e0ba:	4a2a      	ldr	r2, [pc, #168]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0be:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800e0c0:	e002      	b.n	800e0c8 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e0c2:	4a28      	ldr	r2, [pc, #160]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e0c6:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e0c8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800e0cc:	4b25      	ldr	r3, [pc, #148]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0ce:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e0d0:	4b29      	ldr	r3, [pc, #164]	; (800e178 <RadioSetTxConfig+0x220>)
 800e0d2:	781a      	ldrb	r2, [r3, #0]
 800e0d4:	4b23      	ldr	r3, [pc, #140]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0d6:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e0d8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e0dc:	4b21      	ldr	r3, [pc, #132]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0de:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e0e2:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 800e0e6:	4b1f      	ldr	r3, [pc, #124]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e0e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 800e0ec:	f000 fabd 	bl	800e66a <RadioStandby>
            RadioSetModem( MODEM_LORA );
 800e0f0:	2001      	movs	r0, #1
 800e0f2:	f7ff fc51 	bl	800d998 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e0f6:	481c      	ldr	r0, [pc, #112]	; (800e168 <RadioSetTxConfig+0x210>)
 800e0f8:	f002 f8ae 	bl	8010258 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e0fc:	481b      	ldr	r0, [pc, #108]	; (800e16c <RadioSetTxConfig+0x214>)
 800e0fe:	f002 f97d 	bl	80103fc <SUBGRF_SetPacketParams>
            break;
 800e102:	e012      	b.n	800e12a <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 800e104:	2004      	movs	r0, #4
 800e106:	f7ff fc47 	bl	800d998 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800e10a:	4b16      	ldr	r3, [pc, #88]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e10c:	2202      	movs	r2, #2
 800e10e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 800e112:	4a14      	ldr	r2, [pc, #80]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e114:	6a3b      	ldr	r3, [r7, #32]
 800e116:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800e118:	4b12      	ldr	r3, [pc, #72]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e11a:	2216      	movs	r2, #22
 800e11c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800e120:	4811      	ldr	r0, [pc, #68]	; (800e168 <RadioSetTxConfig+0x210>)
 800e122:	f002 f899 	bl	8010258 <SUBGRF_SetModulationParams>
            break;
 800e126:	e000      	b.n	800e12a <RadioSetTxConfig+0x1d2>
            break;
 800e128:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800e12a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e12e:	4618      	mov	r0, r3
 800e130:	f002 fbc8 	bl	80108c4 <SUBGRF_SetRfTxPower>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	4b0a      	ldr	r3, [pc, #40]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e13a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800e13e:	210e      	movs	r1, #14
 800e140:	f640 101f 	movw	r0, #2335	; 0x91f
 800e144:	f002 faa2 	bl	801068c <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800e148:	4b06      	ldr	r3, [pc, #24]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e14a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e14e:	4618      	mov	r0, r3
 800e150:	f002 fd97 	bl	8010c82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800e154:	4a03      	ldr	r2, [pc, #12]	; (800e164 <RadioSetTxConfig+0x20c>)
 800e156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e158:	6053      	str	r3, [r2, #4]
}
 800e15a:	bf00      	nop
 800e15c:	3718      	adds	r7, #24
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	2000672c 	.word	0x2000672c
 800e168:	20006764 	.word	0x20006764
 800e16c:	2000673a 	.word	0x2000673a
 800e170:	0801294c 	.word	0x0801294c
 800e174:	08012cc0 	.word	0x08012cc0
 800e178:	20000031 	.word	0x20000031

0800e17c <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 800e17c:	b480      	push	{r7}
 800e17e:	b083      	sub	sp, #12
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
    return true;
 800e184:	2301      	movs	r3, #1
}
 800e186:	4618      	mov	r0, r3
 800e188:	370c      	adds	r7, #12
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bc80      	pop	{r7}
 800e18e:	4770      	bx	lr

0800e190 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 800e190:	b480      	push	{r7}
 800e192:	b085      	sub	sp, #20
 800e194:	af00      	add	r7, sp, #0
 800e196:	4603      	mov	r3, r0
 800e198:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]

    switch( bw )
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	2b0a      	cmp	r3, #10
 800e1a2:	d83e      	bhi.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
 800e1a4:	a201      	add	r2, pc, #4	; (adr r2, 800e1ac <RadioGetLoRaBandwidthInHz+0x1c>)
 800e1a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1aa:	bf00      	nop
 800e1ac:	0800e1d9 	.word	0x0800e1d9
 800e1b0:	0800e1e9 	.word	0x0800e1e9
 800e1b4:	0800e1f9 	.word	0x0800e1f9
 800e1b8:	0800e209 	.word	0x0800e209
 800e1bc:	0800e211 	.word	0x0800e211
 800e1c0:	0800e217 	.word	0x0800e217
 800e1c4:	0800e21d 	.word	0x0800e21d
 800e1c8:	0800e223 	.word	0x0800e223
 800e1cc:	0800e1e1 	.word	0x0800e1e1
 800e1d0:	0800e1f1 	.word	0x0800e1f1
 800e1d4:	0800e201 	.word	0x0800e201
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 800e1d8:	f641 6384 	movw	r3, #7812	; 0x1e84
 800e1dc:	60fb      	str	r3, [r7, #12]
        break;
 800e1de:	e020      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 800e1e0:	f642 03b1 	movw	r3, #10417	; 0x28b1
 800e1e4:	60fb      	str	r3, [r7, #12]
        break;
 800e1e6:	e01c      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 800e1e8:	f643 5309 	movw	r3, #15625	; 0x3d09
 800e1ec:	60fb      	str	r3, [r7, #12]
        break;
 800e1ee:	e018      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 800e1f0:	f245 1361 	movw	r3, #20833	; 0x5161
 800e1f4:	60fb      	str	r3, [r7, #12]
        break;
 800e1f6:	e014      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 800e1f8:	f647 2312 	movw	r3, #31250	; 0x7a12
 800e1fc:	60fb      	str	r3, [r7, #12]
        break;
 800e1fe:	e010      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 800e200:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 800e204:	60fb      	str	r3, [r7, #12]
        break;
 800e206:	e00c      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 800e208:	f24f 4324 	movw	r3, #62500	; 0xf424
 800e20c:	60fb      	str	r3, [r7, #12]
        break;
 800e20e:	e008      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 800e210:	4b07      	ldr	r3, [pc, #28]	; (800e230 <RadioGetLoRaBandwidthInHz+0xa0>)
 800e212:	60fb      	str	r3, [r7, #12]
        break;
 800e214:	e005      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 800e216:	4b07      	ldr	r3, [pc, #28]	; (800e234 <RadioGetLoRaBandwidthInHz+0xa4>)
 800e218:	60fb      	str	r3, [r7, #12]
        break;
 800e21a:	e002      	b.n	800e222 <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 800e21c:	4b06      	ldr	r3, [pc, #24]	; (800e238 <RadioGetLoRaBandwidthInHz+0xa8>)
 800e21e:	60fb      	str	r3, [r7, #12]
        break;
 800e220:	bf00      	nop
    }

    return bandwidthInHz;
 800e222:	68fb      	ldr	r3, [r7, #12]
}
 800e224:	4618      	mov	r0, r3
 800e226:	3714      	adds	r7, #20
 800e228:	46bd      	mov	sp, r7
 800e22a:	bc80      	pop	{r7}
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	0001e848 	.word	0x0001e848
 800e234:	0003d090 	.word	0x0003d090
 800e238:	0007a120 	.word	0x0007a120

0800e23c <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
 800e244:	4608      	mov	r0, r1
 800e246:	4611      	mov	r1, r2
 800e248:	461a      	mov	r2, r3
 800e24a:	4603      	mov	r3, r0
 800e24c:	70fb      	strb	r3, [r7, #3]
 800e24e:	460b      	mov	r3, r1
 800e250:	803b      	strh	r3, [r7, #0]
 800e252:	4613      	mov	r3, r2
 800e254:	70bb      	strb	r3, [r7, #2]
    return ( preambleLen << 3 ) +
 800e256:	883b      	ldrh	r3, [r7, #0]
 800e258:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e25a:	78ba      	ldrb	r2, [r7, #2]
 800e25c:	f082 0201 	eor.w	r2, r2, #1
 800e260:	b2d2      	uxtb	r2, r2
 800e262:	2a00      	cmp	r2, #0
 800e264:	d001      	beq.n	800e26a <RadioGetGfskTimeOnAirNumerator+0x2e>
 800e266:	2208      	movs	r2, #8
 800e268:	e000      	b.n	800e26c <RadioGetGfskTimeOnAirNumerator+0x30>
 800e26a:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 800e26c:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e26e:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800e272:	7c3b      	ldrb	r3, [r7, #16]
 800e274:	7d39      	ldrb	r1, [r7, #20]
 800e276:	2900      	cmp	r1, #0
 800e278:	d001      	beq.n	800e27e <RadioGetGfskTimeOnAirNumerator+0x42>
 800e27a:	2102      	movs	r1, #2
 800e27c:	e000      	b.n	800e280 <RadioGetGfskTimeOnAirNumerator+0x44>
 800e27e:	2100      	movs	r1, #0
 800e280:	440b      	add	r3, r1
 800e282:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800e284:	4413      	add	r3, r2
}
 800e286:	4618      	mov	r0, r3
 800e288:	370c      	adds	r7, #12
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bc80      	pop	{r7}
 800e28e:	4770      	bx	lr

0800e290 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 800e290:	b480      	push	{r7}
 800e292:	b08b      	sub	sp, #44	; 0x2c
 800e294:	af00      	add	r7, sp, #0
 800e296:	60f8      	str	r0, [r7, #12]
 800e298:	60b9      	str	r1, [r7, #8]
 800e29a:	4611      	mov	r1, r2
 800e29c:	461a      	mov	r2, r3
 800e29e:	460b      	mov	r3, r1
 800e2a0:	71fb      	strb	r3, [r7, #7]
 800e2a2:	4613      	mov	r3, r2
 800e2a4:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800e2a6:	79fb      	ldrb	r3, [r7, #7]
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	2b05      	cmp	r3, #5
 800e2b6:	d002      	beq.n	800e2be <RadioGetLoRaTimeOnAirNumerator+0x2e>
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	2b06      	cmp	r3, #6
 800e2bc:	d104      	bne.n	800e2c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 800e2be:	88bb      	ldrh	r3, [r7, #4]
 800e2c0:	2b0b      	cmp	r3, #11
 800e2c2:	d801      	bhi.n	800e2c8 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800e2c4:	230c      	movs	r3, #12
 800e2c6:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d105      	bne.n	800e2da <RadioGetLoRaTimeOnAirNumerator+0x4a>
 800e2ce:	68bb      	ldr	r3, [r7, #8]
 800e2d0:	2b0b      	cmp	r3, #11
 800e2d2:	d008      	beq.n	800e2e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800e2d4:	68bb      	ldr	r3, [r7, #8]
 800e2d6:	2b0c      	cmp	r3, #12
 800e2d8:	d005      	beq.n	800e2e6 <RadioGetLoRaTimeOnAirNumerator+0x56>
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d105      	bne.n	800e2ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b0c      	cmp	r3, #12
 800e2e4:	d102      	bne.n	800e2ec <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e2ec:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800e2f0:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 800e2f2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e2f6:	2a00      	cmp	r2, #0
 800e2f8:	d001      	beq.n	800e2fe <RadioGetLoRaTimeOnAirNumerator+0x6e>
 800e2fa:	2210      	movs	r2, #16
 800e2fc:	e000      	b.n	800e300 <RadioGetLoRaTimeOnAirNumerator+0x70>
 800e2fe:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e300:	4413      	add	r3, r2
 800e302:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 800e308:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 800e30a:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800e30e:	2a00      	cmp	r2, #0
 800e310:	d001      	beq.n	800e316 <RadioGetLoRaTimeOnAirNumerator+0x86>
 800e312:	2200      	movs	r2, #0
 800e314:	e000      	b.n	800e318 <RadioGetLoRaTimeOnAirNumerator+0x88>
 800e316:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 800e318:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e31a:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 800e31c:	68bb      	ldr	r3, [r7, #8]
 800e31e:	2b06      	cmp	r3, #6
 800e320:	d803      	bhi.n	800e32a <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	623b      	str	r3, [r7, #32]
 800e328:	e00e      	b.n	800e348 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 800e32a:	69fb      	ldr	r3, [r7, #28]
 800e32c:	3308      	adds	r3, #8
 800e32e:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 800e330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e334:	2b00      	cmp	r3, #0
 800e336:	d004      	beq.n	800e342 <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	3b02      	subs	r3, #2
 800e33c:	009b      	lsls	r3, r3, #2
 800e33e:	623b      	str	r3, [r7, #32]
 800e340:	e002      	b.n	800e348 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	009b      	lsls	r3, r3, #2
 800e346:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 800e348:	69fb      	ldr	r3, [r7, #28]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	da01      	bge.n	800e352 <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 800e34e:	2300      	movs	r3, #0
 800e350:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e352:	69fa      	ldr	r2, [r7, #28]
 800e354:	6a3b      	ldr	r3, [r7, #32]
 800e356:	4413      	add	r3, r2
 800e358:	1e5a      	subs	r2, r3, #1
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	fb92 f3f3 	sdiv	r3, r2, r3
 800e360:	697a      	ldr	r2, [r7, #20]
 800e362:	fb03 f202 	mul.w	r2, r3, r2
 800e366:	88bb      	ldrh	r3, [r7, #4]
 800e368:	4413      	add	r3, r2
    int32_t intermediate =
 800e36a:	330c      	adds	r3, #12
 800e36c:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	2b06      	cmp	r3, #6
 800e372:	d802      	bhi.n	800e37a <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	3302      	adds	r3, #2
 800e378:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	1c5a      	adds	r2, r3, #1
 800e380:	68bb      	ldr	r3, [r7, #8]
 800e382:	3b02      	subs	r3, #2
 800e384:	fa02 f303 	lsl.w	r3, r2, r3
}
 800e388:	4618      	mov	r0, r3
 800e38a:	372c      	adds	r7, #44	; 0x2c
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bc80      	pop	{r7}
 800e390:	4770      	bx	lr
	...

0800e394 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b08a      	sub	sp, #40	; 0x28
 800e398:	af04      	add	r7, sp, #16
 800e39a:	60b9      	str	r1, [r7, #8]
 800e39c:	607a      	str	r2, [r7, #4]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
 800e3a4:	4613      	mov	r3, r2
 800e3a6:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 800e3ac:	2301      	movs	r3, #1
 800e3ae:	613b      	str	r3, [r7, #16]

    switch( modem )
 800e3b0:	7bfb      	ldrb	r3, [r7, #15]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d002      	beq.n	800e3bc <RadioTimeOnAir+0x28>
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d017      	beq.n	800e3ea <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 800e3ba:	e035      	b.n	800e428 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e3bc:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 800e3c0:	8c3a      	ldrh	r2, [r7, #32]
 800e3c2:	7bb9      	ldrb	r1, [r7, #14]
 800e3c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3c8:	9301      	str	r3, [sp, #4]
 800e3ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3ce:	9300      	str	r3, [sp, #0]
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f7ff ff32 	bl	800e23c <RadioGetGfskTimeOnAirNumerator>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	613b      	str	r3, [r7, #16]
        break;
 800e3e8:	e01e      	b.n	800e428 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e3ea:	8c39      	ldrh	r1, [r7, #32]
 800e3ec:	7bba      	ldrb	r2, [r7, #14]
 800e3ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e3f2:	9302      	str	r3, [sp, #8]
 800e3f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e3f8:	9301      	str	r3, [sp, #4]
 800e3fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e3fe:	9300      	str	r3, [sp, #0]
 800e400:	460b      	mov	r3, r1
 800e402:	6879      	ldr	r1, [r7, #4]
 800e404:	68b8      	ldr	r0, [r7, #8]
 800e406:	f7ff ff43 	bl	800e290 <RadioGetLoRaTimeOnAirNumerator>
 800e40a:	4603      	mov	r3, r0
 800e40c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e410:	fb02 f303 	mul.w	r3, r2, r3
 800e414:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e416:	4a0a      	ldr	r2, [pc, #40]	; (800e440 <RadioTimeOnAir+0xac>)
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	4413      	add	r3, r2
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff feb6 	bl	800e190 <RadioGetLoRaBandwidthInHz>
 800e424:	6138      	str	r0, [r7, #16]
        break;
 800e426:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 800e428:	697a      	ldr	r2, [r7, #20]
 800e42a:	693b      	ldr	r3, [r7, #16]
 800e42c:	4413      	add	r3, r2
 800e42e:	1e5a      	subs	r2, r3, #1
 800e430:	693b      	ldr	r3, [r7, #16]
 800e432:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800e436:	4618      	mov	r0, r3
 800e438:	3718      	adds	r7, #24
 800e43a:	46bd      	mov	sp, r7
 800e43c:	bd80      	pop	{r7, pc}
 800e43e:	bf00      	nop
 800e440:	08012cc0 	.word	0x08012cc0

0800e444 <RadioSend>:

static radio_status_t RadioSend( uint8_t *buffer, uint8_t size )
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b084      	sub	sp, #16
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
 800e44c:	460b      	mov	r3, r1
 800e44e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 800e450:	2300      	movs	r3, #0
 800e452:	2200      	movs	r2, #0
 800e454:	f240 2101 	movw	r1, #513	; 0x201
 800e458:	f240 2001 	movw	r0, #513	; 0x201
 800e45c:	f001 fd66 	bl	800ff2c <SUBGRF_SetDioIrqParams>

    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800e460:	4b73      	ldr	r3, [pc, #460]	; (800e630 <RadioSend+0x1ec>)
 800e462:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e466:	2101      	movs	r1, #1
 800e468:	4618      	mov	r0, r3
 800e46a:	f002 fa03 	bl	8010874 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800e46e:	4b70      	ldr	r3, [pc, #448]	; (800e630 <RadioSend+0x1ec>)
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	2b01      	cmp	r3, #1
 800e474:	d112      	bne.n	800e49c <RadioSend+0x58>
 800e476:	4b6e      	ldr	r3, [pc, #440]	; (800e630 <RadioSend+0x1ec>)
 800e478:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e47c:	2b06      	cmp	r3, #6
 800e47e:	d10d      	bne.n	800e49c <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800e480:	f640 0089 	movw	r0, #2185	; 0x889
 800e484:	f002 f916 	bl	80106b4 <SUBGRF_ReadRegister>
 800e488:	4603      	mov	r3, r0
 800e48a:	f023 0304 	bic.w	r3, r3, #4
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	4619      	mov	r1, r3
 800e492:	f640 0089 	movw	r0, #2185	; 0x889
 800e496:	f002 f8f9 	bl	801068c <SUBGRF_WriteRegister>
 800e49a:	e00c      	b.n	800e4b6 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800e49c:	f640 0089 	movw	r0, #2185	; 0x889
 800e4a0:	f002 f908 	bl	80106b4 <SUBGRF_ReadRegister>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	f043 0304 	orr.w	r3, r3, #4
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	f640 0089 	movw	r0, #2185	; 0x889
 800e4b2:	f002 f8eb 	bl	801068c <SUBGRF_WriteRegister>
    }
    else
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    {
        /* WORKAROUND END */
        switch( SubgRf.Modem )
 800e4b6:	4b5e      	ldr	r3, [pc, #376]	; (800e630 <RadioSend+0x1ec>)
 800e4b8:	781b      	ldrb	r3, [r3, #0]
 800e4ba:	2b04      	cmp	r3, #4
 800e4bc:	f200 80a8 	bhi.w	800e610 <RadioSend+0x1cc>
 800e4c0:	a201      	add	r2, pc, #4	; (adr r2, 800e4c8 <RadioSend+0x84>)
 800e4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4c6:	bf00      	nop
 800e4c8:	0800e4f7 	.word	0x0800e4f7
 800e4cc:	0800e4dd 	.word	0x0800e4dd
 800e4d0:	0800e4f7 	.word	0x0800e4f7
 800e4d4:	0800e559 	.word	0x0800e559
 800e4d8:	0800e579 	.word	0x0800e579
        {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800e4dc:	4a54      	ldr	r2, [pc, #336]	; (800e630 <RadioSend+0x1ec>)
 800e4de:	78fb      	ldrb	r3, [r7, #3]
 800e4e0:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e4e2:	4854      	ldr	r0, [pc, #336]	; (800e634 <RadioSend+0x1f0>)
 800e4e4:	f001 ff8a 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800e4e8:	78fb      	ldrb	r3, [r7, #3]
 800e4ea:	2200      	movs	r2, #0
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f001 fa3a 	bl	800f968 <SUBGRF_SendPayload>
            break;
 800e4f4:	e08d      	b.n	800e612 <RadioSend+0x1ce>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 800e4f6:	f002 fbb6 	bl	8010c66 <RFW_Is_Init>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d11e      	bne.n	800e53e <RadioSend+0xfa>
            {
                uint8_t outsize;
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 800e500:	f107 020d 	add.w	r2, r7, #13
 800e504:	78fb      	ldrb	r3, [r7, #3]
 800e506:	4619      	mov	r1, r3
 800e508:	6878      	ldr	r0, [r7, #4]
 800e50a:	f002 fbc4 	bl	8010c96 <RFW_TransmitInit>
 800e50e:	4603      	mov	r3, r0
 800e510:	2b00      	cmp	r3, #0
 800e512:	d10c      	bne.n	800e52e <RadioSend+0xea>
                {
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 800e514:	7b7a      	ldrb	r2, [r7, #13]
 800e516:	4b46      	ldr	r3, [pc, #280]	; (800e630 <RadioSend+0x1ec>)
 800e518:	759a      	strb	r2, [r3, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e51a:	4846      	ldr	r0, [pc, #280]	; (800e634 <RadioSend+0x1f0>)
 800e51c:	f001 ff6e 	bl	80103fc <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 800e520:	7b7b      	ldrb	r3, [r7, #13]
 800e522:	2200      	movs	r2, #0
 800e524:	4619      	mov	r1, r3
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f001 fa1e 	bl	800f968 <SUBGRF_SendPayload>
            {
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
                SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 800e52c:	e071      	b.n	800e612 <RadioSend+0x1ce>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 800e52e:	4b42      	ldr	r3, [pc, #264]	; (800e638 <RadioSend+0x1f4>)
 800e530:	2201      	movs	r2, #1
 800e532:	2100      	movs	r1, #0
 800e534:	2002      	movs	r0, #2
 800e536:	f003 fd35 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 800e53a:	2303      	movs	r3, #3
 800e53c:	e073      	b.n	800e626 <RadioSend+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800e53e:	4a3c      	ldr	r2, [pc, #240]	; (800e630 <RadioSend+0x1ec>)
 800e540:	78fb      	ldrb	r3, [r7, #3]
 800e542:	7593      	strb	r3, [r2, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e544:	483b      	ldr	r0, [pc, #236]	; (800e634 <RadioSend+0x1f0>)
 800e546:	f001 ff59 	bl	80103fc <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 800e54a:	78fb      	ldrb	r3, [r7, #3]
 800e54c:	2200      	movs	r2, #0
 800e54e:	4619      	mov	r1, r3
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f001 fa09 	bl	800f968 <SUBGRF_SendPayload>
            break;
 800e556:	e05c      	b.n	800e612 <RadioSend+0x1ce>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800e558:	4b35      	ldr	r3, [pc, #212]	; (800e630 <RadioSend+0x1ec>)
 800e55a:	2202      	movs	r2, #2
 800e55c:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 800e55e:	4a34      	ldr	r2, [pc, #208]	; (800e630 <RadioSend+0x1ec>)
 800e560:	78fb      	ldrb	r3, [r7, #3]
 800e562:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e564:	4833      	ldr	r0, [pc, #204]	; (800e634 <RadioSend+0x1f0>)
 800e566:	f001 ff49 	bl	80103fc <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 800e56a:	78fb      	ldrb	r3, [r7, #3]
 800e56c:	2200      	movs	r2, #0
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f001 f9f9 	bl	800f968 <SUBGRF_SendPayload>
            break;
 800e576:	e04c      	b.n	800e612 <RadioSend+0x1ce>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 800e578:	78fb      	ldrb	r3, [r7, #3]
 800e57a:	461a      	mov	r2, r3
 800e57c:	6879      	ldr	r1, [r7, #4]
 800e57e:	482f      	ldr	r0, [pc, #188]	; (800e63c <RadioSend+0x1f8>)
 800e580:	f000 fccc 	bl	800ef1c <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 800e584:	4b2a      	ldr	r3, [pc, #168]	; (800e630 <RadioSend+0x1ec>)
 800e586:	2202      	movs	r2, #2
 800e588:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 800e58a:	78fb      	ldrb	r3, [r7, #3]
 800e58c:	3301      	adds	r3, #1
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	4b27      	ldr	r3, [pc, #156]	; (800e630 <RadioSend+0x1ec>)
 800e592:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e594:	4827      	ldr	r0, [pc, #156]	; (800e634 <RadioSend+0x1f0>)
 800e596:	f001 ff31 	bl	80103fc <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 800e59a:	2100      	movs	r1, #0
 800e59c:	20f1      	movs	r0, #241	; 0xf1
 800e59e:	f000 f966 	bl	800e86e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	20f0      	movs	r0, #240	; 0xf0
 800e5a6:	f000 f962 	bl	800e86e <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 800e5aa:	4b21      	ldr	r3, [pc, #132]	; (800e630 <RadioSend+0x1ec>)
 800e5ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ae:	2b64      	cmp	r3, #100	; 0x64
 800e5b0:	d108      	bne.n	800e5c4 <RadioSend+0x180>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 800e5b2:	2170      	movs	r1, #112	; 0x70
 800e5b4:	20f3      	movs	r0, #243	; 0xf3
 800e5b6:	f000 f95a 	bl	800e86e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 800e5ba:	211d      	movs	r1, #29
 800e5bc:	20f2      	movs	r0, #242	; 0xf2
 800e5be:	f000 f956 	bl	800e86e <RadioWrite>
 800e5c2:	e007      	b.n	800e5d4 <RadioSend+0x190>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800e5c4:	21e1      	movs	r1, #225	; 0xe1
 800e5c6:	20f3      	movs	r0, #243	; 0xf3
 800e5c8:	f000 f951 	bl	800e86e <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 800e5cc:	2104      	movs	r1, #4
 800e5ce:	20f2      	movs	r0, #242	; 0xf2
 800e5d0:	f000 f94d 	bl	800e86e <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 800e5d4:	78fb      	ldrb	r3, [r7, #3]
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	b29b      	uxth	r3, r3
 800e5dc:	3302      	adds	r3, #2
 800e5de:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 800e5e0:	89fb      	ldrh	r3, [r7, #14]
 800e5e2:	0a1b      	lsrs	r3, r3, #8
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	4619      	mov	r1, r3
 800e5ea:	20f4      	movs	r0, #244	; 0xf4
 800e5ec:	f000 f93f 	bl	800e86e <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 800e5f0:	89fb      	ldrh	r3, [r7, #14]
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	4619      	mov	r1, r3
 800e5f6:	20f5      	movs	r0, #245	; 0xf5
 800e5f8:	f000 f939 	bl	800e86e <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 800e5fc:	78fb      	ldrb	r3, [r7, #3]
 800e5fe:	3301      	adds	r3, #1
 800e600:	b2db      	uxtb	r3, r3
 800e602:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800e606:	4619      	mov	r1, r3
 800e608:	480c      	ldr	r0, [pc, #48]	; (800e63c <RadioSend+0x1f8>)
 800e60a:	f001 f9ad 	bl	800f968 <SUBGRF_SendPayload>
            break;
 800e60e:	e000      	b.n	800e612 <RadioSend+0x1ce>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 800e610:	bf00      	nop
        }

        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800e612:	4b07      	ldr	r3, [pc, #28]	; (800e630 <RadioSend+0x1ec>)
 800e614:	685b      	ldr	r3, [r3, #4]
 800e616:	4619      	mov	r1, r3
 800e618:	4809      	ldr	r0, [pc, #36]	; (800e640 <RadioSend+0x1fc>)
 800e61a:	f003 fb3b 	bl	8011c94 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800e61e:	4808      	ldr	r0, [pc, #32]	; (800e640 <RadioSend+0x1fc>)
 800e620:	f003 fa5a 	bl	8011ad8 <UTIL_TIMER_Start>
    }

    return RADIO_STATUS_OK;
 800e624:	2300      	movs	r3, #0
}
 800e626:	4618      	mov	r0, r3
 800e628:	3710      	adds	r7, #16
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	2000672c 	.word	0x2000672c
 800e634:	2000673a 	.word	0x2000673a
 800e638:	08012954 	.word	0x08012954
 800e63c:	20006628 	.word	0x20006628
 800e640:	20006788 	.word	0x20006788

0800e644 <RadioSleep>:

static void RadioSleep( void )
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b082      	sub	sp, #8
 800e648:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 800e64a:	2300      	movs	r3, #0
 800e64c:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 800e64e:	793b      	ldrb	r3, [r7, #4]
 800e650:	f043 0304 	orr.w	r3, r3, #4
 800e654:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 800e656:	7938      	ldrb	r0, [r7, #4]
 800e658:	f001 fa62 	bl	800fb20 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 800e65c:	2002      	movs	r0, #2
 800e65e:	f7f3 fbbf 	bl	8001de0 <HAL_Delay>
}
 800e662:	bf00      	nop
 800e664:	3708      	adds	r7, #8
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <RadioStandby>:

static void RadioStandby( void )
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 800e66e:	2000      	movs	r0, #0
 800e670:	f001 fa88 	bl	800fb84 <SUBGRF_SetStandby>
}
 800e674:	bf00      	nop
 800e676:	bd80      	pop	{r7, pc}

0800e678 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init( ) )
 800e680:	f002 faf1 	bl	8010c66 <RFW_Is_Init>
 800e684:	4603      	mov	r3, r0
 800e686:	2b01      	cmp	r3, #1
 800e688:	d102      	bne.n	800e690 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 800e68a:	f002 fb14 	bl	8010cb6 <RFW_ReceiveInit>
 800e68e:	e007      	b.n	800e6a0 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e690:	2300      	movs	r3, #0
 800e692:	2200      	movs	r2, #0
 800e694:	f240 2162 	movw	r1, #610	; 0x262
 800e698:	f240 2062 	movw	r0, #610	; 0x262
 800e69c:	f001 fc46 	bl	800ff2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d006      	beq.n	800e6b4 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e6a6:	6879      	ldr	r1, [r7, #4]
 800e6a8:	4811      	ldr	r0, [pc, #68]	; (800e6f0 <RadioRx+0x78>)
 800e6aa:	f003 faf3 	bl	8011c94 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e6ae:	4810      	ldr	r0, [pc, #64]	; (800e6f0 <RadioRx+0x78>)
 800e6b0:	f003 fa12 	bl	8011ad8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e6b4:	4b0f      	ldr	r3, [pc, #60]	; (800e6f4 <RadioRx+0x7c>)
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e6ba:	4b0e      	ldr	r3, [pc, #56]	; (800e6f4 <RadioRx+0x7c>)
 800e6bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f002 f8d6 	bl	8010874 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800e6c8:	4b0a      	ldr	r3, [pc, #40]	; (800e6f4 <RadioRx+0x7c>)
 800e6ca:	785b      	ldrb	r3, [r3, #1]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d004      	beq.n	800e6da <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800e6d0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e6d4:	f001 fa92 	bl	800fbfc <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 800e6d8:	e005      	b.n	800e6e6 <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 800e6da:	4b06      	ldr	r3, [pc, #24]	; (800e6f4 <RadioRx+0x7c>)
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	019b      	lsls	r3, r3, #6
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f001 fa8b 	bl	800fbfc <SUBGRF_SetRx>
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	200067a0 	.word	0x200067a0
 800e6f4:	2000672c 	.word	0x2000672c

0800e6f8 <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 800e6f8:	b580      	push	{r7, lr}
 800e6fa:	b082      	sub	sp, #8
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    if( 1UL == RFW_Is_Init() )
 800e700:	f002 fab1 	bl	8010c66 <RFW_Is_Init>
 800e704:	4603      	mov	r3, r0
 800e706:	2b01      	cmp	r3, #1
 800e708:	d102      	bne.n	800e710 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 800e70a:	f002 fad4 	bl	8010cb6 <RFW_ReceiveInit>
 800e70e:	e007      	b.n	800e720 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800e710:	2300      	movs	r3, #0
 800e712:	2200      	movs	r2, #0
 800e714:	f240 2162 	movw	r1, #610	; 0x262
 800e718:	f240 2062 	movw	r0, #610	; 0x262
 800e71c:	f001 fc06 	bl	800ff2c <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d006      	beq.n	800e734 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e726:	6879      	ldr	r1, [r7, #4]
 800e728:	4811      	ldr	r0, [pc, #68]	; (800e770 <RadioRxBoosted+0x78>)
 800e72a:	f003 fab3 	bl	8011c94 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e72e:	4810      	ldr	r0, [pc, #64]	; (800e770 <RadioRxBoosted+0x78>)
 800e730:	f003 f9d2 	bl	8011ad8 <UTIL_TIMER_Start>
    }
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800e734:	4b0f      	ldr	r3, [pc, #60]	; (800e774 <RadioRxBoosted+0x7c>)
 800e736:	2200      	movs	r2, #0
 800e738:	659a      	str	r2, [r3, #88]	; 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e73a:	4b0e      	ldr	r3, [pc, #56]	; (800e774 <RadioRxBoosted+0x7c>)
 800e73c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e740:	2100      	movs	r1, #0
 800e742:	4618      	mov	r0, r3
 800e744:	f002 f896 	bl	8010874 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 800e748:	4b0a      	ldr	r3, [pc, #40]	; (800e774 <RadioRxBoosted+0x7c>)
 800e74a:	785b      	ldrb	r3, [r3, #1]
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d004      	beq.n	800e75a <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e750:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800e754:	f001 fa72 	bl	800fc3c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 800e758:	e005      	b.n	800e766 <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 800e75a:	4b06      	ldr	r3, [pc, #24]	; (800e774 <RadioRxBoosted+0x7c>)
 800e75c:	689b      	ldr	r3, [r3, #8]
 800e75e:	019b      	lsls	r3, r3, #6
 800e760:	4618      	mov	r0, r3
 800e762:	f001 fa6b 	bl	800fc3c <SUBGRF_SetRxBoosted>
}
 800e766:	bf00      	nop
 800e768:	3708      	adds	r7, #8
 800e76a:	46bd      	mov	sp, r7
 800e76c:	bd80      	pop	{r7, pc}
 800e76e:	bf00      	nop
 800e770:	200067a0 	.word	0x200067a0
 800e774:	2000672c 	.word	0x2000672c

0800e778 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b082      	sub	sp, #8
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	005a      	lsls	r2, r3, #1
 800e786:	683b      	ldr	r3, [r7, #0]
 800e788:	4413      	add	r3, r2
 800e78a:	4a0c      	ldr	r2, [pc, #48]	; (800e7bc <RadioSetRxDutyCycle+0x44>)
 800e78c:	6593      	str	r3, [r2, #88]	; 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e78e:	2300      	movs	r3, #0
 800e790:	2200      	movs	r2, #0
 800e792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800e796:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e79a:	f001 fbc7 	bl	800ff2c <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e79e:	4b07      	ldr	r3, [pc, #28]	; (800e7bc <RadioSetRxDutyCycle+0x44>)
 800e7a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f002 f864 	bl	8010874 <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 800e7ac:	6839      	ldr	r1, [r7, #0]
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f001 fa68 	bl	800fc84 <SUBGRF_SetRxDutyCycle>
}
 800e7b4:	bf00      	nop
 800e7b6:	3708      	adds	r7, #8
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	2000672c 	.word	0x2000672c

0800e7c0 <RadioStartCad>:

static void RadioStartCad( void )
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800e7c4:	4b09      	ldr	r3, [pc, #36]	; (800e7ec <RadioStartCad+0x2c>)
 800e7c6:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f002 f851 	bl	8010874 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800e7da:	f44f 70c0 	mov.w	r0, #384	; 0x180
 800e7de:	f001 fba5 	bl	800ff2c <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 800e7e2:	f001 fa7b 	bl	800fcdc <SUBGRF_SetCad>
}
 800e7e6:	bf00      	nop
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	2000672c 	.word	0x2000672c

0800e7f0 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	460b      	mov	r3, r1
 800e7fa:	70fb      	strb	r3, [r7, #3]
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	803b      	strh	r3, [r7, #0]
    if( SubgRf.lr_fhss.is_lr_fhss_on == true )
    {
        //return LORAMAC_RADIO_STATUS_ERROR;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    uint32_t timeout = ( uint32_t )time * 1000;
 800e800:	883b      	ldrh	r3, [r7, #0]
 800e802:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e806:	fb02 f303 	mul.w	r3, r2, r3
 800e80a:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 800e80c:	6878      	ldr	r0, [r7, #4]
 800e80e:	f001 fbe9 	bl	800ffe4 <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 800e812:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e816:	4618      	mov	r0, r3
 800e818:	f002 f854 	bl	80108c4 <SUBGRF_SetRfTxPower>
 800e81c:	4603      	mov	r3, r0
 800e81e:	72fb      	strb	r3, [r7, #11]

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800e820:	210e      	movs	r1, #14
 800e822:	f640 101f 	movw	r0, #2335	; 0x91f
 800e826:	f001 ff31 	bl	801068c <SUBGRF_WriteRegister>

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 800e82a:	7afb      	ldrb	r3, [r7, #11]
 800e82c:	2101      	movs	r1, #1
 800e82e:	4618      	mov	r0, r3
 800e830:	f002 f820 	bl	8010874 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 800e834:	f001 fa60 	bl	800fcf8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 800e838:	68f9      	ldr	r1, [r7, #12]
 800e83a:	4805      	ldr	r0, [pc, #20]	; (800e850 <RadioSetTxContinuousWave+0x60>)
 800e83c:	f003 fa2a 	bl	8011c94 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800e840:	4803      	ldr	r0, [pc, #12]	; (800e850 <RadioSetTxContinuousWave+0x60>)
 800e842:	f003 f949 	bl	8011ad8 <UTIL_TIMER_Start>
}
 800e846:	bf00      	nop
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
 800e84e:	bf00      	nop
 800e850:	20006788 	.word	0x20006788

0800e854 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	4603      	mov	r3, r0
 800e85c:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 800e85e:	f001 fe82 	bl	8010566 <SUBGRF_GetRssiInst>
 800e862:	4603      	mov	r3, r0
 800e864:	b21b      	sxth	r3, r3
}
 800e866:	4618      	mov	r0, r3
 800e868:	3708      	adds	r7, #8
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b082      	sub	sp, #8
 800e872:	af00      	add	r7, sp, #0
 800e874:	4603      	mov	r3, r0
 800e876:	460a      	mov	r2, r1
 800e878:	80fb      	strh	r3, [r7, #6]
 800e87a:	4613      	mov	r3, r2
 800e87c:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 800e87e:	797a      	ldrb	r2, [r7, #5]
 800e880:	88fb      	ldrh	r3, [r7, #6]
 800e882:	4611      	mov	r1, r2
 800e884:	4618      	mov	r0, r3
 800e886:	f001 ff01 	bl	801068c <SUBGRF_WriteRegister>
}
 800e88a:	bf00      	nop
 800e88c:	3708      	adds	r7, #8
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}

0800e892 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 800e892:	b580      	push	{r7, lr}
 800e894:	b082      	sub	sp, #8
 800e896:	af00      	add	r7, sp, #0
 800e898:	4603      	mov	r3, r0
 800e89a:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f001 ff08 	bl	80106b4 <SUBGRF_ReadRegister>
 800e8a4:	4603      	mov	r3, r0
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3708      	adds	r7, #8
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}

0800e8ae <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	b082      	sub	sp, #8
 800e8b2:	af00      	add	r7, sp, #0
 800e8b4:	4603      	mov	r3, r0
 800e8b6:	6039      	str	r1, [r7, #0]
 800e8b8:	80fb      	strh	r3, [r7, #6]
 800e8ba:	4613      	mov	r3, r2
 800e8bc:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 800e8be:	797b      	ldrb	r3, [r7, #5]
 800e8c0:	b29a      	uxth	r2, r3
 800e8c2:	88fb      	ldrh	r3, [r7, #6]
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f001 ff08 	bl	80106dc <SUBGRF_WriteRegisters>
}
 800e8cc:	bf00      	nop
 800e8ce:	3708      	adds	r7, #8
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd80      	pop	{r7, pc}

0800e8d4 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	4603      	mov	r3, r0
 800e8dc:	6039      	str	r1, [r7, #0]
 800e8de:	80fb      	strh	r3, [r7, #6]
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 800e8e4:	797b      	ldrb	r3, [r7, #5]
 800e8e6:	b29a      	uxth	r2, r3
 800e8e8:	88fb      	ldrh	r3, [r7, #6]
 800e8ea:	6839      	ldr	r1, [r7, #0]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f001 ff17 	bl	8010720 <SUBGRF_ReadRegisters>
}
 800e8f2:	bf00      	nop
 800e8f4:	3708      	adds	r7, #8
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b082      	sub	sp, #8
 800e900:	af00      	add	r7, sp, #0
 800e902:	4603      	mov	r3, r0
 800e904:	460a      	mov	r2, r1
 800e906:	71fb      	strb	r3, [r7, #7]
 800e908:	4613      	mov	r3, r2
 800e90a:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 800e90c:	79fb      	ldrb	r3, [r7, #7]
 800e90e:	2b01      	cmp	r3, #1
 800e910:	d10a      	bne.n	800e928 <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e912:	4a0e      	ldr	r2, [pc, #56]	; (800e94c <RadioSetMaxPayloadLength+0x50>)
 800e914:	79bb      	ldrb	r3, [r7, #6]
 800e916:	7013      	strb	r3, [r2, #0]
 800e918:	4b0c      	ldr	r3, [pc, #48]	; (800e94c <RadioSetMaxPayloadLength+0x50>)
 800e91a:	781a      	ldrb	r2, [r3, #0]
 800e91c:	4b0c      	ldr	r3, [pc, #48]	; (800e950 <RadioSetMaxPayloadLength+0x54>)
 800e91e:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e920:	480c      	ldr	r0, [pc, #48]	; (800e954 <RadioSetMaxPayloadLength+0x58>)
 800e922:	f001 fd6b 	bl	80103fc <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 800e926:	e00d      	b.n	800e944 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e928:	4b09      	ldr	r3, [pc, #36]	; (800e950 <RadioSetMaxPayloadLength+0x54>)
 800e92a:	7d5b      	ldrb	r3, [r3, #21]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d109      	bne.n	800e944 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e930:	4a06      	ldr	r2, [pc, #24]	; (800e94c <RadioSetMaxPayloadLength+0x50>)
 800e932:	79bb      	ldrb	r3, [r7, #6]
 800e934:	7013      	strb	r3, [r2, #0]
 800e936:	4b05      	ldr	r3, [pc, #20]	; (800e94c <RadioSetMaxPayloadLength+0x50>)
 800e938:	781a      	ldrb	r2, [r3, #0]
 800e93a:	4b05      	ldr	r3, [pc, #20]	; (800e950 <RadioSetMaxPayloadLength+0x54>)
 800e93c:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800e93e:	4805      	ldr	r0, [pc, #20]	; (800e954 <RadioSetMaxPayloadLength+0x58>)
 800e940:	f001 fd5c 	bl	80103fc <SUBGRF_SetPacketParams>
}
 800e944:	bf00      	nop
 800e946:	3708      	adds	r7, #8
 800e948:	46bd      	mov	sp, r7
 800e94a:	bd80      	pop	{r7, pc}
 800e94c:	20000031 	.word	0x20000031
 800e950:	2000672c 	.word	0x2000672c
 800e954:	2000673a 	.word	0x2000673a

0800e958 <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	4603      	mov	r3, r0
 800e960:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 800e962:	4a13      	ldr	r2, [pc, #76]	; (800e9b0 <RadioSetPublicNetwork+0x58>)
 800e964:	79fb      	ldrb	r3, [r7, #7]
 800e966:	7313      	strb	r3, [r2, #12]
 800e968:	4b11      	ldr	r3, [pc, #68]	; (800e9b0 <RadioSetPublicNetwork+0x58>)
 800e96a:	7b1a      	ldrb	r2, [r3, #12]
 800e96c:	4b10      	ldr	r3, [pc, #64]	; (800e9b0 <RadioSetPublicNetwork+0x58>)
 800e96e:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 800e970:	2001      	movs	r0, #1
 800e972:	f7ff f811 	bl	800d998 <RadioSetModem>
    if( enable == true )
 800e976:	79fb      	ldrb	r3, [r7, #7]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800e97c:	2134      	movs	r1, #52	; 0x34
 800e97e:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800e982:	f001 fe83 	bl	801068c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800e986:	2144      	movs	r1, #68	; 0x44
 800e988:	f240 7041 	movw	r0, #1857	; 0x741
 800e98c:	f001 fe7e 	bl	801068c <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 800e990:	e009      	b.n	800e9a6 <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800e992:	2114      	movs	r1, #20
 800e994:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 800e998:	f001 fe78 	bl	801068c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800e99c:	2124      	movs	r1, #36	; 0x24
 800e99e:	f240 7041 	movw	r0, #1857	; 0x741
 800e9a2:	f001 fe73 	bl	801068c <SUBGRF_WriteRegister>
}
 800e9a6:	bf00      	nop
 800e9a8:	3708      	adds	r7, #8
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	2000672c 	.word	0x2000672c

0800e9b4 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 800e9b8:	f001 ffb8 	bl	801092c <SUBGRF_GetRadioWakeUpTime>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	3303      	adds	r3, #3
}
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 800e9cc:	f000 f80e 	bl	800e9ec <RadioOnTxTimeoutProcess>
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b082      	sub	sp, #8
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 800e9e0:	f000 f818 	bl	800ea14 <RadioOnRxTimeoutProcess>
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e9f0:	4b07      	ldr	r3, [pc, #28]	; (800ea10 <RadioOnTxTimeoutProcess+0x24>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d008      	beq.n	800ea0a <RadioOnTxTimeoutProcess+0x1e>
 800e9f8:	4b05      	ldr	r3, [pc, #20]	; (800ea10 <RadioOnTxTimeoutProcess+0x24>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d003      	beq.n	800ea0a <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 800ea02:	4b03      	ldr	r3, [pc, #12]	; (800ea10 <RadioOnTxTimeoutProcess+0x24>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	4798      	blx	r3
    }
}
 800ea0a:	bf00      	nop
 800ea0c:	bd80      	pop	{r7, pc}
 800ea0e:	bf00      	nop
 800ea10:	20006728 	.word	0x20006728

0800ea14 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ea18:	4b07      	ldr	r3, [pc, #28]	; (800ea38 <RadioOnRxTimeoutProcess+0x24>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d008      	beq.n	800ea32 <RadioOnRxTimeoutProcess+0x1e>
 800ea20:	4b05      	ldr	r3, [pc, #20]	; (800ea38 <RadioOnRxTimeoutProcess+0x24>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 800ea2a:	4b03      	ldr	r3, [pc, #12]	; (800ea38 <RadioOnRxTimeoutProcess+0x24>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	68db      	ldr	r3, [r3, #12]
 800ea30:	4798      	blx	r3
    }
}
 800ea32:	bf00      	nop
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	20006728 	.word	0x20006728

0800ea3c <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 800ea46:	4a05      	ldr	r2, [pc, #20]	; (800ea5c <RadioOnDioIrq+0x20>)
 800ea48:	88fb      	ldrh	r3, [r7, #6]
 800ea4a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 800ea4e:	f000 f807 	bl	800ea60 <RadioIrqProcess>
}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}
 800ea5a:	bf00      	nop
 800ea5c:	2000672c 	.word	0x2000672c

0800ea60 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 800ea60:	b5b0      	push	{r4, r5, r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 800ea66:	2300      	movs	r3, #0
 800ea68:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 800ea6e:	4ba8      	ldr	r3, [pc, #672]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ea70:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ea74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea78:	f000 810d 	beq.w	800ec96 <RadioIrqProcess+0x236>
 800ea7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea80:	f300 81e8 	bgt.w	800ee54 <RadioIrqProcess+0x3f4>
 800ea84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea88:	f000 80f1 	beq.w	800ec6e <RadioIrqProcess+0x20e>
 800ea8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea90:	f300 81e0 	bgt.w	800ee54 <RadioIrqProcess+0x3f4>
 800ea94:	2b80      	cmp	r3, #128	; 0x80
 800ea96:	f000 80d6 	beq.w	800ec46 <RadioIrqProcess+0x1e6>
 800ea9a:	2b80      	cmp	r3, #128	; 0x80
 800ea9c:	f300 81da 	bgt.w	800ee54 <RadioIrqProcess+0x3f4>
 800eaa0:	2b20      	cmp	r3, #32
 800eaa2:	dc49      	bgt.n	800eb38 <RadioIrqProcess+0xd8>
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f340 81d5 	ble.w	800ee54 <RadioIrqProcess+0x3f4>
 800eaaa:	3b01      	subs	r3, #1
 800eaac:	2b1f      	cmp	r3, #31
 800eaae:	f200 81d1 	bhi.w	800ee54 <RadioIrqProcess+0x3f4>
 800eab2:	a201      	add	r2, pc, #4	; (adr r2, 800eab8 <RadioIrqProcess+0x58>)
 800eab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eab8:	0800eb41 	.word	0x0800eb41
 800eabc:	0800eb7b 	.word	0x0800eb7b
 800eac0:	0800ee55 	.word	0x0800ee55
 800eac4:	0800ed31 	.word	0x0800ed31
 800eac8:	0800ee55 	.word	0x0800ee55
 800eacc:	0800ee55 	.word	0x0800ee55
 800ead0:	0800ee55 	.word	0x0800ee55
 800ead4:	0800edad 	.word	0x0800edad
 800ead8:	0800ee55 	.word	0x0800ee55
 800eadc:	0800ee55 	.word	0x0800ee55
 800eae0:	0800ee55 	.word	0x0800ee55
 800eae4:	0800ee55 	.word	0x0800ee55
 800eae8:	0800ee55 	.word	0x0800ee55
 800eaec:	0800ee55 	.word	0x0800ee55
 800eaf0:	0800ee55 	.word	0x0800ee55
 800eaf4:	0800edc9 	.word	0x0800edc9
 800eaf8:	0800ee55 	.word	0x0800ee55
 800eafc:	0800ee55 	.word	0x0800ee55
 800eb00:	0800ee55 	.word	0x0800ee55
 800eb04:	0800ee55 	.word	0x0800ee55
 800eb08:	0800ee55 	.word	0x0800ee55
 800eb0c:	0800ee55 	.word	0x0800ee55
 800eb10:	0800ee55 	.word	0x0800ee55
 800eb14:	0800ee55 	.word	0x0800ee55
 800eb18:	0800ee55 	.word	0x0800ee55
 800eb1c:	0800ee55 	.word	0x0800ee55
 800eb20:	0800ee55 	.word	0x0800ee55
 800eb24:	0800ee55 	.word	0x0800ee55
 800eb28:	0800ee55 	.word	0x0800ee55
 800eb2c:	0800ee55 	.word	0x0800ee55
 800eb30:	0800ee55 	.word	0x0800ee55
 800eb34:	0800edd7 	.word	0x0800edd7
 800eb38:	2b40      	cmp	r3, #64	; 0x40
 800eb3a:	f000 816d 	beq.w	800ee18 <RadioIrqProcess+0x3b8>
        MW_LOG( TS_ON, VLEVEL_M,  "HOP\r\n" );
        break;
    }
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    default:
        break;
 800eb3e:	e189      	b.n	800ee54 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 800eb40:	4874      	ldr	r0, [pc, #464]	; (800ed14 <RadioIrqProcess+0x2b4>)
 800eb42:	f003 f837 	bl	8011bb4 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800eb46:	2000      	movs	r0, #0
 800eb48:	f001 f81c 	bl	800fb84 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 800eb4c:	f002 f892 	bl	8010c74 <RFW_Is_LongPacketModeEnabled>
 800eb50:	4603      	mov	r3, r0
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d101      	bne.n	800eb5a <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 800eb56:	f002 f8b6 	bl	8010cc6 <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800eb5a:	4b6f      	ldr	r3, [pc, #444]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f000 817a 	beq.w	800ee58 <RadioIrqProcess+0x3f8>
 800eb64:	4b6c      	ldr	r3, [pc, #432]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 8174 	beq.w	800ee58 <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 800eb70:	4b69      	ldr	r3, [pc, #420]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	4798      	blx	r3
        break;
 800eb78:	e16e      	b.n	800ee58 <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 800eb7a:	4868      	ldr	r0, [pc, #416]	; (800ed1c <RadioIrqProcess+0x2bc>)
 800eb7c:	f003 f81a 	bl	8011bb4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eb80:	4b63      	ldr	r3, [pc, #396]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800eb82:	785b      	ldrb	r3, [r3, #1]
 800eb84:	f083 0301 	eor.w	r3, r3, #1
 800eb88:	b2db      	uxtb	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d014      	beq.n	800ebb8 <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 800eb8e:	2000      	movs	r0, #0
 800eb90:	f000 fff8 	bl	800fb84 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 800eb94:	2100      	movs	r1, #0
 800eb96:	f640 1002 	movw	r0, #2306	; 0x902
 800eb9a:	f001 fd77 	bl	801068c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 800eb9e:	f640 1044 	movw	r0, #2372	; 0x944
 800eba2:	f001 fd87 	bl	80106b4 <SUBGRF_ReadRegister>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f043 0302 	orr.w	r3, r3, #2
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	4619      	mov	r1, r3
 800ebb0:	f640 1044 	movw	r0, #2372	; 0x944
 800ebb4:	f001 fd6a 	bl	801068c <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 800ebb8:	1dfb      	adds	r3, r7, #7
 800ebba:	22ff      	movs	r2, #255	; 0xff
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	4858      	ldr	r0, [pc, #352]	; (800ed20 <RadioIrqProcess+0x2c0>)
 800ebc0:	f000 feb0 	bl	800f924 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 800ebc4:	4857      	ldr	r0, [pc, #348]	; (800ed24 <RadioIrqProcess+0x2c4>)
 800ebc6:	f001 fd0f 	bl	80105e8 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800ebca:	4b53      	ldr	r3, [pc, #332]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 8144 	beq.w	800ee5c <RadioIrqProcess+0x3fc>
 800ebd4:	4b50      	ldr	r3, [pc, #320]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	689b      	ldr	r3, [r3, #8]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 813e 	beq.w	800ee5c <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 800ebe0:	4b4b      	ldr	r3, [pc, #300]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ebe2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d10e      	bne.n	800ec08 <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 800ebea:	4b4b      	ldr	r3, [pc, #300]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	689c      	ldr	r4, [r3, #8]
 800ebf0:	79fb      	ldrb	r3, [r7, #7]
 800ebf2:	b299      	uxth	r1, r3
 800ebf4:	4b46      	ldr	r3, [pc, #280]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ebf6:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800ebfa:	b21a      	sxth	r2, r3
 800ebfc:	4b44      	ldr	r3, [pc, #272]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ebfe:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800ec02:	4847      	ldr	r0, [pc, #284]	; (800ed20 <RadioIrqProcess+0x2c0>)
 800ec04:	47a0      	blx	r4
                break;
 800ec06:	e01d      	b.n	800ec44 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 800ec08:	4b41      	ldr	r3, [pc, #260]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ec0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec0c:	463a      	mov	r2, r7
 800ec0e:	4611      	mov	r1, r2
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 ff7d 	bl	8010b10 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 800ec16:	4b40      	ldr	r3, [pc, #256]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	689c      	ldr	r4, [r3, #8]
 800ec1c:	79fb      	ldrb	r3, [r7, #7]
 800ec1e:	b299      	uxth	r1, r3
 800ec20:	4b3b      	ldr	r3, [pc, #236]	; (800ed10 <RadioIrqProcess+0x2b0>)
 800ec22:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 800ec26:	b218      	sxth	r0, r3
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ec2e:	4a3e      	ldr	r2, [pc, #248]	; (800ed28 <RadioIrqProcess+0x2c8>)
 800ec30:	fb82 5203 	smull	r5, r2, r2, r3
 800ec34:	1192      	asrs	r2, r2, #6
 800ec36:	17db      	asrs	r3, r3, #31
 800ec38:	1ad3      	subs	r3, r2, r3
 800ec3a:	b25b      	sxtb	r3, r3
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	4838      	ldr	r0, [pc, #224]	; (800ed20 <RadioIrqProcess+0x2c0>)
 800ec40:	47a0      	blx	r4
                break;
 800ec42:	bf00      	nop
        break;
 800ec44:	e10a      	b.n	800ee5c <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 800ec46:	2000      	movs	r0, #0
 800ec48:	f000 ff9c 	bl	800fb84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ec4c:	4b32      	ldr	r3, [pc, #200]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	f000 8105 	beq.w	800ee60 <RadioIrqProcess+0x400>
 800ec56:	4b30      	ldr	r3, [pc, #192]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	699b      	ldr	r3, [r3, #24]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	f000 80ff 	beq.w	800ee60 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 800ec62:	4b2d      	ldr	r3, [pc, #180]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	699b      	ldr	r3, [r3, #24]
 800ec68:	2000      	movs	r0, #0
 800ec6a:	4798      	blx	r3
        break;
 800ec6c:	e0f8      	b.n	800ee60 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 800ec6e:	2000      	movs	r0, #0
 800ec70:	f000 ff88 	bl	800fb84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800ec74:	4b28      	ldr	r3, [pc, #160]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f000 80f3 	beq.w	800ee64 <RadioIrqProcess+0x404>
 800ec7e:	4b26      	ldr	r3, [pc, #152]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	699b      	ldr	r3, [r3, #24]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 80ed 	beq.w	800ee64 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 800ec8a:	4b23      	ldr	r3, [pc, #140]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	2001      	movs	r0, #1
 800ec92:	4798      	blx	r3
        break;
 800ec94:	e0e6      	b.n	800ee64 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 800ec96:	4b25      	ldr	r3, [pc, #148]	; (800ed2c <RadioIrqProcess+0x2cc>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	2100      	movs	r1, #0
 800ec9c:	2002      	movs	r0, #2
 800ec9e:	f003 f981 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 800eca2:	f000 fe25 	bl	800f8f0 <SUBGRF_GetOperatingMode>
 800eca6:	4603      	mov	r3, r0
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d115      	bne.n	800ecd8 <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 800ecac:	4819      	ldr	r0, [pc, #100]	; (800ed14 <RadioIrqProcess+0x2b4>)
 800ecae:	f002 ff81 	bl	8011bb4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	f000 ff66 	bl	800fb84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800ecb8:	4b17      	ldr	r3, [pc, #92]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	f000 80d3 	beq.w	800ee68 <RadioIrqProcess+0x408>
 800ecc2:	4b15      	ldr	r3, [pc, #84]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	f000 80cd 	beq.w	800ee68 <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 800ecce:	4b12      	ldr	r3, [pc, #72]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4798      	blx	r3
        break;
 800ecd6:	e0c7      	b.n	800ee68 <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800ecd8:	f000 fe0a 	bl	800f8f0 <SUBGRF_GetOperatingMode>
 800ecdc:	4603      	mov	r3, r0
 800ecde:	2b05      	cmp	r3, #5
 800ece0:	f040 80c2 	bne.w	800ee68 <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 800ece4:	480d      	ldr	r0, [pc, #52]	; (800ed1c <RadioIrqProcess+0x2bc>)
 800ece6:	f002 ff65 	bl	8011bb4 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800ecea:	2000      	movs	r0, #0
 800ecec:	f000 ff4a 	bl	800fb84 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800ecf0:	4b09      	ldr	r3, [pc, #36]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	f000 80b7 	beq.w	800ee68 <RadioIrqProcess+0x408>
 800ecfa:	4b07      	ldr	r3, [pc, #28]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f000 80b1 	beq.w	800ee68 <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 800ed06:	4b04      	ldr	r3, [pc, #16]	; (800ed18 <RadioIrqProcess+0x2b8>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	4798      	blx	r3
        break;
 800ed0e:	e0ab      	b.n	800ee68 <RadioIrqProcess+0x408>
 800ed10:	2000672c 	.word	0x2000672c
 800ed14:	20006788 	.word	0x20006788
 800ed18:	20006728 	.word	0x20006728
 800ed1c:	200067a0 	.word	0x200067a0
 800ed20:	20006628 	.word	0x20006628
 800ed24:	20006750 	.word	0x20006750
 800ed28:	10624dd3 	.word	0x10624dd3
 800ed2c:	0801296c 	.word	0x0801296c
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 800ed30:	4b54      	ldr	r3, [pc, #336]	; (800ee84 <RadioIrqProcess+0x424>)
 800ed32:	2201      	movs	r2, #1
 800ed34:	2100      	movs	r1, #0
 800ed36:	2002      	movs	r0, #2
 800ed38:	f003 f934 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 800ed3c:	4b52      	ldr	r3, [pc, #328]	; (800ee88 <RadioIrqProcess+0x428>)
 800ed3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f000 8093 	beq.w	800ee6c <RadioIrqProcess+0x40c>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 800ed46:	4a51      	ldr	r2, [pc, #324]	; (800ee8c <RadioIrqProcess+0x42c>)
 800ed48:	4b4f      	ldr	r3, [pc, #316]	; (800ee88 <RadioIrqProcess+0x428>)
 800ed4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed4c:	0c1b      	lsrs	r3, r3, #16
 800ed4e:	b2db      	uxtb	r3, r3
 800ed50:	4619      	mov	r1, r3
 800ed52:	f640 1003 	movw	r0, #2307	; 0x903
 800ed56:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 800ed58:	4a4c      	ldr	r2, [pc, #304]	; (800ee8c <RadioIrqProcess+0x42c>)
 800ed5a:	4b4b      	ldr	r3, [pc, #300]	; (800ee88 <RadioIrqProcess+0x428>)
 800ed5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed5e:	0a1b      	lsrs	r3, r3, #8
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	4619      	mov	r1, r3
 800ed64:	f640 1004 	movw	r0, #2308	; 0x904
 800ed68:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 800ed6a:	4a48      	ldr	r2, [pc, #288]	; (800ee8c <RadioIrqProcess+0x42c>)
 800ed6c:	4b46      	ldr	r3, [pc, #280]	; (800ee88 <RadioIrqProcess+0x428>)
 800ed6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	4619      	mov	r1, r3
 800ed74:	f640 1005 	movw	r0, #2309	; 0x905
 800ed78:	4790      	blx	r2
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800ed7a:	4c44      	ldr	r4, [pc, #272]	; (800ee8c <RadioIrqProcess+0x42c>)
 800ed7c:	4b44      	ldr	r3, [pc, #272]	; (800ee90 <RadioIrqProcess+0x430>)
 800ed7e:	f640 1002 	movw	r0, #2306	; 0x902
 800ed82:	4798      	blx	r3
 800ed84:	4603      	mov	r3, r0
 800ed86:	f043 0301 	orr.w	r3, r3, #1
 800ed8a:	b2db      	uxtb	r3, r3
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f640 1002 	movw	r0, #2306	; 0x902
 800ed92:	47a0      	blx	r4
            SubgRf.RxDcPreambleDetectTimeout = 0;
 800ed94:	4b3c      	ldr	r3, [pc, #240]	; (800ee88 <RadioIrqProcess+0x428>)
 800ed96:	2200      	movs	r2, #0
 800ed98:	659a      	str	r2, [r3, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f240 2162 	movw	r1, #610	; 0x262
 800eda2:	f240 2062 	movw	r0, #610	; 0x262
 800eda6:	f001 f8c1 	bl	800ff2c <SUBGRF_SetDioIrqParams>
        break;
 800edaa:	e05f      	b.n	800ee6c <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 800edac:	4b39      	ldr	r3, [pc, #228]	; (800ee94 <RadioIrqProcess+0x434>)
 800edae:	2201      	movs	r2, #1
 800edb0:	2100      	movs	r1, #0
 800edb2:	2002      	movs	r0, #2
 800edb4:	f003 f8f6 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 800edb8:	f001 ff55 	bl	8010c66 <RFW_Is_Init>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b01      	cmp	r3, #1
 800edc0:	d156      	bne.n	800ee70 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 800edc2:	f001 ff86 	bl	8010cd2 <RFW_ReceivePayload>
        break;
 800edc6:	e053      	b.n	800ee70 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 800edc8:	4b33      	ldr	r3, [pc, #204]	; (800ee98 <RadioIrqProcess+0x438>)
 800edca:	2201      	movs	r2, #1
 800edcc:	2100      	movs	r1, #0
 800edce:	2002      	movs	r0, #2
 800edd0:	f003 f8e8 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800edd4:	e051      	b.n	800ee7a <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 800edd6:	4831      	ldr	r0, [pc, #196]	; (800ee9c <RadioIrqProcess+0x43c>)
 800edd8:	f002 feec 	bl	8011bb4 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800eddc:	4b2a      	ldr	r3, [pc, #168]	; (800ee88 <RadioIrqProcess+0x428>)
 800edde:	785b      	ldrb	r3, [r3, #1]
 800ede0:	f083 0301 	eor.w	r3, r3, #1
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d002      	beq.n	800edf0 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 800edea:	2000      	movs	r0, #0
 800edec:	f000 feca 	bl	800fb84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800edf0:	4b2b      	ldr	r3, [pc, #172]	; (800eea0 <RadioIrqProcess+0x440>)
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d03d      	beq.n	800ee74 <RadioIrqProcess+0x414>
 800edf8:	4b29      	ldr	r3, [pc, #164]	; (800eea0 <RadioIrqProcess+0x440>)
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d038      	beq.n	800ee74 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 800ee02:	4b27      	ldr	r3, [pc, #156]	; (800eea0 <RadioIrqProcess+0x440>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68db      	ldr	r3, [r3, #12]
 800ee08:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800ee0a:	4b26      	ldr	r3, [pc, #152]	; (800eea4 <RadioIrqProcess+0x444>)
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	2100      	movs	r1, #0
 800ee10:	2002      	movs	r0, #2
 800ee12:	f003 f8c7 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        break;
 800ee16:	e02d      	b.n	800ee74 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 800ee18:	4b23      	ldr	r3, [pc, #140]	; (800eea8 <RadioIrqProcess+0x448>)
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	2002      	movs	r0, #2
 800ee20:	f003 f8c0 	bl	8011fa4 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800ee24:	4b18      	ldr	r3, [pc, #96]	; (800ee88 <RadioIrqProcess+0x428>)
 800ee26:	785b      	ldrb	r3, [r3, #1]
 800ee28:	f083 0301 	eor.w	r3, r3, #1
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d002      	beq.n	800ee38 <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 800ee32:	2000      	movs	r0, #0
 800ee34:	f000 fea6 	bl	800fb84 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800ee38:	4b19      	ldr	r3, [pc, #100]	; (800eea0 <RadioIrqProcess+0x440>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d01b      	beq.n	800ee78 <RadioIrqProcess+0x418>
 800ee40:	4b17      	ldr	r3, [pc, #92]	; (800eea0 <RadioIrqProcess+0x440>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	691b      	ldr	r3, [r3, #16]
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d016      	beq.n	800ee78 <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 800ee4a:	4b15      	ldr	r3, [pc, #84]	; (800eea0 <RadioIrqProcess+0x440>)
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	691b      	ldr	r3, [r3, #16]
 800ee50:	4798      	blx	r3
        break;
 800ee52:	e011      	b.n	800ee78 <RadioIrqProcess+0x418>
        break;
 800ee54:	bf00      	nop
 800ee56:	e010      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee58:	bf00      	nop
 800ee5a:	e00e      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee5c:	bf00      	nop
 800ee5e:	e00c      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee60:	bf00      	nop
 800ee62:	e00a      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee64:	bf00      	nop
 800ee66:	e008      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee68:	bf00      	nop
 800ee6a:	e006      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee6c:	bf00      	nop
 800ee6e:	e004      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee70:	bf00      	nop
 800ee72:	e002      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee74:	bf00      	nop
 800ee76:	e000      	b.n	800ee7a <RadioIrqProcess+0x41a>
        break;
 800ee78:	bf00      	nop
    }
}
 800ee7a:	bf00      	nop
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bdb0      	pop	{r4, r5, r7, pc}
 800ee82:	bf00      	nop
 800ee84:	08012980 	.word	0x08012980
 800ee88:	2000672c 	.word	0x2000672c
 800ee8c:	0800e86f 	.word	0x0800e86f
 800ee90:	0800e893 	.word	0x0800e893
 800ee94:	0801298c 	.word	0x0801298c
 800ee98:	08012998 	.word	0x08012998
 800ee9c:	200067a0 	.word	0x200067a0
 800eea0:	20006728 	.word	0x20006728
 800eea4:	080129a4 	.word	0x080129a4
 800eea8:	080129b0 	.word	0x080129b0

0800eeac <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 800eeb0:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <RadioTxPrbs+0x2c>)
 800eeb2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800eeb6:	2101      	movs	r1, #1
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f001 fcdb 	bl	8010874 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800eebe:	4b07      	ldr	r3, [pc, #28]	; (800eedc <RadioTxPrbs+0x30>)
 800eec0:	212d      	movs	r1, #45	; 0x2d
 800eec2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800eec6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 800eec8:	f000 ff1f 	bl	800fd0a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800eecc:	4804      	ldr	r0, [pc, #16]	; (800eee0 <RadioTxPrbs+0x34>)
 800eece:	f000 fe75 	bl	800fbbc <SUBGRF_SetTx>
}
 800eed2:	bf00      	nop
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	2000672c 	.word	0x2000672c
 800eedc:	0800e86f 	.word	0x0800e86f
 800eee0:	000fffff 	.word	0x000fffff

0800eee4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 800eeee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f001 fce6 	bl	80108c4 <SUBGRF_SetRfTxPower>
 800eef8:	4603      	mov	r3, r0
 800eefa:	73fb      	strb	r3, [r7, #15]
    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800eefc:	210e      	movs	r1, #14
 800eefe:	f640 101f 	movw	r0, #2335	; 0x91f
 800ef02:	f001 fbc3 	bl	801068c <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800ef06:	7bfb      	ldrb	r3, [r7, #15]
 800ef08:	2101      	movs	r1, #1
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f001 fcb2 	bl	8010874 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800ef10:	f000 fef2 	bl	800fcf8 <SUBGRF_SetTxContinuousWave>
}
 800ef14:	bf00      	nop
 800ef16:	3710      	adds	r7, #16
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}

0800ef1c <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b089      	sub	sp, #36	; 0x24
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60f8      	str	r0, [r7, #12]
 800ef24:	60b9      	str	r1, [r7, #8]
 800ef26:	4613      	mov	r3, r2
 800ef28:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 800ef32:	2300      	movs	r3, #0
 800ef34:	61bb      	str	r3, [r7, #24]
 800ef36:	e011      	b.n	800ef5c <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	68ba      	ldr	r2, [r7, #8]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	781a      	ldrb	r2, [r3, #0]
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	68b9      	ldr	r1, [r7, #8]
 800ef44:	440b      	add	r3, r1
 800ef46:	43d2      	mvns	r2, r2
 800ef48:	b2d2      	uxtb	r2, r2
 800ef4a:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 800ef4c:	69bb      	ldr	r3, [r7, #24]
 800ef4e:	68fa      	ldr	r2, [r7, #12]
 800ef50:	4413      	add	r3, r2
 800ef52:	2200      	movs	r2, #0
 800ef54:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 800ef56:	69bb      	ldr	r3, [r7, #24]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	61bb      	str	r3, [r7, #24]
 800ef5c:	79fb      	ldrb	r3, [r7, #7]
 800ef5e:	69ba      	ldr	r2, [r7, #24]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	dbe9      	blt.n	800ef38 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 800ef64:	2300      	movs	r3, #0
 800ef66:	61bb      	str	r3, [r7, #24]
 800ef68:	e049      	b.n	800effe <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 800ef6a:	69bb      	ldr	r3, [r7, #24]
 800ef6c:	425a      	negs	r2, r3
 800ef6e:	f003 0307 	and.w	r3, r3, #7
 800ef72:	f002 0207 	and.w	r2, r2, #7
 800ef76:	bf58      	it	pl
 800ef78:	4253      	negpl	r3, r2
 800ef7a:	b2db      	uxtb	r3, r3
 800ef7c:	f1c3 0307 	rsb	r3, r3, #7
 800ef80:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	da00      	bge.n	800ef8a <payload_integration+0x6e>
 800ef88:	3307      	adds	r3, #7
 800ef8a:	10db      	asrs	r3, r3, #3
 800ef8c:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 800ef8e:	69bb      	ldr	r3, [r7, #24]
 800ef90:	3301      	adds	r3, #1
 800ef92:	425a      	negs	r2, r3
 800ef94:	f003 0307 	and.w	r3, r3, #7
 800ef98:	f002 0207 	and.w	r2, r2, #7
 800ef9c:	bf58      	it	pl
 800ef9e:	4253      	negpl	r3, r2
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	f1c3 0307 	rsb	r3, r3, #7
 800efa6:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	3301      	adds	r3, #1
 800efac:	2b00      	cmp	r3, #0
 800efae:	da00      	bge.n	800efb2 <payload_integration+0x96>
 800efb0:	3307      	adds	r3, #7
 800efb2:	10db      	asrs	r3, r3, #3
 800efb4:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 800efb6:	7dbb      	ldrb	r3, [r7, #22]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	4413      	add	r3, r2
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	461a      	mov	r2, r3
 800efc0:	7dfb      	ldrb	r3, [r7, #23]
 800efc2:	fa42 f303 	asr.w	r3, r2, r3
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	f003 0301 	and.w	r3, r3, #1
 800efcc:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 800efce:	7ffa      	ldrb	r2, [r7, #31]
 800efd0:	7cfb      	ldrb	r3, [r7, #19]
 800efd2:	4053      	eors	r3, r2
 800efd4:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 800efd6:	7d3b      	ldrb	r3, [r7, #20]
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	4413      	add	r3, r2
 800efdc:	781b      	ldrb	r3, [r3, #0]
 800efde:	b25a      	sxtb	r2, r3
 800efe0:	7ff9      	ldrb	r1, [r7, #31]
 800efe2:	7d7b      	ldrb	r3, [r7, #21]
 800efe4:	fa01 f303 	lsl.w	r3, r1, r3
 800efe8:	b25b      	sxtb	r3, r3
 800efea:	4313      	orrs	r3, r2
 800efec:	b259      	sxtb	r1, r3
 800efee:	7d3b      	ldrb	r3, [r7, #20]
 800eff0:	68fa      	ldr	r2, [r7, #12]
 800eff2:	4413      	add	r3, r2
 800eff4:	b2ca      	uxtb	r2, r1
 800eff6:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 800eff8:	69bb      	ldr	r3, [r7, #24]
 800effa:	3301      	adds	r3, #1
 800effc:	61bb      	str	r3, [r7, #24]
 800effe:	79fb      	ldrb	r3, [r7, #7]
 800f000:	00db      	lsls	r3, r3, #3
 800f002:	69ba      	ldr	r2, [r7, #24]
 800f004:	429a      	cmp	r2, r3
 800f006:	dbb0      	blt.n	800ef6a <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800f008:	7ffb      	ldrb	r3, [r7, #31]
 800f00a:	01db      	lsls	r3, r3, #7
 800f00c:	b25a      	sxtb	r2, r3
 800f00e:	7ffb      	ldrb	r3, [r7, #31]
 800f010:	019b      	lsls	r3, r3, #6
 800f012:	b25b      	sxtb	r3, r3
 800f014:	4313      	orrs	r3, r2
 800f016:	b25b      	sxtb	r3, r3
 800f018:	7ffa      	ldrb	r2, [r7, #31]
 800f01a:	2a00      	cmp	r2, #0
 800f01c:	d101      	bne.n	800f022 <payload_integration+0x106>
 800f01e:	2220      	movs	r2, #32
 800f020:	e000      	b.n	800f024 <payload_integration+0x108>
 800f022:	2200      	movs	r2, #0
 800f024:	4313      	orrs	r3, r2
 800f026:	b259      	sxtb	r1, r3
 800f028:	79fb      	ldrb	r3, [r7, #7]
 800f02a:	68fa      	ldr	r2, [r7, #12]
 800f02c:	4413      	add	r3, r2
 800f02e:	b2ca      	uxtb	r2, r1
 800f030:	701a      	strb	r2, [r3, #0]
}
 800f032:	bf00      	nop
 800f034:	3724      	adds	r7, #36	; 0x24
 800f036:	46bd      	mov	sp, r7
 800f038:	bc80      	pop	{r7}
 800f03a:	4770      	bx	lr

0800f03c <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t *config, uint32_t rxContinuous,
                                        uint32_t symbTimeout )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08c      	sub	sp, #48	; 0x30
 800f040:	af00      	add	r7, sp, #0
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 800f04c:	2300      	movs	r3, #0
 800f04e:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t syncword[8] = {0};
 800f050:	2300      	movs	r3, #0
 800f052:	623b      	str	r3, [r7, #32]
 800f054:	2300      	movs	r3, #0
 800f056:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800f058:	f001 fdff 	bl	8010c5a <RFW_DeInit>

    if( rxContinuous != 0 )
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d001      	beq.n	800f066 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800f062:	2300      	movs	r3, #0
 800f064:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	bf14      	ite	ne
 800f06c:	2301      	movne	r3, #1
 800f06e:	2300      	moveq	r3, #0
 800f070:	b2da      	uxtb	r2, r3
 800f072:	4ba3      	ldr	r3, [pc, #652]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f074:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800f076:	7bfb      	ldrb	r3, [r7, #15]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d003      	beq.n	800f084 <RadioSetRxGenericConfig+0x48>
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	f000 80dc 	beq.w	800f23a <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800f082:	e194      	b.n	800f3ae <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d003      	beq.n	800f094 <RadioSetRxGenericConfig+0x58>
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	68db      	ldr	r3, [r3, #12]
 800f090:	2b00      	cmp	r3, #0
 800f092:	d102      	bne.n	800f09a <RadioSetRxGenericConfig+0x5e>
            return -1;
 800f094:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f098:	e18a      	b.n	800f3b0 <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	7f9b      	ldrb	r3, [r3, #30]
 800f09e:	2b08      	cmp	r3, #8
 800f0a0:	d902      	bls.n	800f0a8 <RadioSetRxGenericConfig+0x6c>
            return -1;
 800f0a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f0a6:	e183      	b.n	800f3b0 <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	6919      	ldr	r1, [r3, #16]
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	7f9b      	ldrb	r3, [r3, #30]
 800f0b0:	b29a      	uxth	r2, r3
 800f0b2:	f107 0320 	add.w	r3, r7, #32
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f002 f874 	bl	80111a4 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	bf14      	ite	ne
 800f0c4:	2301      	movne	r3, #1
 800f0c6:	2300      	moveq	r3, #0
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	f000 fe26 	bl	800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f0d0:	4b8b      	ldr	r3, [pc, #556]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800f0d8:	68bb      	ldr	r3, [r7, #8]
 800f0da:	689b      	ldr	r3, [r3, #8]
 800f0dc:	4a88      	ldr	r2, [pc, #544]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f0de:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f0e6:	4b86      	ldr	r3, [pc, #536]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f0e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f001 fce5 	bl	8010ac0 <SUBGRF_GetFskBandwidthRegValue>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	4b81      	ldr	r3, [pc, #516]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f0fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f100:	4b7f      	ldr	r3, [pc, #508]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f102:	2200      	movs	r2, #0
 800f104:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	b29b      	uxth	r3, r3
 800f10c:	00db      	lsls	r3, r3, #3
 800f10e:	b29a      	uxth	r2, r3
 800f110:	4b7b      	ldr	r3, [pc, #492]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f112:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	7fda      	ldrb	r2, [r3, #31]
 800f118:	4b79      	ldr	r3, [pc, #484]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f11a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	7f9b      	ldrb	r3, [r3, #30]
 800f120:	00db      	lsls	r3, r3, #3
 800f122:	b2da      	uxtb	r2, r3
 800f124:	4b76      	ldr	r3, [pc, #472]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f126:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f12e:	4b74      	ldr	r3, [pc, #464]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f130:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d105      	bne.n	800f148 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	695b      	ldr	r3, [r3, #20]
 800f140:	b2da      	uxtb	r2, r3
 800f142:	4b6f      	ldr	r3, [pc, #444]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f144:	759a      	strb	r2, [r3, #22]
 800f146:	e00b      	b.n	800f160 <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f14e:	2b02      	cmp	r3, #2
 800f150:	d103      	bne.n	800f15a <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f152:	4b6b      	ldr	r3, [pc, #428]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f154:	22ff      	movs	r2, #255	; 0xff
 800f156:	759a      	strb	r2, [r3, #22]
 800f158:	e002      	b.n	800f160 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800f15a:	4b69      	ldr	r3, [pc, #420]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f15c:	22ff      	movs	r2, #255	; 0xff
 800f15e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f166:	2b02      	cmp	r3, #2
 800f168:	d004      	beq.n	800f174 <RadioSetRxGenericConfig+0x138>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800f16a:	68bb      	ldr	r3, [r7, #8]
 800f16c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800f170:	2b02      	cmp	r3, #2
 800f172:	d12d      	bne.n	800f1d0 <RadioSetRxGenericConfig+0x194>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f17a:	2bf1      	cmp	r3, #241	; 0xf1
 800f17c:	d00c      	beq.n	800f198 <RadioSetRxGenericConfig+0x15c>
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f184:	2bf2      	cmp	r3, #242	; 0xf2
 800f186:	d007      	beq.n	800f198 <RadioSetRxGenericConfig+0x15c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f188:	68bb      	ldr	r3, [r7, #8]
 800f18a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d002      	beq.n	800f198 <RadioSetRxGenericConfig+0x15c>
                return -1;
 800f192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f196:	e10b      	b.n	800f3b0 <RadioSetRxGenericConfig+0x374>
            ConfigGeneric.rtx = CONFIG_RX;
 800f198:	2300      	movs	r3, #0
 800f19a:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.RxConfig = config;
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	61bb      	str	r3, [r7, #24]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 800f1a0:	4b58      	ldr	r3, [pc, #352]	; (800f304 <RadioSetRxGenericConfig+0x2c8>)
 800f1a2:	6819      	ldr	r1, [r3, #0]
 800f1a4:	f107 0314 	add.w	r3, r7, #20
 800f1a8:	4a57      	ldr	r2, [pc, #348]	; (800f308 <RadioSetRxGenericConfig+0x2cc>)
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f001 fd48 	bl	8010c40 <RFW_Init>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d002      	beq.n	800f1bc <RadioSetRxGenericConfig+0x180>
                return -1;
 800f1b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1ba:	e0f9      	b.n	800f3b0 <RadioSetRxGenericConfig+0x374>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f1bc:	4b50      	ldr	r3, [pc, #320]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f1c2:	4b4f      	ldr	r3, [pc, #316]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1c4:	2201      	movs	r2, #1
 800f1c6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f1c8:	4b4d      	ldr	r3, [pc, #308]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	755a      	strb	r2, [r3, #21]
        {
 800f1ce:	e00e      	b.n	800f1ee <RadioSetRxGenericConfig+0x1b2>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800f1d0:	68bb      	ldr	r3, [r7, #8]
 800f1d2:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f1d6:	4b4a      	ldr	r3, [pc, #296]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1d8:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800f1da:	68bb      	ldr	r3, [r7, #8]
 800f1dc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f1e0:	4b47      	ldr	r3, [pc, #284]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1e2:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 800f1e4:	68bb      	ldr	r3, [r7, #8]
 800f1e6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f1ea:	4b45      	ldr	r3, [pc, #276]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f1ec:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800f1ee:	f7ff fa3c 	bl	800e66a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	f7fe fbd0 	bl	800d998 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f1f8:	4844      	ldr	r0, [pc, #272]	; (800f30c <RadioSetRxGenericConfig+0x2d0>)
 800f1fa:	f001 f82d 	bl	8010258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f1fe:	4844      	ldr	r0, [pc, #272]	; (800f310 <RadioSetRxGenericConfig+0x2d4>)
 800f200:	f001 f8fc 	bl	80103fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f204:	f107 0320 	add.w	r3, r7, #32
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fbc0 	bl	800f98e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f20e:	68bb      	ldr	r3, [r7, #8]
 800f210:	8b9b      	ldrh	r3, [r3, #28]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 fc0a 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f218:	68bb      	ldr	r3, [r7, #8]
 800f21a:	8b1b      	ldrh	r3, [r3, #24]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 fbe5 	bl	800f9ec <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800f228:	fb03 f202 	mul.w	r2, r3, r2
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	fbb2 f3f3 	udiv	r3, r2, r3
 800f234:	4a32      	ldr	r2, [pc, #200]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f236:	6093      	str	r3, [r2, #8]
        break;
 800f238:	e0b9      	b.n	800f3ae <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d102      	bne.n	800f248 <RadioSetRxGenericConfig+0x20c>
            return -1;
 800f242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f246:	e0b3      	b.n	800f3b0 <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 800f248:	68bb      	ldr	r3, [r7, #8]
 800f24a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800f24e:	2b01      	cmp	r3, #1
 800f250:	d104      	bne.n	800f25c <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 800f252:	68bb      	ldr	r3, [r7, #8]
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f25a:	e002      	b.n	800f262 <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 800f25c:	23ff      	movs	r3, #255	; 0xff
 800f25e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f266:	2b00      	cmp	r3, #0
 800f268:	bf14      	ite	ne
 800f26a:	2301      	movne	r3, #1
 800f26c:	2300      	moveq	r3, #0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	4618      	mov	r0, r3
 800f272:	f000 fd53 	bl	800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 800f276:	683b      	ldr	r3, [r7, #0]
 800f278:	b2db      	uxtb	r3, r3
 800f27a:	4618      	mov	r0, r3
 800f27c:	f000 fd5d 	bl	800fd3a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f280:	4b1f      	ldr	r3, [pc, #124]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f282:	2201      	movs	r2, #1
 800f284:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800f28e:	4b1c      	ldr	r3, [pc, #112]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f290:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800f29a:	4b19      	ldr	r3, [pc, #100]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f29c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 800f2a6:	4b16      	ldr	r3, [pc, #88]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f2a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f2b2:	2b02      	cmp	r3, #2
 800f2b4:	d010      	beq.n	800f2d8 <RadioSetRxGenericConfig+0x29c>
 800f2b6:	2b02      	cmp	r3, #2
 800f2b8:	dc2c      	bgt.n	800f314 <RadioSetRxGenericConfig+0x2d8>
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d002      	beq.n	800f2c4 <RadioSetRxGenericConfig+0x288>
 800f2be:	2b01      	cmp	r3, #1
 800f2c0:	d005      	beq.n	800f2ce <RadioSetRxGenericConfig+0x292>
            break;
 800f2c2:	e027      	b.n	800f314 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f2c4:	4b0e      	ldr	r3, [pc, #56]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f2cc:	e023      	b.n	800f316 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f2ce:	4b0c      	ldr	r3, [pc, #48]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f2d0:	2201      	movs	r2, #1
 800f2d2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f2d6:	e01e      	b.n	800f316 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f2de:	2b0b      	cmp	r3, #11
 800f2e0:	d004      	beq.n	800f2ec <RadioSetRxGenericConfig+0x2b0>
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800f2e8:	2b0c      	cmp	r3, #12
 800f2ea:	d104      	bne.n	800f2f6 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f2ec:	4b04      	ldr	r3, [pc, #16]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f2ee:	2201      	movs	r2, #1
 800f2f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f2f4:	e00f      	b.n	800f316 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f2f6:	4b02      	ldr	r3, [pc, #8]	; (800f300 <RadioSetRxGenericConfig+0x2c4>)
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f2fe:	e00a      	b.n	800f316 <RadioSetRxGenericConfig+0x2da>
 800f300:	2000672c 	.word	0x2000672c
 800f304:	20006728 	.word	0x20006728
 800f308:	200067a0 	.word	0x200067a0
 800f30c:	20006764 	.word	0x20006764
 800f310:	2000673a 	.word	0x2000673a
            break;
 800f314:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f316:	4b28      	ldr	r3, [pc, #160]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f318:	2201      	movs	r2, #1
 800f31a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f320:	4b25      	ldr	r3, [pc, #148]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f322:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 800f32a:	4b23      	ldr	r3, [pc, #140]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f32c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800f32e:	4a22      	ldr	r2, [pc, #136]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f334:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800f33c:	4b1e      	ldr	r3, [pc, #120]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f33e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800f348:	4b1b      	ldr	r3, [pc, #108]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f34a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800f34e:	f7ff f98c 	bl	800e66a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f352:	2001      	movs	r0, #1
 800f354:	f7fe fb20 	bl	800d998 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f358:	4818      	ldr	r0, [pc, #96]	; (800f3bc <RadioSetRxGenericConfig+0x380>)
 800f35a:	f000 ff7d 	bl	8010258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f35e:	4818      	ldr	r0, [pc, #96]	; (800f3c0 <RadioSetRxGenericConfig+0x384>)
 800f360:	f001 f84c 	bl	80103fc <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800f364:	4b14      	ldr	r3, [pc, #80]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f36a:	2b01      	cmp	r3, #1
 800f36c:	d10d      	bne.n	800f38a <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 800f36e:	f240 7036 	movw	r0, #1846	; 0x736
 800f372:	f001 f99f 	bl	80106b4 <SUBGRF_ReadRegister>
 800f376:	4603      	mov	r3, r0
 800f378:	f023 0304 	bic.w	r3, r3, #4
 800f37c:	b2db      	uxtb	r3, r3
 800f37e:	4619      	mov	r1, r3
 800f380:	f240 7036 	movw	r0, #1846	; 0x736
 800f384:	f001 f982 	bl	801068c <SUBGRF_WriteRegister>
 800f388:	e00c      	b.n	800f3a4 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 800f38a:	f240 7036 	movw	r0, #1846	; 0x736
 800f38e:	f001 f991 	bl	80106b4 <SUBGRF_ReadRegister>
 800f392:	4603      	mov	r3, r0
 800f394:	f043 0304 	orr.w	r3, r3, #4
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	4619      	mov	r1, r3
 800f39c:	f240 7036 	movw	r0, #1846	; 0x736
 800f3a0:	f001 f974 	bl	801068c <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 800f3a4:	4b04      	ldr	r3, [pc, #16]	; (800f3b8 <RadioSetRxGenericConfig+0x37c>)
 800f3a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f3aa:	609a      	str	r2, [r3, #8]
        break;
 800f3ac:	bf00      	nop
    }
    return status;
 800f3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3730      	adds	r7, #48	; 0x30
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	2000672c 	.word	0x2000672c
 800f3bc:	20006764 	.word	0x20006764
 800f3c0:	2000673a 	.word	0x2000673a

0800f3c4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t *config, int8_t power,
                                        uint32_t timeout )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b08e      	sub	sp, #56	; 0x38
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60b9      	str	r1, [r7, #8]
 800f3cc:	607b      	str	r3, [r7, #4]
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73fb      	strb	r3, [r7, #15]
 800f3d2:	4613      	mov	r3, r2
 800f3d4:	73bb      	strb	r3, [r7, #14]
#if( RADIO_LR_FHSS_IS_ON == 1 )
    /*disable LrFhss*/
    SubgRf.lr_fhss.is_lr_fhss_on = false;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f3da:	2300      	movs	r3, #0
 800f3dc:	633b      	str	r3, [r7, #48]	; 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800f3de:	f001 fc3c 	bl	8010c5a <RFW_DeInit>
    switch( modem )
 800f3e2:	7bfb      	ldrb	r3, [r7, #15]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	f200 8204 	bhi.w	800f7f2 <RadioSetTxGenericConfig+0x42e>
 800f3ea:	a201      	add	r2, pc, #4	; (adr r2, 800f3f0 <RadioSetTxGenericConfig+0x2c>)
 800f3ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3f0:	0800f575 	.word	0x0800f575
 800f3f4:	0800f6bd 	.word	0x0800f6bd
 800f3f8:	0800f7b5 	.word	0x0800f7b5
 800f3fc:	0800f401 	.word	0x0800f401
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	7c9b      	ldrb	r3, [r3, #18]
 800f404:	2b08      	cmp	r3, #8
 800f406:	d902      	bls.n	800f40e <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 800f408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f40c:	e206      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800f40e:	68bb      	ldr	r3, [r7, #8]
 800f410:	6899      	ldr	r1, [r3, #8]
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	7c9b      	ldrb	r3, [r3, #18]
 800f416:	b29a      	uxth	r2, r3
 800f418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f41c:	4618      	mov	r0, r3
 800f41e:	f001 fec1 	bl	80111a4 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 800f422:	68bb      	ldr	r3, [r7, #8]
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d102      	bne.n	800f430 <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 800f42a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f42e:	e1f5      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
        }
        else if( config->msk.BitRate <= 10000 )
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	f242 7210 	movw	r2, #10000	; 0x2710
 800f438:	4293      	cmp	r3, r2
 800f43a:	d813      	bhi.n	800f464 <RadioSetTxGenericConfig+0xa0>
        {
            /*max msk modulator datarate is 10kbps*/
            radio_modem = MODEM_MSK;
 800f43c:	2302      	movs	r3, #2
 800f43e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 800f442:	4b99      	ldr	r3, [pc, #612]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f444:	2203      	movs	r2, #3
 800f446:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 800f448:	4b97      	ldr	r3, [pc, #604]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f44a:	2203      	movs	r2, #3
 800f44c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800f450:	68bb      	ldr	r3, [r7, #8]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	4a94      	ldr	r2, [pc, #592]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f456:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800f458:	68bb      	ldr	r3, [r7, #8]
 800f45a:	7cda      	ldrb	r2, [r3, #19]
 800f45c:	4b92      	ldr	r3, [pc, #584]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f45e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f462:	e017      	b.n	800f494 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
            radio_modem = MODEM_FSK;
 800f464:	2300      	movs	r3, #0
 800f466:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f46a:	4b8f      	ldr	r3, [pc, #572]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f46c:	2200      	movs	r2, #0
 800f46e:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f470:	4b8d      	ldr	r3, [pc, #564]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f472:	2200      	movs	r2, #0
 800f474:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800f478:	68bb      	ldr	r3, [r7, #8]
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	4a8a      	ldr	r2, [pc, #552]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f47e:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	7cda      	ldrb	r2, [r3, #19]
 800f484:	4b88      	ldr	r3, [pc, #544]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            /*do msk with gfsk modulator*/
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	089b      	lsrs	r3, r3, #2
 800f490:	4a85      	ldr	r2, [pc, #532]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f492:	6413      	str	r3, [r2, #64]	; 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	b29b      	uxth	r3, r3
 800f49a:	00db      	lsls	r3, r3, #3
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	4b82      	ldr	r3, [pc, #520]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f4a0:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800f4a2:	4b81      	ldr	r3, [pc, #516]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f4a4:	2204      	movs	r2, #4
 800f4a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	7c9b      	ldrb	r3, [r3, #18]
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	b2da      	uxtb	r2, r3
 800f4b0:	4b7d      	ldr	r3, [pc, #500]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f4b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800f4b4:	4b7c      	ldr	r3, [pc, #496]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	7d9b      	ldrb	r3, [r3, #22]
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	d003      	beq.n	800f4ca <RadioSetTxGenericConfig+0x106>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	7d1b      	ldrb	r3, [r3, #20]
 800f4c6:	2b02      	cmp	r3, #2
 800f4c8:	d12b      	bne.n	800f522 <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	7d5b      	ldrb	r3, [r3, #21]
 800f4ce:	2bf1      	cmp	r3, #241	; 0xf1
 800f4d0:	d00a      	beq.n	800f4e8 <RadioSetTxGenericConfig+0x124>
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	7d5b      	ldrb	r3, [r3, #21]
 800f4d6:	2bf2      	cmp	r3, #242	; 0xf2
 800f4d8:	d006      	beq.n	800f4e8 <RadioSetTxGenericConfig+0x124>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	7d5b      	ldrb	r3, [r3, #21]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d002      	beq.n	800f4e8 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 800f4e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4e6:	e199      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig = config;
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 800f4ec:	2301      	movs	r3, #1
 800f4ee:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800f4f2:	4b6e      	ldr	r3, [pc, #440]	; (800f6ac <RadioSetTxGenericConfig+0x2e8>)
 800f4f4:	6819      	ldr	r1, [r3, #0]
 800f4f6:	f107 0320 	add.w	r3, r7, #32
 800f4fa:	4a6d      	ldr	r2, [pc, #436]	; (800f6b0 <RadioSetTxGenericConfig+0x2ec>)
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f001 fb9f 	bl	8010c40 <RFW_Init>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d002      	beq.n	800f50e <RadioSetTxGenericConfig+0x14a>
            {
                return -1;
 800f508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f50c:	e186      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f50e:	4b66      	ldr	r3, [pc, #408]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f510:	2200      	movs	r2, #0
 800f512:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f514:	4b64      	ldr	r3, [pc, #400]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f516:	2201      	movs	r2, #1
 800f518:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f51a:	4b63      	ldr	r3, [pc, #396]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f51c:	2200      	movs	r2, #0
 800f51e:	755a      	strb	r2, [r3, #21]
        {
 800f520:	e00b      	b.n	800f53a <RadioSetTxGenericConfig+0x176>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800f522:	68bb      	ldr	r3, [r7, #8]
 800f524:	7d5a      	ldrb	r2, [r3, #21]
 800f526:	4b60      	ldr	r3, [pc, #384]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f528:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	7d9a      	ldrb	r2, [r3, #22]
 800f52e:	4b5e      	ldr	r3, [pc, #376]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f530:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 800f532:	68bb      	ldr	r3, [r7, #8]
 800f534:	7d1a      	ldrb	r2, [r3, #20]
 800f536:	4b5c      	ldr	r3, [pc, #368]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f538:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800f53a:	f7ff f896 	bl	800e66a <RadioStandby>
        RadioSetModem( radio_modem );
 800f53e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe fa28 	bl	800d998 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f548:	485a      	ldr	r0, [pc, #360]	; (800f6b4 <RadioSetTxGenericConfig+0x2f0>)
 800f54a:	f000 fe85 	bl	8010258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f54e:	485a      	ldr	r0, [pc, #360]	; (800f6b8 <RadioSetTxGenericConfig+0x2f4>)
 800f550:	f000 ff54 	bl	80103fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f558:	4618      	mov	r0, r3
 800f55a:	f000 fa18 	bl	800f98e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	8a1b      	ldrh	r3, [r3, #16]
 800f562:	4618      	mov	r0, r3
 800f564:	f000 fa62 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	899b      	ldrh	r3, [r3, #12]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f000 fa3d 	bl	800f9ec <SUBGRF_SetCrcPolynomial>
        break;
 800f572:	e13f      	b.n	800f7f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 800f574:	68bb      	ldr	r3, [r7, #8]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d102      	bne.n	800f582 <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 800f57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f580:	e14c      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 800f582:	68bb      	ldr	r3, [r7, #8]
 800f584:	7c9b      	ldrb	r3, [r3, #18]
 800f586:	2b08      	cmp	r3, #8
 800f588:	d902      	bls.n	800f590 <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 800f58a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f58e:	e145      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	6899      	ldr	r1, [r3, #8]
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	7c9b      	ldrb	r3, [r3, #18]
 800f598:	b29a      	uxth	r2, r3
 800f59a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f001 fe00 	bl	80111a4 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800f5a4:	4b40      	ldr	r3, [pc, #256]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800f5ac:	68bb      	ldr	r3, [r7, #8]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a3d      	ldr	r2, [pc, #244]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5b2:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800f5b4:	68bb      	ldr	r3, [r7, #8]
 800f5b6:	7cda      	ldrb	r2, [r3, #19]
 800f5b8:	4b3b      	ldr	r3, [pc, #236]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	699b      	ldr	r3, [r3, #24]
 800f5c2:	4a39      	ldr	r2, [pc, #228]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5c4:	6413      	str	r3, [r2, #64]	; 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800f5c6:	4b38      	ldr	r3, [pc, #224]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	685b      	ldr	r3, [r3, #4]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	00db      	lsls	r3, r3, #3
 800f5d4:	b29a      	uxth	r2, r3
 800f5d6:	4b34      	ldr	r3, [pc, #208]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5d8:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 800f5da:	4b33      	ldr	r3, [pc, #204]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5dc:	2204      	movs	r2, #4
 800f5de:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800f5e0:	68bb      	ldr	r3, [r7, #8]
 800f5e2:	7c9b      	ldrb	r3, [r3, #18]
 800f5e4:	00db      	lsls	r3, r3, #3
 800f5e6:	b2da      	uxtb	r2, r3
 800f5e8:	4b2f      	ldr	r3, [pc, #188]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5ea:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800f5ec:	4b2e      	ldr	r3, [pc, #184]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	7d9b      	ldrb	r3, [r3, #22]
 800f5f6:	2b02      	cmp	r3, #2
 800f5f8:	d003      	beq.n	800f602 <RadioSetTxGenericConfig+0x23e>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 800f5fa:	68bb      	ldr	r3, [r7, #8]
 800f5fc:	7d1b      	ldrb	r3, [r3, #20]
 800f5fe:	2b02      	cmp	r3, #2
 800f600:	d12a      	bne.n	800f658 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	7d5b      	ldrb	r3, [r3, #21]
 800f606:	2bf1      	cmp	r3, #241	; 0xf1
 800f608:	d00a      	beq.n	800f620 <RadioSetTxGenericConfig+0x25c>
 800f60a:	68bb      	ldr	r3, [r7, #8]
 800f60c:	7d5b      	ldrb	r3, [r3, #21]
 800f60e:	2bf2      	cmp	r3, #242	; 0xf2
 800f610:	d006      	beq.n	800f620 <RadioSetTxGenericConfig+0x25c>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	7d5b      	ldrb	r3, [r3, #21]
 800f616:	2b01      	cmp	r3, #1
 800f618:	d002      	beq.n	800f620 <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 800f61a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f61e:	e0fd      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 800f620:	2301      	movs	r3, #1
 800f622:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 800f628:	4b20      	ldr	r3, [pc, #128]	; (800f6ac <RadioSetTxGenericConfig+0x2e8>)
 800f62a:	6819      	ldr	r1, [r3, #0]
 800f62c:	f107 0314 	add.w	r3, r7, #20
 800f630:	4a1f      	ldr	r2, [pc, #124]	; (800f6b0 <RadioSetTxGenericConfig+0x2ec>)
 800f632:	4618      	mov	r0, r3
 800f634:	f001 fb04 	bl	8010c40 <RFW_Init>
 800f638:	4603      	mov	r3, r0
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d002      	beq.n	800f644 <RadioSetTxGenericConfig+0x280>
            {
                return -1;
 800f63e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f642:	e0eb      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 800f644:	4b18      	ldr	r3, [pc, #96]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f646:	2200      	movs	r2, #0
 800f648:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 800f64a:	4b17      	ldr	r3, [pc, #92]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f64c:	2201      	movs	r2, #1
 800f64e:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800f650:	4b15      	ldr	r3, [pc, #84]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f652:	2200      	movs	r2, #0
 800f654:	755a      	strb	r2, [r3, #21]
        {
 800f656:	e00b      	b.n	800f670 <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	7d5a      	ldrb	r2, [r3, #21]
 800f65c:	4b12      	ldr	r3, [pc, #72]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f65e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	7d9a      	ldrb	r2, [r3, #22]
 800f664:	4b10      	ldr	r3, [pc, #64]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f666:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 800f668:	68bb      	ldr	r3, [r7, #8]
 800f66a:	7d1a      	ldrb	r2, [r3, #20]
 800f66c:	4b0e      	ldr	r3, [pc, #56]	; (800f6a8 <RadioSetTxGenericConfig+0x2e4>)
 800f66e:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 800f670:	f7fe fffb 	bl	800e66a <RadioStandby>
        RadioSetModem( MODEM_FSK );
 800f674:	2000      	movs	r0, #0
 800f676:	f7fe f98f 	bl	800d998 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f67a:	480e      	ldr	r0, [pc, #56]	; (800f6b4 <RadioSetTxGenericConfig+0x2f0>)
 800f67c:	f000 fdec 	bl	8010258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f680:	480d      	ldr	r0, [pc, #52]	; (800f6b8 <RadioSetTxGenericConfig+0x2f4>)
 800f682:	f000 febb 	bl	80103fc <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 800f686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f68a:	4618      	mov	r0, r3
 800f68c:	f000 f97f 	bl	800f98e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	8a1b      	ldrh	r3, [r3, #16]
 800f694:	4618      	mov	r0, r3
 800f696:	f000 f9c9 	bl	800fa2c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	899b      	ldrh	r3, [r3, #12]
 800f69e:	4618      	mov	r0, r3
 800f6a0:	f000 f9a4 	bl	800f9ec <SUBGRF_SetCrcPolynomial>
        break;
 800f6a4:	e0a6      	b.n	800f7f4 <RadioSetTxGenericConfig+0x430>
 800f6a6:	bf00      	nop
 800f6a8:	2000672c 	.word	0x2000672c
 800f6ac:	20006728 	.word	0x20006728
 800f6b0:	20006788 	.word	0x20006788
 800f6b4:	20006764 	.word	0x20006764
 800f6b8:	2000673a 	.word	0x2000673a
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800f6bc:	4b59      	ldr	r3, [pc, #356]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f6be:	2201      	movs	r2, #1
 800f6c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 800f6c4:	68bb      	ldr	r3, [r7, #8]
 800f6c6:	781a      	ldrb	r2, [r3, #0]
 800f6c8:	4b56      	ldr	r3, [pc, #344]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f6ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 800f6ce:	68bb      	ldr	r3, [r7, #8]
 800f6d0:	785a      	ldrb	r2, [r3, #1]
 800f6d2:	4b54      	ldr	r3, [pc, #336]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f6d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	789a      	ldrb	r2, [r3, #2]
 800f6dc:	4b51      	ldr	r3, [pc, #324]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f6de:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 800f6e2:	68bb      	ldr	r3, [r7, #8]
 800f6e4:	78db      	ldrb	r3, [r3, #3]
 800f6e6:	2b02      	cmp	r3, #2
 800f6e8:	d010      	beq.n	800f70c <RadioSetTxGenericConfig+0x348>
 800f6ea:	2b02      	cmp	r3, #2
 800f6ec:	dc20      	bgt.n	800f730 <RadioSetTxGenericConfig+0x36c>
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d002      	beq.n	800f6f8 <RadioSetTxGenericConfig+0x334>
 800f6f2:	2b01      	cmp	r3, #1
 800f6f4:	d005      	beq.n	800f702 <RadioSetTxGenericConfig+0x33e>
            {
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
        default:
            break;
 800f6f6:	e01b      	b.n	800f730 <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f6f8:	4b4a      	ldr	r3, [pc, #296]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f700:	e017      	b.n	800f732 <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f702:	4b48      	ldr	r3, [pc, #288]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f704:	2201      	movs	r2, #1
 800f706:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f70a:	e012      	b.n	800f732 <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	2b0b      	cmp	r3, #11
 800f712:	d003      	beq.n	800f71c <RadioSetTxGenericConfig+0x358>
 800f714:	68bb      	ldr	r3, [r7, #8]
 800f716:	781b      	ldrb	r3, [r3, #0]
 800f718:	2b0c      	cmp	r3, #12
 800f71a:	d104      	bne.n	800f726 <RadioSetTxGenericConfig+0x362>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800f71c:	4b41      	ldr	r3, [pc, #260]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f71e:	2201      	movs	r2, #1
 800f720:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f724:	e005      	b.n	800f732 <RadioSetTxGenericConfig+0x36e>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 800f726:	4b3f      	ldr	r3, [pc, #252]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f728:	2200      	movs	r2, #0
 800f72a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800f72e:	e000      	b.n	800f732 <RadioSetTxGenericConfig+0x36e>
            break;
 800f730:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800f732:	4b3c      	ldr	r3, [pc, #240]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f734:	2201      	movs	r2, #1
 800f736:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	889a      	ldrh	r2, [r3, #4]
 800f73c:	4b39      	ldr	r3, [pc, #228]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f73e:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	799a      	ldrb	r2, [r3, #6]
 800f744:	4b37      	ldr	r3, [pc, #220]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f746:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	79da      	ldrb	r2, [r3, #7]
 800f74c:	4b35      	ldr	r3, [pc, #212]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f74e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 800f752:	68bb      	ldr	r3, [r7, #8]
 800f754:	7a1a      	ldrb	r2, [r3, #8]
 800f756:	4b33      	ldr	r3, [pc, #204]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f758:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        RadioStandby( );
 800f75c:	f7fe ff85 	bl	800e66a <RadioStandby>
        RadioSetModem( MODEM_LORA );
 800f760:	2001      	movs	r0, #1
 800f762:	f7fe f919 	bl	800d998 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f766:	4830      	ldr	r0, [pc, #192]	; (800f828 <RadioSetTxGenericConfig+0x464>)
 800f768:	f000 fd76 	bl	8010258 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800f76c:	482f      	ldr	r0, [pc, #188]	; (800f82c <RadioSetTxGenericConfig+0x468>)
 800f76e:	f000 fe45 	bl	80103fc <SUBGRF_SetPacketParams>

        /* WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet */
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800f772:	4b2c      	ldr	r3, [pc, #176]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800f778:	2b06      	cmp	r3, #6
 800f77a:	d10d      	bne.n	800f798 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 800f77c:	f640 0089 	movw	r0, #2185	; 0x889
 800f780:	f000 ff98 	bl	80106b4 <SUBGRF_ReadRegister>
 800f784:	4603      	mov	r3, r0
 800f786:	f023 0304 	bic.w	r3, r3, #4
 800f78a:	b2db      	uxtb	r3, r3
 800f78c:	4619      	mov	r1, r3
 800f78e:	f640 0089 	movw	r0, #2185	; 0x889
 800f792:	f000 ff7b 	bl	801068c <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        /* WORKAROUND END */
        break;
 800f796:	e02d      	b.n	800f7f4 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 800f798:	f640 0089 	movw	r0, #2185	; 0x889
 800f79c:	f000 ff8a 	bl	80106b4 <SUBGRF_ReadRegister>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	f043 0304 	orr.w	r3, r3, #4
 800f7a6:	b2db      	uxtb	r3, r3
 800f7a8:	4619      	mov	r1, r3
 800f7aa:	f640 0089 	movw	r0, #2185	; 0x889
 800f7ae:	f000 ff6d 	bl	801068c <SUBGRF_WriteRegister>
        break;
 800f7b2:	e01f      	b.n	800f7f4 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d004      	beq.n	800f7c6 <RadioSetTxGenericConfig+0x402>
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f7c4:	d902      	bls.n	800f7cc <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 800f7c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f7ca:	e027      	b.n	800f81c <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 800f7cc:	2003      	movs	r0, #3
 800f7ce:	f7fe f8e3 	bl	800d998 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 800f7d2:	4b14      	ldr	r3, [pc, #80]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f7d4:	2202      	movs	r2, #2
 800f7d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4a11      	ldr	r2, [pc, #68]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f7e0:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 800f7e2:	4b10      	ldr	r3, [pc, #64]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f7e4:	2216      	movs	r2, #22
 800f7e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800f7ea:	480f      	ldr	r0, [pc, #60]	; (800f828 <RadioSetTxGenericConfig+0x464>)
 800f7ec:	f000 fd34 	bl	8010258 <SUBGRF_SetModulationParams>
        break;
 800f7f0:	e000      	b.n	800f7f4 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 800f7f2:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800f7f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f001 f863 	bl	80108c4 <SUBGRF_SetRfTxPower>
 800f7fe:	4603      	mov	r3, r0
 800f800:	461a      	mov	r2, r3
 800f802:	4b08      	ldr	r3, [pc, #32]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f804:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 800f808:	4b06      	ldr	r3, [pc, #24]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f80a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f80e:	4618      	mov	r0, r3
 800f810:	f001 fa37 	bl	8010c82 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800f814:	4a03      	ldr	r2, [pc, #12]	; (800f824 <RadioSetTxGenericConfig+0x460>)
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	6053      	str	r3, [r2, #4]
    return 0;
 800f81a:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3738      	adds	r7, #56	; 0x38
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}
 800f824:	2000672c 	.word	0x2000672c
 800f828:	20006764 	.word	0x20006764
 800f82c:	2000673a 	.word	0x2000673a

0800f830 <RadioLrFhssSetCfg>:
    return ( prbs31_val - 1 ) % ( max );
}
#endif /* RADIO_LR_FHSS_IS_ON == 1 */

static radio_status_t RadioLrFhssSetCfg( const radio_lr_fhss_cfg_params_t *cfg_params )
{
 800f830:	b480      	push	{r7}
 800f832:	b085      	sub	sp, #20
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
    radio_status_t status = RADIO_STATUS_UNSUPPORTED_FEATURE;
 800f838:	2301      	movs	r3, #1
 800f83a:	73fb      	strb	r3, [r7, #15]
    {
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
 800f83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f83e:	4618      	mov	r0, r3
 800f840:	3714      	adds	r7, #20
 800f842:	46bd      	mov	sp, r7
 800f844:	bc80      	pop	{r7}
 800f846:	4770      	bx	lr

0800f848 <RadioLrFhssGetTimeOnAirInMs>:

static radio_status_t RadioLrFhssGetTimeOnAirInMs( const radio_lr_fhss_time_on_air_params_t *params,
                                                    uint32_t *time_on_air_in_ms )
{
 800f848:	b480      	push	{r7}
 800f84a:	b083      	sub	sp, #12
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
 800f850:	6039      	str	r1, [r7, #0]
    *time_on_air_in_ms = lr_fhss_get_time_on_air_in_ms( &params->radio_lr_fhss_params.lr_fhss_params,
                                                        params->pld_len_in_bytes );

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
 800f852:	2301      	movs	r3, #1
#endif /* RADIO_LR_FHSS_IS_ON */
 800f854:	4618      	mov	r0, r3
 800f856:	370c      	adds	r7, #12
 800f858:	46bd      	mov	sp, r7
 800f85a:	bc80      	pop	{r7}
 800f85c:	4770      	bx	lr
	...

0800f860 <SUBGRF_Init>:
 */
static DioIrqHandler RadioOnDioIrqCb;

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 800f860:	b580      	push	{r7, lr}
 800f862:	b084      	sub	sp, #16
 800f864:	af00      	add	r7, sp, #0
 800f866:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d002      	beq.n	800f874 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 800f86e:	4a1d      	ldr	r2, [pc, #116]	; (800f8e4 <SUBGRF_Init+0x84>)
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 800f874:	f7f2 f9ee 	bl	8001c54 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800f878:	2002      	movs	r0, #2
 800f87a:	f001 f8ff 	bl	8010a7c <Radio_SMPS_Set>

    ImageCalibrated = false;
 800f87e:	4b1a      	ldr	r3, [pc, #104]	; (800f8e8 <SUBGRF_Init+0x88>)
 800f880:	2200      	movs	r2, #0
 800f882:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 800f884:	2000      	movs	r0, #0
 800f886:	f000 f97d 	bl	800fb84 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 800f88a:	f001 fbba 	bl	8011002 <RBI_IsTCXO>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b01      	cmp	r3, #1
 800f892:	d10e      	bne.n	800f8b2 <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800f894:	2140      	movs	r1, #64	; 0x40
 800f896:	2001      	movs	r0, #1
 800f898:	f000 fb82 	bl	800ffa0 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 800f89c:	2100      	movs	r1, #0
 800f89e:	f640 1011 	movw	r0, #2321	; 0x911
 800f8a2:	f000 fef3 	bl	801068c <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 800f8a6:	237f      	movs	r3, #127	; 0x7f
 800f8a8:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 800f8aa:	7b38      	ldrb	r0, [r7, #12]
 800f8ac:	f000 fa8b 	bl	800fdc6 <SUBGRF_Calibrate>
 800f8b0:	e009      	b.n	800f8c6 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800f8b2:	2120      	movs	r1, #32
 800f8b4:	f640 1011 	movw	r0, #2321	; 0x911
 800f8b8:	f000 fee8 	bl	801068c <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800f8bc:	2120      	movs	r1, #32
 800f8be:	f640 1012 	movw	r0, #2322	; 0x912
 800f8c2:	f000 fee3 	bl	801068c <SUBGRF_WriteRegister>
    }

    /* WORKAROUND - Trimming the output voltage power_ldo to 3.3V */
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 800f8c6:	210e      	movs	r1, #14
 800f8c8:	f640 101f 	movw	r0, #2335	; 0x91f
 800f8cc:	f000 fede 	bl	801068c <SUBGRF_WriteRegister>

    /* Init RF Switch */
    RBI_Init();
 800f8d0:	f001 fb28 	bl	8010f24 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 800f8d4:	4b05      	ldr	r3, [pc, #20]	; (800f8ec <SUBGRF_Init+0x8c>)
 800f8d6:	2201      	movs	r2, #1
 800f8d8:	701a      	strb	r2, [r3, #0]
}
 800f8da:	bf00      	nop
 800f8dc:	3710      	adds	r7, #16
 800f8de:	46bd      	mov	sp, r7
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	200067c4 	.word	0x200067c4
 800f8e8:	200067c0 	.word	0x200067c0
 800f8ec:	200067b8 	.word	0x200067b8

0800f8f0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 800f8f0:	b480      	push	{r7}
 800f8f2:	af00      	add	r7, sp, #0
    return OperatingMode;
 800f8f4:	4b02      	ldr	r3, [pc, #8]	; (800f900 <SUBGRF_GetOperatingMode+0x10>)
 800f8f6:	781b      	ldrb	r3, [r3, #0]
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bc80      	pop	{r7}
 800f8fe:	4770      	bx	lr
 800f900:	200067b8 	.word	0x200067b8

0800f904 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	460b      	mov	r3, r1
 800f90e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 800f910:	78fb      	ldrb	r3, [r7, #3]
 800f912:	461a      	mov	r2, r3
 800f914:	6879      	ldr	r1, [r7, #4]
 800f916:	2000      	movs	r0, #0
 800f918:	f000 ff24 	bl	8010764 <SUBGRF_WriteBuffer>
}
 800f91c:	bf00      	nop
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}

0800f924 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af00      	add	r7, sp, #0
 800f92a:	60f8      	str	r0, [r7, #12]
 800f92c:	60b9      	str	r1, [r7, #8]
 800f92e:	4613      	mov	r3, r2
 800f930:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 800f936:	f107 0317 	add.w	r3, r7, #23
 800f93a:	4619      	mov	r1, r3
 800f93c:	68b8      	ldr	r0, [r7, #8]
 800f93e:	f000 fe27 	bl	8010590 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 800f942:	68bb      	ldr	r3, [r7, #8]
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	79fa      	ldrb	r2, [r7, #7]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d201      	bcs.n	800f950 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 800f94c:	2301      	movs	r3, #1
 800f94e:	e007      	b.n	800f960 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 800f950:	7df8      	ldrb	r0, [r7, #23]
 800f952:	68bb      	ldr	r3, [r7, #8]
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	461a      	mov	r2, r3
 800f958:	68f9      	ldr	r1, [r7, #12]
 800f95a:	f000 ff25 	bl	80107a8 <SUBGRF_ReadBuffer>

    return 0;
 800f95e:	2300      	movs	r3, #0
}
 800f960:	4618      	mov	r0, r3
 800f962:	3718      	adds	r7, #24
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b084      	sub	sp, #16
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	460b      	mov	r3, r1
 800f972:	607a      	str	r2, [r7, #4]
 800f974:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 800f976:	7afb      	ldrb	r3, [r7, #11]
 800f978:	4619      	mov	r1, r3
 800f97a:	68f8      	ldr	r0, [r7, #12]
 800f97c:	f7ff ffc2 	bl	800f904 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f000 f91b 	bl	800fbbc <SUBGRF_SetTx>
}
 800f986:	bf00      	nop
 800f988:	3710      	adds	r7, #16
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}

0800f98e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 800f98e:	b580      	push	{r7, lr}
 800f990:	b082      	sub	sp, #8
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800f996:	2208      	movs	r2, #8
 800f998:	6879      	ldr	r1, [r7, #4]
 800f99a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800f99e:	f000 fe9d 	bl	80106dc <SUBGRF_WriteRegisters>
    return 0;
 800f9a2:	2300      	movs	r3, #0
}
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	3708      	adds	r7, #8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}

0800f9ac <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b084      	sub	sp, #16
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800f9b6:	88fb      	ldrh	r3, [r7, #6]
 800f9b8:	0a1b      	lsrs	r3, r3, #8
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800f9c0:	88fb      	ldrh	r3, [r7, #6]
 800f9c2:	b2db      	uxtb	r3, r3
 800f9c4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800f9c6:	f000 fb6f 	bl	80100a8 <SUBGRF_GetPacketType>
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d108      	bne.n	800f9e2 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800f9d0:	f107 030c 	add.w	r3, r7, #12
 800f9d4:	2202      	movs	r2, #2
 800f9d6:	4619      	mov	r1, r3
 800f9d8:	f240 60bc 	movw	r0, #1724	; 0x6bc
 800f9dc:	f000 fe7e 	bl	80106dc <SUBGRF_WriteRegisters>
            break;
 800f9e0:	e000      	b.n	800f9e4 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 800f9e2:	bf00      	nop
    }
}
 800f9e4:	bf00      	nop
 800f9e6:	3710      	adds	r7, #16
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	bd80      	pop	{r7, pc}

0800f9ec <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b084      	sub	sp, #16
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800f9f6:	88fb      	ldrh	r3, [r7, #6]
 800f9f8:	0a1b      	lsrs	r3, r3, #8
 800f9fa:	b29b      	uxth	r3, r3
 800f9fc:	b2db      	uxtb	r3, r3
 800f9fe:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 800fa00:	88fb      	ldrh	r3, [r7, #6]
 800fa02:	b2db      	uxtb	r3, r3
 800fa04:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 800fa06:	f000 fb4f 	bl	80100a8 <SUBGRF_GetPacketType>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d108      	bne.n	800fa22 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800fa10:	f107 030c 	add.w	r3, r7, #12
 800fa14:	2202      	movs	r2, #2
 800fa16:	4619      	mov	r1, r3
 800fa18:	f240 60be 	movw	r0, #1726	; 0x6be
 800fa1c:	f000 fe5e 	bl	80106dc <SUBGRF_WriteRegisters>
            break;
 800fa20:	e000      	b.n	800fa24 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 800fa22:	bf00      	nop
    }
}
 800fa24:	bf00      	nop
 800fa26:	3710      	adds	r7, #16
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	bd80      	pop	{r7, pc}

0800fa2c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b084      	sub	sp, #16
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	4603      	mov	r3, r0
 800fa34:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 800fa36:	2300      	movs	r3, #0
 800fa38:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 800fa3a:	f000 fb35 	bl	80100a8 <SUBGRF_GetPacketType>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d121      	bne.n	800fa88 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800fa44:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fa48:	f000 fe34 	bl	80106b4 <SUBGRF_ReadRegister>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	f023 0301 	bic.w	r3, r3, #1
 800fa52:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800fa54:	88fb      	ldrh	r3, [r7, #6]
 800fa56:	0a1b      	lsrs	r3, r3, #8
 800fa58:	b29b      	uxth	r3, r3
 800fa5a:	b25b      	sxtb	r3, r3
 800fa5c:	f003 0301 	and.w	r3, r3, #1
 800fa60:	b25a      	sxtb	r2, r3
 800fa62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	b25b      	sxtb	r3, r3
 800fa6a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800fa6c:	7bfb      	ldrb	r3, [r7, #15]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800fa74:	f000 fe0a 	bl	801068c <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 800fa78:	88fb      	ldrh	r3, [r7, #6]
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800fa82:	f000 fe03 	bl	801068c <SUBGRF_WriteRegister>
            break;
 800fa86:	e000      	b.n	800fa8a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 800fa88:	bf00      	nop
    }
}
 800fa8a:	bf00      	nop
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}

0800fa92 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b082      	sub	sp, #8
 800fa96:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 800fa98:	2300      	movs	r3, #0
 800fa9a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 800faa0:	2300      	movs	r3, #0
 800faa2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 800faa4:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800faa8:	f000 fe04 	bl	80106b4 <SUBGRF_ReadRegister>
 800faac:	4603      	mov	r3, r0
 800faae:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	f023 0301 	bic.w	r3, r3, #1
 800fab6:	b2db      	uxtb	r3, r3
 800fab8:	4619      	mov	r1, r3
 800faba:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800fabe:	f000 fde5 	bl	801068c <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800fac2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fac6:	f000 fdf5 	bl	80106b4 <SUBGRF_ReadRegister>
 800faca:	4603      	mov	r3, r0
 800facc:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800face:	79bb      	ldrb	r3, [r7, #6]
 800fad0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	4619      	mov	r1, r3
 800fad8:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fadc:	f000 fdd6 	bl	801068c <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 800fae0:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800fae4:	f000 f88a 	bl	800fbfc <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800fae8:	463b      	mov	r3, r7
 800faea:	2204      	movs	r2, #4
 800faec:	4619      	mov	r1, r3
 800faee:	f640 0019 	movw	r0, #2073	; 0x819
 800faf2:	f000 fe15 	bl	8010720 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 800faf6:	2000      	movs	r0, #0
 800faf8:	f000 f844 	bl	800fb84 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	4619      	mov	r1, r3
 800fb00:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800fb04:	f000 fdc2 	bl	801068c <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800fb08:	79bb      	ldrb	r3, [r7, #6]
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 800fb10:	f000 fdbc 	bl	801068c <SUBGRF_WriteRegister>

    return number;
 800fb14:	683b      	ldr	r3, [r7, #0]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3708      	adds	r7, #8
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	bd80      	pop	{r7, pc}
	...

0800fb20 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b084      	sub	sp, #16
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800fb28:	2000      	movs	r0, #0
 800fb2a:	f001 fa25 	bl	8010f78 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800fb2e:	2002      	movs	r0, #2
 800fb30:	f000 ffa4 	bl	8010a7c <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb34:	793b      	ldrb	r3, [r7, #4]
 800fb36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fb3a:	b2db      	uxtb	r3, r3
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fb40:	793b      	ldrb	r3, [r7, #4]
 800fb42:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fb46:	b2db      	uxtb	r3, r3
 800fb48:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb4a:	b25b      	sxtb	r3, r3
 800fb4c:	4313      	orrs	r3, r2
 800fb4e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800fb50:	793b      	ldrb	r3, [r7, #4]
 800fb52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fb56:	b2db      	uxtb	r3, r3
 800fb58:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800fb5a:	4313      	orrs	r3, r2
 800fb5c:	b25b      	sxtb	r3, r3
 800fb5e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800fb60:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800fb62:	f107 030f 	add.w	r3, r7, #15
 800fb66:	2201      	movs	r2, #1
 800fb68:	4619      	mov	r1, r3
 800fb6a:	2084      	movs	r0, #132	; 0x84
 800fb6c:	f000 fe3e 	bl	80107ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 800fb70:	4b03      	ldr	r3, [pc, #12]	; (800fb80 <SUBGRF_SetSleep+0x60>)
 800fb72:	2200      	movs	r2, #0
 800fb74:	701a      	strb	r2, [r3, #0]
}
 800fb76:	bf00      	nop
 800fb78:	3710      	adds	r7, #16
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}
 800fb7e:	bf00      	nop
 800fb80:	200067b8 	.word	0x200067b8

0800fb84 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b082      	sub	sp, #8
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	4603      	mov	r3, r0
 800fb8c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800fb8e:	1dfb      	adds	r3, r7, #7
 800fb90:	2201      	movs	r2, #1
 800fb92:	4619      	mov	r1, r3
 800fb94:	2080      	movs	r0, #128	; 0x80
 800fb96:	f000 fe29 	bl	80107ec <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 800fb9a:	79fb      	ldrb	r3, [r7, #7]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d103      	bne.n	800fba8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 800fba0:	4b05      	ldr	r3, [pc, #20]	; (800fbb8 <SUBGRF_SetStandby+0x34>)
 800fba2:	2201      	movs	r2, #1
 800fba4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 800fba6:	e002      	b.n	800fbae <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 800fba8:	4b03      	ldr	r3, [pc, #12]	; (800fbb8 <SUBGRF_SetStandby+0x34>)
 800fbaa:	2202      	movs	r2, #2
 800fbac:	701a      	strb	r2, [r3, #0]
}
 800fbae:	bf00      	nop
 800fbb0:	3708      	adds	r7, #8
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	bd80      	pop	{r7, pc}
 800fbb6:	bf00      	nop
 800fbb8:	200067b8 	.word	0x200067b8

0800fbbc <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 800fbc4:	4b0c      	ldr	r3, [pc, #48]	; (800fbf8 <SUBGRF_SetTx+0x3c>)
 800fbc6:	2204      	movs	r2, #4
 800fbc8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	0c1b      	lsrs	r3, r3, #16
 800fbce:	b2db      	uxtb	r3, r3
 800fbd0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	0a1b      	lsrs	r3, r3, #8
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	b2db      	uxtb	r3, r3
 800fbde:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 800fbe0:	f107 030c 	add.w	r3, r7, #12
 800fbe4:	2203      	movs	r2, #3
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	2083      	movs	r0, #131	; 0x83
 800fbea:	f000 fdff 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fbee:	bf00      	nop
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}
 800fbf6:	bf00      	nop
 800fbf8:	200067b8 	.word	0x200067b8

0800fbfc <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800fc04:	4b0c      	ldr	r3, [pc, #48]	; (800fc38 <SUBGRF_SetRx+0x3c>)
 800fc06:	2205      	movs	r2, #5
 800fc08:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	0c1b      	lsrs	r3, r3, #16
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	0a1b      	lsrs	r3, r3, #8
 800fc16:	b2db      	uxtb	r3, r3
 800fc18:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	b2db      	uxtb	r3, r3
 800fc1e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fc20:	f107 030c 	add.w	r3, r7, #12
 800fc24:	2203      	movs	r2, #3
 800fc26:	4619      	mov	r1, r3
 800fc28:	2082      	movs	r0, #130	; 0x82
 800fc2a:	f000 fddf 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fc2e:	bf00      	nop
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}
 800fc36:	bf00      	nop
 800fc38:	200067b8 	.word	0x200067b8

0800fc3c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b084      	sub	sp, #16
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 800fc44:	4b0e      	ldr	r3, [pc, #56]	; (800fc80 <SUBGRF_SetRxBoosted+0x44>)
 800fc46:	2205      	movs	r2, #5
 800fc48:	701a      	strb	r2, [r3, #0]

    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 800fc4a:	2197      	movs	r1, #151	; 0x97
 800fc4c:	f640 00ac 	movw	r0, #2220	; 0x8ac
 800fc50:	f000 fd1c 	bl	801068c <SUBGRF_WriteRegister>

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	0c1b      	lsrs	r3, r3, #16
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	0a1b      	lsrs	r3, r3, #8
 800fc60:	b2db      	uxtb	r3, r3
 800fc62:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	b2db      	uxtb	r3, r3
 800fc68:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800fc6a:	f107 030c 	add.w	r3, r7, #12
 800fc6e:	2203      	movs	r2, #3
 800fc70:	4619      	mov	r1, r3
 800fc72:	2082      	movs	r0, #130	; 0x82
 800fc74:	f000 fdba 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fc78:	bf00      	nop
 800fc7a:	3710      	adds	r7, #16
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}
 800fc80:	200067b8 	.word	0x200067b8

0800fc84 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b084      	sub	sp, #16
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
 800fc8c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	0c1b      	lsrs	r3, r3, #16
 800fc92:	b2db      	uxtb	r3, r3
 800fc94:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	0a1b      	lsrs	r3, r3, #8
 800fc9a:	b2db      	uxtb	r3, r3
 800fc9c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	0c1b      	lsrs	r3, r3, #16
 800fca8:	b2db      	uxtb	r3, r3
 800fcaa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	0a1b      	lsrs	r3, r3, #8
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	b2db      	uxtb	r3, r3
 800fcb8:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800fcba:	f107 0308 	add.w	r3, r7, #8
 800fcbe:	2206      	movs	r2, #6
 800fcc0:	4619      	mov	r1, r3
 800fcc2:	2094      	movs	r0, #148	; 0x94
 800fcc4:	f000 fd92 	bl	80107ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800fcc8:	4b03      	ldr	r3, [pc, #12]	; (800fcd8 <SUBGRF_SetRxDutyCycle+0x54>)
 800fcca:	2206      	movs	r2, #6
 800fccc:	701a      	strb	r2, [r3, #0]
}
 800fcce:	bf00      	nop
 800fcd0:	3710      	adds	r7, #16
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	200067b8 	.word	0x200067b8

0800fcdc <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 800fce0:	2200      	movs	r2, #0
 800fce2:	2100      	movs	r1, #0
 800fce4:	20c5      	movs	r0, #197	; 0xc5
 800fce6:	f000 fd81 	bl	80107ec <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800fcea:	4b02      	ldr	r3, [pc, #8]	; (800fcf4 <SUBGRF_SetCad+0x18>)
 800fcec:	2207      	movs	r2, #7
 800fcee:	701a      	strb	r2, [r3, #0]
}
 800fcf0:	bf00      	nop
 800fcf2:	bd80      	pop	{r7, pc}
 800fcf4:	200067b8 	.word	0x200067b8

0800fcf8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	2100      	movs	r1, #0
 800fd00:	20d1      	movs	r0, #209	; 0xd1
 800fd02:	f000 fd73 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fd06:	bf00      	nop
 800fd08:	bd80      	pop	{r7, pc}

0800fd0a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 800fd0a:	b580      	push	{r7, lr}
 800fd0c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 800fd0e:	2200      	movs	r2, #0
 800fd10:	2100      	movs	r1, #0
 800fd12:	20d2      	movs	r0, #210	; 0xd2
 800fd14:	f000 fd6a 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fd18:	bf00      	nop
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	b082      	sub	sp, #8
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	4603      	mov	r3, r0
 800fd24:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800fd26:	1dfb      	adds	r3, r7, #7
 800fd28:	2201      	movs	r2, #1
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	209f      	movs	r0, #159	; 0x9f
 800fd2e:	f000 fd5d 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fd32:	bf00      	nop
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}

0800fd3a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 800fd3a:	b580      	push	{r7, lr}
 800fd3c:	b084      	sub	sp, #16
 800fd3e:	af00      	add	r7, sp, #0
 800fd40:	4603      	mov	r3, r0
 800fd42:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800fd44:	1dfb      	adds	r3, r7, #7
 800fd46:	2201      	movs	r2, #1
 800fd48:	4619      	mov	r1, r3
 800fd4a:	20a0      	movs	r0, #160	; 0xa0
 800fd4c:	f000 fd4e 	bl	80107ec <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 800fd50:	79fb      	ldrb	r3, [r7, #7]
 800fd52:	2b3f      	cmp	r3, #63	; 0x3f
 800fd54:	d91c      	bls.n	800fd90 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 800fd56:	79fb      	ldrb	r3, [r7, #7]
 800fd58:	085b      	lsrs	r3, r3, #1
 800fd5a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 800fd60:	2300      	movs	r3, #0
 800fd62:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 800fd64:	e005      	b.n	800fd72 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	089b      	lsrs	r3, r3, #2
 800fd6a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800fd6c:	7bbb      	ldrb	r3, [r7, #14]
 800fd6e:	3301      	adds	r3, #1
 800fd70:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 800fd72:	7bfb      	ldrb	r3, [r7, #15]
 800fd74:	2b1f      	cmp	r3, #31
 800fd76:	d8f6      	bhi.n	800fd66 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	00db      	lsls	r3, r3, #3
 800fd7c:	b2da      	uxtb	r2, r3
 800fd7e:	7bbb      	ldrb	r3, [r7, #14]
 800fd80:	4413      	add	r3, r2
 800fd82:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800fd84:	7b7b      	ldrb	r3, [r7, #13]
 800fd86:	4619      	mov	r1, r3
 800fd88:	f240 7006 	movw	r0, #1798	; 0x706
 800fd8c:	f000 fc7e 	bl	801068c <SUBGRF_WriteRegister>
    }
}
 800fd90:	bf00      	nop
 800fd92:	3710      	adds	r7, #16
 800fd94:	46bd      	mov	sp, r7
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800fd9e:	f001 f93b 	bl	8011018 <RBI_IsDCDC>
 800fda2:	4603      	mov	r3, r0
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d102      	bne.n	800fdae <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 800fda8:	2301      	movs	r3, #1
 800fdaa:	71fb      	strb	r3, [r7, #7]
 800fdac:	e001      	b.n	800fdb2 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	71fb      	strb	r3, [r7, #7]
    }
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800fdb2:	1dfb      	adds	r3, r7, #7
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	4619      	mov	r1, r3
 800fdb8:	2096      	movs	r0, #150	; 0x96
 800fdba:	f000 fd17 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fdbe:	bf00      	nop
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b084      	sub	sp, #16
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fdce:	793b      	ldrb	r3, [r7, #4]
 800fdd0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	019b      	lsls	r3, r3, #6
 800fdd8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800fdda:	793b      	ldrb	r3, [r7, #4]
 800fddc:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fde4:	b25b      	sxtb	r3, r3
 800fde6:	4313      	orrs	r3, r2
 800fde8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800fdea:	793b      	ldrb	r3, [r7, #4]
 800fdec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800fdf4:	b25b      	sxtb	r3, r3
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800fdfa:	793b      	ldrb	r3, [r7, #4]
 800fdfc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800fe00:	b2db      	uxtb	r3, r3
 800fe02:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800fe04:	b25b      	sxtb	r3, r3
 800fe06:	4313      	orrs	r3, r2
 800fe08:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800fe0a:	793b      	ldrb	r3, [r7, #4]
 800fe0c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800fe10:	b2db      	uxtb	r3, r3
 800fe12:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800fe14:	b25b      	sxtb	r3, r3
 800fe16:	4313      	orrs	r3, r2
 800fe18:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800fe1a:	793b      	ldrb	r3, [r7, #4]
 800fe1c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800fe20:	b2db      	uxtb	r3, r3
 800fe22:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800fe24:	b25b      	sxtb	r3, r3
 800fe26:	4313      	orrs	r3, r2
 800fe28:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800fe2a:	793b      	ldrb	r3, [r7, #4]
 800fe2c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800fe34:	4313      	orrs	r3, r2
 800fe36:	b25b      	sxtb	r3, r3
 800fe38:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800fe3a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800fe3c:	f107 030f 	add.w	r3, r7, #15
 800fe40:	2201      	movs	r2, #1
 800fe42:	4619      	mov	r1, r3
 800fe44:	2089      	movs	r0, #137	; 0x89
 800fe46:	f000 fcd1 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fe4a:	bf00      	nop
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
	...

0800fe54 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b084      	sub	sp, #16
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	4a1d      	ldr	r2, [pc, #116]	; (800fed4 <SUBGRF_CalibrateImage+0x80>)
 800fe60:	4293      	cmp	r3, r2
 800fe62:	d904      	bls.n	800fe6e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 800fe64:	23e1      	movs	r3, #225	; 0xe1
 800fe66:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 800fe68:	23e9      	movs	r3, #233	; 0xe9
 800fe6a:	737b      	strb	r3, [r7, #13]
 800fe6c:	e027      	b.n	800febe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 850000000 )
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	4a19      	ldr	r2, [pc, #100]	; (800fed8 <SUBGRF_CalibrateImage+0x84>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d904      	bls.n	800fe80 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 800fe76:	23d7      	movs	r3, #215	; 0xd7
 800fe78:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800fe7a:	23db      	movs	r3, #219	; 0xdb
 800fe7c:	737b      	strb	r3, [r7, #13]
 800fe7e:	e01e      	b.n	800febe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 770000000 )
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	4a16      	ldr	r2, [pc, #88]	; (800fedc <SUBGRF_CalibrateImage+0x88>)
 800fe84:	4293      	cmp	r3, r2
 800fe86:	d904      	bls.n	800fe92 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 800fe88:	23c1      	movs	r3, #193	; 0xc1
 800fe8a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800fe8c:	23c5      	movs	r3, #197	; 0xc5
 800fe8e:	737b      	strb	r3, [r7, #13]
 800fe90:	e015      	b.n	800febe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 460000000 )
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4a12      	ldr	r2, [pc, #72]	; (800fee0 <SUBGRF_CalibrateImage+0x8c>)
 800fe96:	4293      	cmp	r3, r2
 800fe98:	d904      	bls.n	800fea4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800fe9a:	2375      	movs	r3, #117	; 0x75
 800fe9c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800fe9e:	2381      	movs	r3, #129	; 0x81
 800fea0:	737b      	strb	r3, [r7, #13]
 800fea2:	e00c      	b.n	800febe <SUBGRF_CalibrateImage+0x6a>
    }
    else if( freq > 425000000 )
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	4a0f      	ldr	r2, [pc, #60]	; (800fee4 <SUBGRF_CalibrateImage+0x90>)
 800fea8:	4293      	cmp	r3, r2
 800feaa:	d904      	bls.n	800feb6 <SUBGRF_CalibrateImage+0x62>
    {
        calFreq[0] = 0x6B;
 800feac:	236b      	movs	r3, #107	; 0x6b
 800feae:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 800feb0:	236f      	movs	r3, #111	; 0x6f
 800feb2:	737b      	strb	r3, [r7, #13]
 800feb4:	e003      	b.n	800febe <SUBGRF_CalibrateImage+0x6a>
    }
    else /* freq <= 425000000*/
    {
        /* [ 156MHz - 171MHz ] */
        calFreq[0] = 0x29;
 800feb6:	2329      	movs	r3, #41	; 0x29
 800feb8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x2B ;
 800feba:	232b      	movs	r3, #43	; 0x2b
 800febc:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800febe:	f107 030c 	add.w	r3, r7, #12
 800fec2:	2202      	movs	r2, #2
 800fec4:	4619      	mov	r1, r3
 800fec6:	2098      	movs	r0, #152	; 0x98
 800fec8:	f000 fc90 	bl	80107ec <SUBGRF_WriteCommand>
}
 800fecc:	bf00      	nop
 800fece:	3710      	adds	r7, #16
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}
 800fed4:	35a4e900 	.word	0x35a4e900
 800fed8:	32a9f880 	.word	0x32a9f880
 800fedc:	2de54480 	.word	0x2de54480
 800fee0:	1b6b0b00 	.word	0x1b6b0b00
 800fee4:	1954fc40 	.word	0x1954fc40

0800fee8 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 800fee8:	b590      	push	{r4, r7, lr}
 800feea:	b085      	sub	sp, #20
 800feec:	af00      	add	r7, sp, #0
 800feee:	4604      	mov	r4, r0
 800fef0:	4608      	mov	r0, r1
 800fef2:	4611      	mov	r1, r2
 800fef4:	461a      	mov	r2, r3
 800fef6:	4623      	mov	r3, r4
 800fef8:	71fb      	strb	r3, [r7, #7]
 800fefa:	4603      	mov	r3, r0
 800fefc:	71bb      	strb	r3, [r7, #6]
 800fefe:	460b      	mov	r3, r1
 800ff00:	717b      	strb	r3, [r7, #5]
 800ff02:	4613      	mov	r3, r2
 800ff04:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 800ff06:	79fb      	ldrb	r3, [r7, #7]
 800ff08:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 800ff0a:	79bb      	ldrb	r3, [r7, #6]
 800ff0c:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 800ff0e:	797b      	ldrb	r3, [r7, #5]
 800ff10:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 800ff12:	793b      	ldrb	r3, [r7, #4]
 800ff14:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ff16:	f107 030c 	add.w	r3, r7, #12
 800ff1a:	2204      	movs	r2, #4
 800ff1c:	4619      	mov	r1, r3
 800ff1e:	2095      	movs	r0, #149	; 0x95
 800ff20:	f000 fc64 	bl	80107ec <SUBGRF_WriteCommand>
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}

0800ff2c <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 800ff2c:	b590      	push	{r4, r7, lr}
 800ff2e:	b085      	sub	sp, #20
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4604      	mov	r4, r0
 800ff34:	4608      	mov	r0, r1
 800ff36:	4611      	mov	r1, r2
 800ff38:	461a      	mov	r2, r3
 800ff3a:	4623      	mov	r3, r4
 800ff3c:	80fb      	strh	r3, [r7, #6]
 800ff3e:	4603      	mov	r3, r0
 800ff40:	80bb      	strh	r3, [r7, #4]
 800ff42:	460b      	mov	r3, r1
 800ff44:	807b      	strh	r3, [r7, #2]
 800ff46:	4613      	mov	r3, r2
 800ff48:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ff4a:	88fb      	ldrh	r3, [r7, #6]
 800ff4c:	0a1b      	lsrs	r3, r3, #8
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 800ff54:	88fb      	ldrh	r3, [r7, #6]
 800ff56:	b2db      	uxtb	r3, r3
 800ff58:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ff5a:	88bb      	ldrh	r3, [r7, #4]
 800ff5c:	0a1b      	lsrs	r3, r3, #8
 800ff5e:	b29b      	uxth	r3, r3
 800ff60:	b2db      	uxtb	r3, r3
 800ff62:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800ff64:	88bb      	ldrh	r3, [r7, #4]
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ff6a:	887b      	ldrh	r3, [r7, #2]
 800ff6c:	0a1b      	lsrs	r3, r3, #8
 800ff6e:	b29b      	uxth	r3, r3
 800ff70:	b2db      	uxtb	r3, r3
 800ff72:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800ff74:	887b      	ldrh	r3, [r7, #2]
 800ff76:	b2db      	uxtb	r3, r3
 800ff78:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ff7a:	883b      	ldrh	r3, [r7, #0]
 800ff7c:	0a1b      	lsrs	r3, r3, #8
 800ff7e:	b29b      	uxth	r3, r3
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800ff84:	883b      	ldrh	r3, [r7, #0]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ff8a:	f107 0308 	add.w	r3, r7, #8
 800ff8e:	2208      	movs	r2, #8
 800ff90:	4619      	mov	r1, r3
 800ff92:	2008      	movs	r0, #8
 800ff94:	f000 fc2a 	bl	80107ec <SUBGRF_WriteCommand>
}
 800ff98:	bf00      	nop
 800ff9a:	3714      	adds	r7, #20
 800ff9c:	46bd      	mov	sp, r7
 800ff9e:	bd90      	pop	{r4, r7, pc}

0800ffa0 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b084      	sub	sp, #16
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	6039      	str	r1, [r7, #0]
 800ffaa:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 800ffac:	79fb      	ldrb	r3, [r7, #7]
 800ffae:	f003 0307 	and.w	r3, r3, #7
 800ffb2:	b2db      	uxtb	r3, r3
 800ffb4:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	0c1b      	lsrs	r3, r3, #16
 800ffba:	b2db      	uxtb	r3, r3
 800ffbc:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	0a1b      	lsrs	r3, r3, #8
 800ffc2:	b2db      	uxtb	r3, r3
 800ffc4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ffcc:	f107 030c 	add.w	r3, r7, #12
 800ffd0:	2204      	movs	r2, #4
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	2097      	movs	r0, #151	; 0x97
 800ffd6:	f000 fc09 	bl	80107ec <SUBGRF_WriteCommand>
}
 800ffda:	bf00      	nop
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800ffe4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ffe8:	b084      	sub	sp, #16
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 800fff2:	4b1d      	ldr	r3, [pc, #116]	; (8010068 <SUBGRF_SetRfFrequency+0x84>)
 800fff4:	781b      	ldrb	r3, [r3, #0]
 800fff6:	f083 0301 	eor.w	r3, r3, #1
 800fffa:	b2db      	uxtb	r3, r3
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d005      	beq.n	801000c <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8010000:	6878      	ldr	r0, [r7, #4]
 8010002:	f7ff ff27 	bl	800fe54 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8010006:	4b18      	ldr	r3, [pc, #96]	; (8010068 <SUBGRF_SetRfFrequency+0x84>)
 8010008:	2201      	movs	r2, #1
 801000a:	701a      	strb	r2, [r3, #0]
    }
    SX_FREQ_TO_CHANNEL(chan, frequency);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2200      	movs	r2, #0
 8010010:	461c      	mov	r4, r3
 8010012:	4615      	mov	r5, r2
 8010014:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8010018:	ea4f 6844 	mov.w	r8, r4, lsl #25
 801001c:	4a13      	ldr	r2, [pc, #76]	; (801006c <SUBGRF_SetRfFrequency+0x88>)
 801001e:	f04f 0300 	mov.w	r3, #0
 8010022:	4640      	mov	r0, r8
 8010024:	4649      	mov	r1, r9
 8010026:	f7f0 fb33 	bl	8000690 <__aeabi_uldivmod>
 801002a:	4602      	mov	r2, r0
 801002c:	460b      	mov	r3, r1
 801002e:	4613      	mov	r3, r2
 8010030:	60fb      	str	r3, [r7, #12]
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	0e1b      	lsrs	r3, r3, #24
 8010036:	b2db      	uxtb	r3, r3
 8010038:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	0c1b      	lsrs	r3, r3, #16
 801003e:	b2db      	uxtb	r3, r3
 8010040:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	0a1b      	lsrs	r3, r3, #8
 8010046:	b2db      	uxtb	r3, r3
 8010048:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	b2db      	uxtb	r3, r3
 801004e:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8010050:	f107 0308 	add.w	r3, r7, #8
 8010054:	2204      	movs	r2, #4
 8010056:	4619      	mov	r1, r3
 8010058:	2086      	movs	r0, #134	; 0x86
 801005a:	f000 fbc7 	bl	80107ec <SUBGRF_WriteCommand>
}
 801005e:	bf00      	nop
 8010060:	3710      	adds	r7, #16
 8010062:	46bd      	mov	sp, r7
 8010064:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8010068:	200067c0 	.word	0x200067c0
 801006c:	01e84800 	.word	0x01e84800

08010070 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8010070:	b580      	push	{r7, lr}
 8010072:	b082      	sub	sp, #8
 8010074:	af00      	add	r7, sp, #0
 8010076:	4603      	mov	r3, r0
 8010078:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 801007a:	79fa      	ldrb	r2, [r7, #7]
 801007c:	4b09      	ldr	r3, [pc, #36]	; (80100a4 <SUBGRF_SetPacketType+0x34>)
 801007e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	2b00      	cmp	r3, #0
 8010084:	d104      	bne.n	8010090 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8010086:	2100      	movs	r1, #0
 8010088:	f240 60ac 	movw	r0, #1708	; 0x6ac
 801008c:	f000 fafe 	bl	801068c <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8010090:	1dfb      	adds	r3, r7, #7
 8010092:	2201      	movs	r2, #1
 8010094:	4619      	mov	r1, r3
 8010096:	208a      	movs	r0, #138	; 0x8a
 8010098:	f000 fba8 	bl	80107ec <SUBGRF_WriteCommand>
}
 801009c:	bf00      	nop
 801009e:	3708      	adds	r7, #8
 80100a0:	46bd      	mov	sp, r7
 80100a2:	bd80      	pop	{r7, pc}
 80100a4:	200067b9 	.word	0x200067b9

080100a8 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80100a8:	b480      	push	{r7}
 80100aa:	af00      	add	r7, sp, #0
    return PacketType;
 80100ac:	4b02      	ldr	r3, [pc, #8]	; (80100b8 <SUBGRF_GetPacketType+0x10>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
}
 80100b0:	4618      	mov	r0, r3
 80100b2:	46bd      	mov	sp, r7
 80100b4:	bc80      	pop	{r7}
 80100b6:	4770      	bx	lr
 80100b8:	200067b9 	.word	0x200067b9

080100bc <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b084      	sub	sp, #16
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	4603      	mov	r3, r0
 80100c4:	71fb      	strb	r3, [r7, #7]
 80100c6:	460b      	mov	r3, r1
 80100c8:	71bb      	strb	r3, [r7, #6]
 80100ca:	4613      	mov	r3, r2
 80100cc:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 80100ce:	79fb      	ldrb	r3, [r7, #7]
 80100d0:	2b01      	cmp	r3, #1
 80100d2:	d149      	bne.n	8010168 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 80100d4:	2000      	movs	r0, #0
 80100d6:	f000 ffaa 	bl	801102e <RBI_GetRFOMaxPowerConfig>
 80100da:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 80100dc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80100e0:	68fa      	ldr	r2, [r7, #12]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	da01      	bge.n	80100ea <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	2b0e      	cmp	r3, #14
 80100ee:	d10e      	bne.n	801010e <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 80100f0:	2301      	movs	r3, #1
 80100f2:	2201      	movs	r2, #1
 80100f4:	2100      	movs	r1, #0
 80100f6:	2004      	movs	r0, #4
 80100f8:	f7ff fef6 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80100fc:	79ba      	ldrb	r2, [r7, #6]
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	b2db      	uxtb	r3, r3
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	b2db      	uxtb	r3, r3
 8010106:	330e      	adds	r3, #14
 8010108:	b2db      	uxtb	r3, r3
 801010a:	71bb      	strb	r3, [r7, #6]
 801010c:	e01f      	b.n	801014e <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b0a      	cmp	r3, #10
 8010112:	d10e      	bne.n	8010132 <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8010114:	2301      	movs	r3, #1
 8010116:	2201      	movs	r2, #1
 8010118:	2100      	movs	r1, #0
 801011a:	2001      	movs	r0, #1
 801011c:	f7ff fee4 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8010120:	79ba      	ldrb	r2, [r7, #6]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	b2db      	uxtb	r3, r3
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	b2db      	uxtb	r3, r3
 801012a:	330d      	adds	r3, #13
 801012c:	b2db      	uxtb	r3, r3
 801012e:	71bb      	strb	r3, [r7, #6]
 8010130:	e00d      	b.n	801014e <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8010132:	2301      	movs	r3, #1
 8010134:	2201      	movs	r2, #1
 8010136:	2100      	movs	r1, #0
 8010138:	2007      	movs	r0, #7
 801013a:	f7ff fed5 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801013e:	79ba      	ldrb	r2, [r7, #6]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	b2db      	uxtb	r3, r3
 8010144:	1ad3      	subs	r3, r2, r3
 8010146:	b2db      	uxtb	r3, r3
 8010148:	330e      	adds	r3, #14
 801014a:	b2db      	uxtb	r3, r3
 801014c:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 801014e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010152:	f113 0f11 	cmn.w	r3, #17
 8010156:	da01      	bge.n	801015c <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 8010158:	23ef      	movs	r3, #239	; 0xef
 801015a:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 801015c:	2118      	movs	r1, #24
 801015e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010162:	f000 fa93 	bl	801068c <SUBGRF_WriteRegister>
 8010166:	e067      	b.n	8010238 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8010168:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801016c:	f000 faa2 	bl	80106b4 <SUBGRF_ReadRegister>
 8010170:	4603      	mov	r3, r0
 8010172:	f043 031e 	orr.w	r3, r3, #30
 8010176:	b2db      	uxtb	r3, r3
 8010178:	4619      	mov	r1, r3
 801017a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 801017e:	f000 fa85 	bl	801068c <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8010182:	2001      	movs	r0, #1
 8010184:	f000 ff53 	bl	801102e <RBI_GetRFOMaxPowerConfig>
 8010188:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 801018a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	429a      	cmp	r2, r3
 8010192:	da01      	bge.n	8010198 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2b14      	cmp	r3, #20
 801019c:	d10e      	bne.n	80101bc <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 801019e:	2301      	movs	r3, #1
 80101a0:	2200      	movs	r2, #0
 80101a2:	2105      	movs	r1, #5
 80101a4:	2003      	movs	r0, #3
 80101a6:	f7ff fe9f 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80101aa:	79ba      	ldrb	r2, [r7, #6]
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	b2db      	uxtb	r3, r3
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	b2db      	uxtb	r3, r3
 80101b4:	3316      	adds	r3, #22
 80101b6:	b2db      	uxtb	r3, r3
 80101b8:	71bb      	strb	r3, [r7, #6]
 80101ba:	e031      	b.n	8010220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	2b11      	cmp	r3, #17
 80101c0:	d10e      	bne.n	80101e0 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 80101c2:	2301      	movs	r3, #1
 80101c4:	2200      	movs	r2, #0
 80101c6:	2103      	movs	r1, #3
 80101c8:	2002      	movs	r0, #2
 80101ca:	f7ff fe8d 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80101ce:	79ba      	ldrb	r2, [r7, #6]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	b2db      	uxtb	r3, r3
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	b2db      	uxtb	r3, r3
 80101d8:	3316      	adds	r3, #22
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	71bb      	strb	r3, [r7, #6]
 80101de:	e01f      	b.n	8010220 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	2b0e      	cmp	r3, #14
 80101e4:	d10e      	bne.n	8010204 <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 80101e6:	2301      	movs	r3, #1
 80101e8:	2200      	movs	r2, #0
 80101ea:	2102      	movs	r1, #2
 80101ec:	2002      	movs	r0, #2
 80101ee:	f7ff fe7b 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 80101f2:	79ba      	ldrb	r2, [r7, #6]
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	b2db      	uxtb	r3, r3
 80101f8:	1ad3      	subs	r3, r2, r3
 80101fa:	b2db      	uxtb	r3, r3
 80101fc:	330e      	adds	r3, #14
 80101fe:	b2db      	uxtb	r3, r3
 8010200:	71bb      	strb	r3, [r7, #6]
 8010202:	e00d      	b.n	8010220 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8010204:	2301      	movs	r3, #1
 8010206:	2200      	movs	r2, #0
 8010208:	2107      	movs	r1, #7
 801020a:	2004      	movs	r0, #4
 801020c:	f7ff fe6c 	bl	800fee8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8010210:	79ba      	ldrb	r2, [r7, #6]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	b2db      	uxtb	r3, r3
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	b2db      	uxtb	r3, r3
 801021a:	3316      	adds	r3, #22
 801021c:	b2db      	uxtb	r3, r3
 801021e:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8010220:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8010224:	f113 0f09 	cmn.w	r3, #9
 8010228:	da01      	bge.n	801022e <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 801022a:	23f7      	movs	r3, #247	; 0xf7
 801022c:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 801022e:	2138      	movs	r1, #56	; 0x38
 8010230:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8010234:	f000 fa2a 	bl	801068c <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8010238:	79bb      	ldrb	r3, [r7, #6]
 801023a:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 801023c:	797b      	ldrb	r3, [r7, #5]
 801023e:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8010240:	f107 0308 	add.w	r3, r7, #8
 8010244:	2202      	movs	r2, #2
 8010246:	4619      	mov	r1, r3
 8010248:	208e      	movs	r0, #142	; 0x8e
 801024a:	f000 facf 	bl	80107ec <SUBGRF_WriteCommand>
}
 801024e:	bf00      	nop
 8010250:	3710      	adds	r7, #16
 8010252:	46bd      	mov	sp, r7
 8010254:	bd80      	pop	{r7, pc}
	...

08010258 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8010258:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801025c:	b086      	sub	sp, #24
 801025e:	af00      	add	r7, sp, #0
 8010260:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8010262:	2300      	movs	r3, #0
 8010264:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010266:	4a61      	ldr	r2, [pc, #388]	; (80103ec <SUBGRF_SetModulationParams+0x194>)
 8010268:	f107 0308 	add.w	r3, r7, #8
 801026c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010270:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	781a      	ldrb	r2, [r3, #0]
 8010278:	4b5d      	ldr	r3, [pc, #372]	; (80103f0 <SUBGRF_SetModulationParams+0x198>)
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	429a      	cmp	r2, r3
 801027e:	d004      	beq.n	801028a <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	4618      	mov	r0, r3
 8010286:	f7ff fef3 	bl	8010070 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	2b03      	cmp	r3, #3
 8010290:	f200 80a5 	bhi.w	80103de <SUBGRF_SetModulationParams+0x186>
 8010294:	a201      	add	r2, pc, #4	; (adr r2, 801029c <SUBGRF_SetModulationParams+0x44>)
 8010296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029a:	bf00      	nop
 801029c:	080102ad 	.word	0x080102ad
 80102a0:	0801036d 	.word	0x0801036d
 80102a4:	0801032f 	.word	0x0801032f
 80102a8:	0801039b 	.word	0x0801039b
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80102ac:	2308      	movs	r3, #8
 80102ae:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	4a4f      	ldr	r2, [pc, #316]	; (80103f4 <SUBGRF_SetModulationParams+0x19c>)
 80102b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80102ba:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80102bc:	697b      	ldr	r3, [r7, #20]
 80102be:	0c1b      	lsrs	r3, r3, #16
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	0a1b      	lsrs	r3, r3, #8
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	7b1b      	ldrb	r3, [r3, #12]
 80102d6:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	7b5b      	ldrb	r3, [r3, #13]
 80102dc:	733b      	strb	r3, [r7, #12]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	689b      	ldr	r3, [r3, #8]
 80102e2:	2200      	movs	r2, #0
 80102e4:	461c      	mov	r4, r3
 80102e6:	4615      	mov	r5, r2
 80102e8:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 80102ec:	ea4f 6844 	mov.w	r8, r4, lsl #25
 80102f0:	4a41      	ldr	r2, [pc, #260]	; (80103f8 <SUBGRF_SetModulationParams+0x1a0>)
 80102f2:	f04f 0300 	mov.w	r3, #0
 80102f6:	4640      	mov	r0, r8
 80102f8:	4649      	mov	r1, r9
 80102fa:	f7f0 f9c9 	bl	8000690 <__aeabi_uldivmod>
 80102fe:	4602      	mov	r2, r0
 8010300:	460b      	mov	r3, r1
 8010302:	4613      	mov	r3, r2
 8010304:	617b      	str	r3, [r7, #20]
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	0c1b      	lsrs	r3, r3, #16
 801030a:	b2db      	uxtb	r3, r3
 801030c:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 801030e:	697b      	ldr	r3, [r7, #20]
 8010310:	0a1b      	lsrs	r3, r3, #8
 8010312:	b2db      	uxtb	r3, r3
 8010314:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 8010316:	697b      	ldr	r3, [r7, #20]
 8010318:	b2db      	uxtb	r3, r3
 801031a:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801031c:	7cfb      	ldrb	r3, [r7, #19]
 801031e:	b29a      	uxth	r2, r3
 8010320:	f107 0308 	add.w	r3, r7, #8
 8010324:	4619      	mov	r1, r3
 8010326:	208b      	movs	r0, #139	; 0x8b
 8010328:	f000 fa60 	bl	80107ec <SUBGRF_WriteCommand>
        break;
 801032c:	e058      	b.n	80103e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 801032e:	2304      	movs	r3, #4
 8010330:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	4a2f      	ldr	r2, [pc, #188]	; (80103f4 <SUBGRF_SetModulationParams+0x19c>)
 8010338:	fbb2 f3f3 	udiv	r3, r2, r3
 801033c:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	0c1b      	lsrs	r3, r3, #16
 8010342:	b2db      	uxtb	r3, r3
 8010344:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8010346:	697b      	ldr	r3, [r7, #20]
 8010348:	0a1b      	lsrs	r3, r3, #8
 801034a:	b2db      	uxtb	r3, r3
 801034c:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	b2db      	uxtb	r3, r3
 8010352:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	7d1b      	ldrb	r3, [r3, #20]
 8010358:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 801035a:	7cfb      	ldrb	r3, [r7, #19]
 801035c:	b29a      	uxth	r2, r3
 801035e:	f107 0308 	add.w	r3, r7, #8
 8010362:	4619      	mov	r1, r3
 8010364:	208b      	movs	r0, #139	; 0x8b
 8010366:	f000 fa41 	bl	80107ec <SUBGRF_WriteCommand>
        break;
 801036a:	e039      	b.n	80103e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 801036c:	2304      	movs	r3, #4
 801036e:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	7e1b      	ldrb	r3, [r3, #24]
 8010374:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	7e5b      	ldrb	r3, [r3, #25]
 801037a:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	7e9b      	ldrb	r3, [r3, #26]
 8010380:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	7edb      	ldrb	r3, [r3, #27]
 8010386:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8010388:	7cfb      	ldrb	r3, [r7, #19]
 801038a:	b29a      	uxth	r2, r3
 801038c:	f107 0308 	add.w	r3, r7, #8
 8010390:	4619      	mov	r1, r3
 8010392:	208b      	movs	r0, #139	; 0x8b
 8010394:	f000 fa2a 	bl	80107ec <SUBGRF_WriteCommand>

        break;
 8010398:	e022      	b.n	80103e0 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 801039a:	2305      	movs	r3, #5
 801039c:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	4a14      	ldr	r2, [pc, #80]	; (80103f4 <SUBGRF_SetModulationParams+0x19c>)
 80103a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80103a8:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	0c1b      	lsrs	r3, r3, #16
 80103ae:	b2db      	uxtb	r3, r3
 80103b0:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80103b2:	697b      	ldr	r3, [r7, #20]
 80103b4:	0a1b      	lsrs	r3, r3, #8
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	b2db      	uxtb	r3, r3
 80103be:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	7b1b      	ldrb	r3, [r3, #12]
 80103c4:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	7b5b      	ldrb	r3, [r3, #13]
 80103ca:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80103cc:	7cfb      	ldrb	r3, [r7, #19]
 80103ce:	b29a      	uxth	r2, r3
 80103d0:	f107 0308 	add.w	r3, r7, #8
 80103d4:	4619      	mov	r1, r3
 80103d6:	208b      	movs	r0, #139	; 0x8b
 80103d8:	f000 fa08 	bl	80107ec <SUBGRF_WriteCommand>
        break;
 80103dc:	e000      	b.n	80103e0 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 80103de:	bf00      	nop
    }
}
 80103e0:	bf00      	nop
 80103e2:	3718      	adds	r7, #24
 80103e4:	46bd      	mov	sp, r7
 80103e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80103ea:	bf00      	nop
 80103ec:	080129c0 	.word	0x080129c0
 80103f0:	200067b9 	.word	0x200067b9
 80103f4:	3d090000 	.word	0x3d090000
 80103f8:	01e84800 	.word	0x01e84800

080103fc <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80103fc:	b580      	push	{r7, lr}
 80103fe:	b086      	sub	sp, #24
 8010400:	af00      	add	r7, sp, #0
 8010402:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 8010404:	2300      	movs	r3, #0
 8010406:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8010408:	4a48      	ldr	r2, [pc, #288]	; (801052c <SUBGRF_SetPacketParams+0x130>)
 801040a:	f107 030c 	add.w	r3, r7, #12
 801040e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010410:	c303      	stmia	r3!, {r0, r1}
 8010412:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	781a      	ldrb	r2, [r3, #0]
 8010418:	4b45      	ldr	r3, [pc, #276]	; (8010530 <SUBGRF_SetPacketParams+0x134>)
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	429a      	cmp	r2, r3
 801041e:	d004      	beq.n	801042a <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	781b      	ldrb	r3, [r3, #0]
 8010424:	4618      	mov	r0, r3
 8010426:	f7ff fe23 	bl	8010070 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	781b      	ldrb	r3, [r3, #0]
 801042e:	2b03      	cmp	r3, #3
 8010430:	d878      	bhi.n	8010524 <SUBGRF_SetPacketParams+0x128>
 8010432:	a201      	add	r2, pc, #4	; (adr r2, 8010438 <SUBGRF_SetPacketParams+0x3c>)
 8010434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010438:	08010449 	.word	0x08010449
 801043c:	080104d9 	.word	0x080104d9
 8010440:	080104cd 	.word	0x080104cd
 8010444:	08010449 	.word	0x08010449
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	7a5b      	ldrb	r3, [r3, #9]
 801044c:	2bf1      	cmp	r3, #241	; 0xf1
 801044e:	d10a      	bne.n	8010466 <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8010450:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8010454:	f7ff faaa 	bl	800f9ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8010458:	f248 0005 	movw	r0, #32773	; 0x8005
 801045c:	f7ff fac6 	bl	800f9ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8010460:	2302      	movs	r3, #2
 8010462:	75bb      	strb	r3, [r7, #22]
 8010464:	e011      	b.n	801048a <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	7a5b      	ldrb	r3, [r3, #9]
 801046a:	2bf2      	cmp	r3, #242	; 0xf2
 801046c:	d10a      	bne.n	8010484 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801046e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8010472:	f7ff fa9b 	bl	800f9ac <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8010476:	f241 0021 	movw	r0, #4129	; 0x1021
 801047a:	f7ff fab7 	bl	800f9ec <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801047e:	2306      	movs	r3, #6
 8010480:	75bb      	strb	r3, [r7, #22]
 8010482:	e002      	b.n	801048a <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	7a5b      	ldrb	r3, [r3, #9]
 8010488:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 801048a:	2309      	movs	r3, #9
 801048c:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	885b      	ldrh	r3, [r3, #2]
 8010492:	0a1b      	lsrs	r3, r3, #8
 8010494:	b29b      	uxth	r3, r3
 8010496:	b2db      	uxtb	r3, r3
 8010498:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	885b      	ldrh	r3, [r3, #2]
 801049e:	b2db      	uxtb	r3, r3
 80104a0:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	791b      	ldrb	r3, [r3, #4]
 80104a6:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	795b      	ldrb	r3, [r3, #5]
 80104ac:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	799b      	ldrb	r3, [r3, #6]
 80104b2:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	79db      	ldrb	r3, [r3, #7]
 80104b8:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	7a1b      	ldrb	r3, [r3, #8]
 80104be:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 80104c0:	7dbb      	ldrb	r3, [r7, #22]
 80104c2:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	7a9b      	ldrb	r3, [r3, #10]
 80104c8:	753b      	strb	r3, [r7, #20]
        break;
 80104ca:	e022      	b.n	8010512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 80104cc:	2301      	movs	r3, #1
 80104ce:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	7b1b      	ldrb	r3, [r3, #12]
 80104d4:	733b      	strb	r3, [r7, #12]
        break;
 80104d6:	e01c      	b.n	8010512 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 80104d8:	2306      	movs	r3, #6
 80104da:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	89db      	ldrh	r3, [r3, #14]
 80104e0:	0a1b      	lsrs	r3, r3, #8
 80104e2:	b29b      	uxth	r3, r3
 80104e4:	b2db      	uxtb	r3, r3
 80104e6:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	89db      	ldrh	r3, [r3, #14]
 80104ec:	b2db      	uxtb	r3, r3
 80104ee:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	7c1a      	ldrb	r2, [r3, #16]
 80104f4:	4b0f      	ldr	r3, [pc, #60]	; (8010534 <SUBGRF_SetPacketParams+0x138>)
 80104f6:	4611      	mov	r1, r2
 80104f8:	7019      	strb	r1, [r3, #0]
 80104fa:	4613      	mov	r3, r2
 80104fc:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	7c5b      	ldrb	r3, [r3, #17]
 8010502:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	7c9b      	ldrb	r3, [r3, #18]
 8010508:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	7cdb      	ldrb	r3, [r3, #19]
 801050e:	747b      	strb	r3, [r7, #17]
        break;
 8010510:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8010512:	7dfb      	ldrb	r3, [r7, #23]
 8010514:	b29a      	uxth	r2, r3
 8010516:	f107 030c 	add.w	r3, r7, #12
 801051a:	4619      	mov	r1, r3
 801051c:	208c      	movs	r0, #140	; 0x8c
 801051e:	f000 f965 	bl	80107ec <SUBGRF_WriteCommand>
 8010522:	e000      	b.n	8010526 <SUBGRF_SetPacketParams+0x12a>
        return;
 8010524:	bf00      	nop
}
 8010526:	3718      	adds	r7, #24
 8010528:	46bd      	mov	sp, r7
 801052a:	bd80      	pop	{r7, pc}
 801052c:	080129c8 	.word	0x080129c8
 8010530:	200067b9 	.word	0x200067b9
 8010534:	200067ba 	.word	0x200067ba

08010538 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b084      	sub	sp, #16
 801053c:	af00      	add	r7, sp, #0
 801053e:	4603      	mov	r3, r0
 8010540:	460a      	mov	r2, r1
 8010542:	71fb      	strb	r3, [r7, #7]
 8010544:	4613      	mov	r3, r2
 8010546:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8010548:	79fb      	ldrb	r3, [r7, #7]
 801054a:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 801054c:	79bb      	ldrb	r3, [r7, #6]
 801054e:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8010550:	f107 030c 	add.w	r3, r7, #12
 8010554:	2202      	movs	r2, #2
 8010556:	4619      	mov	r1, r3
 8010558:	208f      	movs	r0, #143	; 0x8f
 801055a:	f000 f947 	bl	80107ec <SUBGRF_WriteCommand>
}
 801055e:	bf00      	nop
 8010560:	3710      	adds	r7, #16
 8010562:	46bd      	mov	sp, r7
 8010564:	bd80      	pop	{r7, pc}

08010566 <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 8010566:	b580      	push	{r7, lr}
 8010568:	b082      	sub	sp, #8
 801056a:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 801056c:	2300      	movs	r3, #0
 801056e:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8010570:	1d3b      	adds	r3, r7, #4
 8010572:	2201      	movs	r2, #1
 8010574:	4619      	mov	r1, r3
 8010576:	2015      	movs	r0, #21
 8010578:	f000 f95a 	bl	8010830 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 801057c:	793b      	ldrb	r3, [r7, #4]
 801057e:	425b      	negs	r3, r3
 8010580:	105b      	asrs	r3, r3, #1
 8010582:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8010584:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8010588:	4618      	mov	r0, r3
 801058a:	3708      	adds	r7, #8
 801058c:	46bd      	mov	sp, r7
 801058e:	bd80      	pop	{r7, pc}

08010590 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b084      	sub	sp, #16
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 801059a:	f107 030c 	add.w	r3, r7, #12
 801059e:	2202      	movs	r2, #2
 80105a0:	4619      	mov	r1, r3
 80105a2:	2013      	movs	r0, #19
 80105a4:	f000 f944 	bl	8010830 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80105a8:	f7ff fd7e 	bl	80100a8 <SUBGRF_GetPacketType>
 80105ac:	4603      	mov	r3, r0
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d10d      	bne.n	80105ce <SUBGRF_GetRxBufferStatus+0x3e>
 80105b2:	4b0c      	ldr	r3, [pc, #48]	; (80105e4 <SUBGRF_GetRxBufferStatus+0x54>)
 80105b4:	781b      	ldrb	r3, [r3, #0]
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	d108      	bne.n	80105ce <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 80105bc:	f240 7002 	movw	r0, #1794	; 0x702
 80105c0:	f000 f878 	bl	80106b4 <SUBGRF_ReadRegister>
 80105c4:	4603      	mov	r3, r0
 80105c6:	461a      	mov	r2, r3
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	701a      	strb	r2, [r3, #0]
 80105cc:	e002      	b.n	80105d4 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 80105ce:	7b3a      	ldrb	r2, [r7, #12]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 80105d4:	7b7a      	ldrb	r2, [r7, #13]
 80105d6:	683b      	ldr	r3, [r7, #0]
 80105d8:	701a      	strb	r2, [r3, #0]
}
 80105da:	bf00      	nop
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	200067ba 	.word	0x200067ba

080105e8 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b084      	sub	sp, #16
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80105f0:	f107 030c 	add.w	r3, r7, #12
 80105f4:	2203      	movs	r2, #3
 80105f6:	4619      	mov	r1, r3
 80105f8:	2014      	movs	r0, #20
 80105fa:	f000 f919 	bl	8010830 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80105fe:	f7ff fd53 	bl	80100a8 <SUBGRF_GetPacketType>
 8010602:	4603      	mov	r3, r0
 8010604:	461a      	mov	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	781b      	ldrb	r3, [r3, #0]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d002      	beq.n	8010618 <SUBGRF_GetPacketStatus+0x30>
 8010612:	2b01      	cmp	r3, #1
 8010614:	d013      	beq.n	801063e <SUBGRF_GetPacketStatus+0x56>
 8010616:	e02a      	b.n	801066e <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8010618:	7b3a      	ldrb	r2, [r7, #12]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 801061e:	7b7b      	ldrb	r3, [r7, #13]
 8010620:	425b      	negs	r3, r3
 8010622:	105b      	asrs	r3, r3, #1
 8010624:	b25a      	sxtb	r2, r3
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801062a:	7bbb      	ldrb	r3, [r7, #14]
 801062c:	425b      	negs	r3, r3
 801062e:	105b      	asrs	r3, r3, #1
 8010630:	b25a      	sxtb	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	2200      	movs	r2, #0
 801063a:	609a      	str	r2, [r3, #8]
            break;
 801063c:	e020      	b.n	8010680 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 801063e:	7b3b      	ldrb	r3, [r7, #12]
 8010640:	425b      	negs	r3, r3
 8010642:	105b      	asrs	r3, r3, #1
 8010644:	b25a      	sxtb	r2, r3
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 801064a:	7b7b      	ldrb	r3, [r7, #13]
 801064c:	b25b      	sxtb	r3, r3
 801064e:	3302      	adds	r3, #2
 8010650:	109b      	asrs	r3, r3, #2
 8010652:	b25a      	sxtb	r2, r3
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8010658:	7bbb      	ldrb	r3, [r7, #14]
 801065a:	425b      	negs	r3, r3
 801065c:	105b      	asrs	r3, r3, #1
 801065e:	b25a      	sxtb	r2, r3
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8010664:	4b08      	ldr	r3, [pc, #32]	; (8010688 <SUBGRF_GetPacketStatus+0xa0>)
 8010666:	681a      	ldr	r2, [r3, #0]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	611a      	str	r2, [r3, #16]
            break;
 801066c:	e008      	b.n	8010680 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801066e:	2214      	movs	r2, #20
 8010670:	2100      	movs	r1, #0
 8010672:	6878      	ldr	r0, [r7, #4]
 8010674:	f000 fdb5 	bl	80111e2 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	220f      	movs	r2, #15
 801067c:	701a      	strb	r2, [r3, #0]
            break;
 801067e:	bf00      	nop
    }
}
 8010680:	bf00      	nop
 8010682:	3710      	adds	r7, #16
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	200067bc 	.word	0x200067bc

0801068c <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	4603      	mov	r3, r0
 8010694:	460a      	mov	r2, r1
 8010696:	80fb      	strh	r3, [r7, #6]
 8010698:	4613      	mov	r3, r2
 801069a:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 801069c:	1d7a      	adds	r2, r7, #5
 801069e:	88f9      	ldrh	r1, [r7, #6]
 80106a0:	2301      	movs	r3, #1
 80106a2:	4803      	ldr	r0, [pc, #12]	; (80106b0 <SUBGRF_WriteRegister+0x24>)
 80106a4:	f7f6 ff1c 	bl	80074e0 <HAL_SUBGHZ_WriteRegisters>
}
 80106a8:	bf00      	nop
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	20006480 	.word	0x20006480

080106b4 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b084      	sub	sp, #16
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	4603      	mov	r3, r0
 80106bc:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80106be:	f107 020f 	add.w	r2, r7, #15
 80106c2:	88f9      	ldrh	r1, [r7, #6]
 80106c4:	2301      	movs	r3, #1
 80106c6:	4804      	ldr	r0, [pc, #16]	; (80106d8 <SUBGRF_ReadRegister+0x24>)
 80106c8:	f7f6 ff69 	bl	800759e <HAL_SUBGHZ_ReadRegisters>
    return data;
 80106cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3710      	adds	r7, #16
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
 80106d6:	bf00      	nop
 80106d8:	20006480 	.word	0x20006480

080106dc <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b086      	sub	sp, #24
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	4603      	mov	r3, r0
 80106e4:	6039      	str	r1, [r7, #0]
 80106e6:	80fb      	strh	r3, [r7, #6]
 80106e8:	4613      	mov	r3, r2
 80106ea:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80106ec:	f3ef 8310 	mrs	r3, PRIMASK
 80106f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80106f2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80106f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80106f6:	b672      	cpsid	i
}
 80106f8:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80106fa:	88bb      	ldrh	r3, [r7, #4]
 80106fc:	88f9      	ldrh	r1, [r7, #6]
 80106fe:	683a      	ldr	r2, [r7, #0]
 8010700:	4806      	ldr	r0, [pc, #24]	; (801071c <SUBGRF_WriteRegisters+0x40>)
 8010702:	f7f6 feed 	bl	80074e0 <HAL_SUBGHZ_WriteRegisters>
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	f383 8810 	msr	PRIMASK, r3
}
 8010710:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010712:	bf00      	nop
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	20006480 	.word	0x20006480

08010720 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b086      	sub	sp, #24
 8010724:	af00      	add	r7, sp, #0
 8010726:	4603      	mov	r3, r0
 8010728:	6039      	str	r1, [r7, #0]
 801072a:	80fb      	strh	r3, [r7, #6]
 801072c:	4613      	mov	r3, r2
 801072e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010730:	f3ef 8310 	mrs	r3, PRIMASK
 8010734:	60fb      	str	r3, [r7, #12]
  return(result);
 8010736:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801073a:	b672      	cpsid	i
}
 801073c:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 801073e:	88bb      	ldrh	r3, [r7, #4]
 8010740:	88f9      	ldrh	r1, [r7, #6]
 8010742:	683a      	ldr	r2, [r7, #0]
 8010744:	4806      	ldr	r0, [pc, #24]	; (8010760 <SUBGRF_ReadRegisters+0x40>)
 8010746:	f7f6 ff2a 	bl	800759e <HAL_SUBGHZ_ReadRegisters>
 801074a:	697b      	ldr	r3, [r7, #20]
 801074c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	f383 8810 	msr	PRIMASK, r3
}
 8010754:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010756:	bf00      	nop
 8010758:	3718      	adds	r7, #24
 801075a:	46bd      	mov	sp, r7
 801075c:	bd80      	pop	{r7, pc}
 801075e:	bf00      	nop
 8010760:	20006480 	.word	0x20006480

08010764 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b086      	sub	sp, #24
 8010768:	af00      	add	r7, sp, #0
 801076a:	4603      	mov	r3, r0
 801076c:	6039      	str	r1, [r7, #0]
 801076e:	71fb      	strb	r3, [r7, #7]
 8010770:	4613      	mov	r3, r2
 8010772:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010774:	f3ef 8310 	mrs	r3, PRIMASK
 8010778:	60fb      	str	r3, [r7, #12]
  return(result);
 801077a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801077c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801077e:	b672      	cpsid	i
}
 8010780:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8010782:	79bb      	ldrb	r3, [r7, #6]
 8010784:	b29b      	uxth	r3, r3
 8010786:	79f9      	ldrb	r1, [r7, #7]
 8010788:	683a      	ldr	r2, [r7, #0]
 801078a:	4806      	ldr	r0, [pc, #24]	; (80107a4 <SUBGRF_WriteBuffer+0x40>)
 801078c:	f7f7 f81b 	bl	80077c6 <HAL_SUBGHZ_WriteBuffer>
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	f383 8810 	msr	PRIMASK, r3
}
 801079a:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801079c:	bf00      	nop
 801079e:	3718      	adds	r7, #24
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	20006480 	.word	0x20006480

080107a8 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b086      	sub	sp, #24
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	6039      	str	r1, [r7, #0]
 80107b2:	71fb      	strb	r3, [r7, #7]
 80107b4:	4613      	mov	r3, r2
 80107b6:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107b8:	f3ef 8310 	mrs	r3, PRIMASK
 80107bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80107be:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80107c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80107c2:	b672      	cpsid	i
}
 80107c4:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 80107c6:	79bb      	ldrb	r3, [r7, #6]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	79f9      	ldrb	r1, [r7, #7]
 80107cc:	683a      	ldr	r2, [r7, #0]
 80107ce:	4806      	ldr	r0, [pc, #24]	; (80107e8 <SUBGRF_ReadBuffer+0x40>)
 80107d0:	f7f7 f84c 	bl	800786c <HAL_SUBGHZ_ReadBuffer>
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	f383 8810 	msr	PRIMASK, r3
}
 80107de:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80107e0:	bf00      	nop
 80107e2:	3718      	adds	r7, #24
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}
 80107e8:	20006480 	.word	0x20006480

080107ec <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 80107ec:	b580      	push	{r7, lr}
 80107ee:	b086      	sub	sp, #24
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	4603      	mov	r3, r0
 80107f4:	6039      	str	r1, [r7, #0]
 80107f6:	71fb      	strb	r3, [r7, #7]
 80107f8:	4613      	mov	r3, r2
 80107fa:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80107fc:	f3ef 8310 	mrs	r3, PRIMASK
 8010800:	60fb      	str	r3, [r7, #12]
  return(result);
 8010802:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010804:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010806:	b672      	cpsid	i
}
 8010808:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801080a:	88bb      	ldrh	r3, [r7, #4]
 801080c:	79f9      	ldrb	r1, [r7, #7]
 801080e:	683a      	ldr	r2, [r7, #0]
 8010810:	4806      	ldr	r0, [pc, #24]	; (801082c <SUBGRF_WriteCommand+0x40>)
 8010812:	f7f6 ff25 	bl	8007660 <HAL_SUBGHZ_ExecSetCmd>
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801081a:	693b      	ldr	r3, [r7, #16]
 801081c:	f383 8810 	msr	PRIMASK, r3
}
 8010820:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010822:	bf00      	nop
 8010824:	3718      	adds	r7, #24
 8010826:	46bd      	mov	sp, r7
 8010828:	bd80      	pop	{r7, pc}
 801082a:	bf00      	nop
 801082c:	20006480 	.word	0x20006480

08010830 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	4603      	mov	r3, r0
 8010838:	6039      	str	r1, [r7, #0]
 801083a:	71fb      	strb	r3, [r7, #7]
 801083c:	4613      	mov	r3, r2
 801083e:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010840:	f3ef 8310 	mrs	r3, PRIMASK
 8010844:	60fb      	str	r3, [r7, #12]
  return(result);
 8010846:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8010848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801084a:	b672      	cpsid	i
}
 801084c:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 801084e:	88bb      	ldrh	r3, [r7, #4]
 8010850:	79f9      	ldrb	r1, [r7, #7]
 8010852:	683a      	ldr	r2, [r7, #0]
 8010854:	4806      	ldr	r0, [pc, #24]	; (8010870 <SUBGRF_ReadCommand+0x40>)
 8010856:	f7f6 ff62 	bl	800771e <HAL_SUBGHZ_ExecGetCmd>
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	f383 8810 	msr	PRIMASK, r3
}
 8010864:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8010866:	bf00      	nop
 8010868:	3718      	adds	r7, #24
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	20006480 	.word	0x20006480

08010874 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	4603      	mov	r3, r0
 801087c:	460a      	mov	r2, r1
 801087e:	71fb      	strb	r3, [r7, #7]
 8010880:	4613      	mov	r3, r2
 8010882:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8010884:	2301      	movs	r3, #1
 8010886:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8010888:	79bb      	ldrb	r3, [r7, #6]
 801088a:	2b01      	cmp	r3, #1
 801088c:	d10d      	bne.n	80108aa <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 801088e:	79fb      	ldrb	r3, [r7, #7]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d104      	bne.n	801089e <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8010894:	2302      	movs	r3, #2
 8010896:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8010898:	2004      	movs	r0, #4
 801089a:	f000 f8ef 	bl	8010a7c <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 801089e:	79fb      	ldrb	r3, [r7, #7]
 80108a0:	2b02      	cmp	r3, #2
 80108a2:	d107      	bne.n	80108b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 80108a4:	2303      	movs	r3, #3
 80108a6:	73fb      	strb	r3, [r7, #15]
 80108a8:	e004      	b.n	80108b4 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 80108aa:	79bb      	ldrb	r3, [r7, #6]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d101      	bne.n	80108b4 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 80108b0:	2301      	movs	r3, #1
 80108b2:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 80108b4:	7bfb      	ldrb	r3, [r7, #15]
 80108b6:	4618      	mov	r0, r3
 80108b8:	f000 fb5e 	bl	8010f78 <RBI_ConfigRFSwitch>
}
 80108bc:	bf00      	nop
 80108be:	3710      	adds	r7, #16
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 80108c4:	b580      	push	{r7, lr}
 80108c6:	b084      	sub	sp, #16
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 80108ce:	2301      	movs	r3, #1
 80108d0:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 80108d2:	f000 fb8b 	bl	8010fec <RBI_GetTxConfig>
 80108d6:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	2b02      	cmp	r3, #2
 80108dc:	d016      	beq.n	801090c <SUBGRF_SetRfTxPower+0x48>
 80108de:	68bb      	ldr	r3, [r7, #8]
 80108e0:	2b02      	cmp	r3, #2
 80108e2:	dc16      	bgt.n	8010912 <SUBGRF_SetRfTxPower+0x4e>
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d003      	beq.n	80108f2 <SUBGRF_SetRfTxPower+0x2e>
 80108ea:	68bb      	ldr	r3, [r7, #8]
 80108ec:	2b01      	cmp	r3, #1
 80108ee:	d00a      	beq.n	8010906 <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 80108f0:	e00f      	b.n	8010912 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 80108f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80108f6:	2b0f      	cmp	r3, #15
 80108f8:	dd02      	ble.n	8010900 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 80108fa:	2302      	movs	r3, #2
 80108fc:	73fb      	strb	r3, [r7, #15]
            break;
 80108fe:	e009      	b.n	8010914 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8010900:	2301      	movs	r3, #1
 8010902:	73fb      	strb	r3, [r7, #15]
            break;
 8010904:	e006      	b.n	8010914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8010906:	2301      	movs	r3, #1
 8010908:	73fb      	strb	r3, [r7, #15]
            break;
 801090a:	e003      	b.n	8010914 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 801090c:	2302      	movs	r3, #2
 801090e:	73fb      	strb	r3, [r7, #15]
            break;
 8010910:	e000      	b.n	8010914 <SUBGRF_SetRfTxPower+0x50>
            break;
 8010912:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8010914:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8010918:	7bfb      	ldrb	r3, [r7, #15]
 801091a:	2202      	movs	r2, #2
 801091c:	4618      	mov	r0, r3
 801091e:	f7ff fbcd 	bl	80100bc <SUBGRF_SetTxParams>

    return paSelect;
 8010922:	7bfb      	ldrb	r3, [r7, #15]
}
 8010924:	4618      	mov	r0, r3
 8010926:	3710      	adds	r7, #16
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 801092c:	b480      	push	{r7}
 801092e:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8010930:	2301      	movs	r3, #1
}
 8010932:	4618      	mov	r0, r3
 8010934:	46bd      	mov	sp, r7
 8010936:	bc80      	pop	{r7}
 8010938:	4770      	bx	lr
	...

0801093c <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8010944:	4b03      	ldr	r3, [pc, #12]	; (8010954 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	2001      	movs	r0, #1
 801094a:	4798      	blx	r3
}
 801094c:	bf00      	nop
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	200067c4 	.word	0x200067c4

08010958 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8010960:	4b03      	ldr	r3, [pc, #12]	; (8010970 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	2002      	movs	r0, #2
 8010966:	4798      	blx	r3
}
 8010968:	bf00      	nop
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}
 8010970:	200067c4 	.word	0x200067c4

08010974 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b082      	sub	sp, #8
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 801097c:	4b03      	ldr	r3, [pc, #12]	; (801098c <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	2040      	movs	r0, #64	; 0x40
 8010982:	4798      	blx	r3
}
 8010984:	bf00      	nop
 8010986:	3708      	adds	r7, #8
 8010988:	46bd      	mov	sp, r7
 801098a:	bd80      	pop	{r7, pc}
 801098c:	200067c4 	.word	0x200067c4

08010990 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b082      	sub	sp, #8
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	460b      	mov	r3, r1
 801099a:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 801099c:	78fb      	ldrb	r3, [r7, #3]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d002      	beq.n	80109a8 <HAL_SUBGHZ_CADStatusCallback+0x18>
 80109a2:	2b01      	cmp	r3, #1
 80109a4:	d005      	beq.n	80109b2 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 80109a6:	e00a      	b.n	80109be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 80109a8:	4b07      	ldr	r3, [pc, #28]	; (80109c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	2080      	movs	r0, #128	; 0x80
 80109ae:	4798      	blx	r3
            break;
 80109b0:	e005      	b.n	80109be <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 80109b2:	4b05      	ldr	r3, [pc, #20]	; (80109c8 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80109ba:	4798      	blx	r3
            break;
 80109bc:	bf00      	nop
    }
}
 80109be:	bf00      	nop
 80109c0:	3708      	adds	r7, #8
 80109c2:	46bd      	mov	sp, r7
 80109c4:	bd80      	pop	{r7, pc}
 80109c6:	bf00      	nop
 80109c8:	200067c4 	.word	0x200067c4

080109cc <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 80109d4:	4b04      	ldr	r3, [pc, #16]	; (80109e8 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80109dc:	4798      	blx	r3
}
 80109de:	bf00      	nop
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	200067c4 	.word	0x200067c4

080109ec <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 80109f4:	4b03      	ldr	r3, [pc, #12]	; (8010a04 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2020      	movs	r0, #32
 80109fa:	4798      	blx	r3
}
 80109fc:	bf00      	nop
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}
 8010a04:	200067c4 	.word	0x200067c4

08010a08 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8010a10:	4b03      	ldr	r3, [pc, #12]	; (8010a20 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8010a12:	681b      	ldr	r3, [r3, #0]
 8010a14:	2004      	movs	r0, #4
 8010a16:	4798      	blx	r3
}
 8010a18:	bf00      	nop
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	200067c4 	.word	0x200067c4

08010a24 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	b082      	sub	sp, #8
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8010a2c:	4b03      	ldr	r3, [pc, #12]	; (8010a3c <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2008      	movs	r0, #8
 8010a32:	4798      	blx	r3
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	200067c4 	.word	0x200067c4

08010a40 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8010a48:	4b03      	ldr	r3, [pc, #12]	; (8010a58 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	2010      	movs	r0, #16
 8010a4e:	4798      	blx	r3
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	200067c4 	.word	0x200067c4

08010a5c <HAL_SUBGHZ_LrFhssHopCallback>:

void HAL_SUBGHZ_LrFhssHopCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8010a64:	4b04      	ldr	r3, [pc, #16]	; (8010a78 <HAL_SUBGHZ_LrFhssHopCallback+0x1c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8010a6c:	4798      	blx	r3
}
 8010a6e:	bf00      	nop
 8010a70:	3708      	adds	r7, #8
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	200067c4 	.word	0x200067c4

08010a7c <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b084      	sub	sp, #16
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	4603      	mov	r3, r0
 8010a84:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8010a86:	f000 fac7 	bl	8011018 <RBI_IsDCDC>
 8010a8a:	4603      	mov	r3, r0
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d112      	bne.n	8010ab6 <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8010a90:	f640 1023 	movw	r0, #2339	; 0x923
 8010a94:	f7ff fe0e 	bl	80106b4 <SUBGRF_ReadRegister>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	f023 0306 	bic.w	r3, r3, #6
 8010aa2:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8010aa4:	7bfa      	ldrb	r2, [r7, #15]
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	b2db      	uxtb	r3, r3
 8010aac:	4619      	mov	r1, r3
 8010aae:	f640 1023 	movw	r0, #2339	; 0x923
 8010ab2:	f7ff fdeb 	bl	801068c <SUBGRF_WriteRegister>
  }
}
 8010ab6:	bf00      	nop
 8010ab8:	3710      	adds	r7, #16
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
	...

08010ac0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8010ac0:	b480      	push	{r7}
 8010ac2:	b085      	sub	sp, #20
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d101      	bne.n	8010ad2 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8010ace:	231f      	movs	r3, #31
 8010ad0:	e016      	b.n	8010b00 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	73fb      	strb	r3, [r7, #15]
 8010ad6:	e00f      	b.n	8010af8 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8010ad8:	7bfb      	ldrb	r3, [r7, #15]
 8010ada:	4a0c      	ldr	r2, [pc, #48]	; (8010b0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8010adc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010ae0:	687a      	ldr	r2, [r7, #4]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d205      	bcs.n	8010af2 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8010ae6:	7bfb      	ldrb	r3, [r7, #15]
 8010ae8:	4a08      	ldr	r2, [pc, #32]	; (8010b0c <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8010aea:	00db      	lsls	r3, r3, #3
 8010aec:	4413      	add	r3, r2
 8010aee:	791b      	ldrb	r3, [r3, #4]
 8010af0:	e006      	b.n	8010b00 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8010af2:	7bfb      	ldrb	r3, [r7, #15]
 8010af4:	3301      	adds	r3, #1
 8010af6:	73fb      	strb	r3, [r7, #15]
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
 8010afa:	2b15      	cmp	r3, #21
 8010afc:	d9ec      	bls.n	8010ad8 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8010afe:	e7fe      	b.n	8010afe <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8010b00:	4618      	mov	r0, r3
 8010b02:	3714      	adds	r7, #20
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bc80      	pop	{r7}
 8010b08:	4770      	bx	lr
 8010b0a:	bf00      	nop
 8010b0c:	08012cc4 	.word	0x08012cc4

08010b10 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b08a      	sub	sp, #40	; 0x28
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
 8010b18:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8010b1a:	4b35      	ldr	r3, [pc, #212]	; (8010bf0 <SUBGRF_GetCFO+0xe0>)
 8010b1c:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8010b1e:	f640 0007 	movw	r0, #2055	; 0x807
 8010b22:	f7ff fdc7 	bl	80106b4 <SUBGRF_ReadRegister>
 8010b26:	4603      	mov	r3, r0
 8010b28:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8010b2a:	7ffb      	ldrb	r3, [r7, #31]
 8010b2c:	08db      	lsrs	r3, r3, #3
 8010b2e:	b2db      	uxtb	r3, r3
 8010b30:	f003 0303 	and.w	r3, r3, #3
 8010b34:	3328      	adds	r3, #40	; 0x28
 8010b36:	443b      	add	r3, r7
 8010b38:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8010b3c:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8010b3e:	7ffb      	ldrb	r3, [r7, #31]
 8010b40:	f003 0307 	and.w	r3, r3, #7
 8010b44:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8010b46:	7fba      	ldrb	r2, [r7, #30]
 8010b48:	7f7b      	ldrb	r3, [r7, #29]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8010b50:	461a      	mov	r2, r3
 8010b52:	4b28      	ldr	r3, [pc, #160]	; (8010bf4 <SUBGRF_GetCFO+0xe4>)
 8010b54:	fbb3 f3f2 	udiv	r3, r3, r2
 8010b58:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8010b5a:	69ba      	ldr	r2, [r7, #24]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b62:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8010b64:	2301      	movs	r3, #1
 8010b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8010b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b6e:	697a      	ldr	r2, [r7, #20]
 8010b70:	fb02 f303 	mul.w	r3, r2, r3
 8010b74:	2b07      	cmp	r3, #7
 8010b76:	d802      	bhi.n	8010b7e <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8010b78:	2302      	movs	r3, #2
 8010b7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8010b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b82:	697a      	ldr	r2, [r7, #20]
 8010b84:	fb02 f303 	mul.w	r3, r2, r3
 8010b88:	2b03      	cmp	r3, #3
 8010b8a:	d802      	bhi.n	8010b92 <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8010b8c:	2304      	movs	r3, #4
 8010b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8010b92:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	fb02 f303 	mul.w	r3, r2, r3
 8010b9c:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8010b9e:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8010ba2:	f7ff fd87 	bl	80106b4 <SUBGRF_ReadRegister>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	021b      	lsls	r3, r3, #8
 8010baa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010bae:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8010bb0:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8010bb4:	f7ff fd7e 	bl	80106b4 <SUBGRF_ReadRegister>
 8010bb8:	4603      	mov	r3, r0
 8010bba:	461a      	mov	r2, r3
 8010bbc:	6a3b      	ldr	r3, [r7, #32]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8010bc2:	6a3b      	ldr	r3, [r7, #32]
 8010bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d005      	beq.n	8010bd8 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8010bcc:	6a3b      	ldr	r3, [r7, #32]
 8010bce:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8010bd2:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8010bd6:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	095b      	lsrs	r3, r3, #5
 8010bdc:	6a3a      	ldr	r2, [r7, #32]
 8010bde:	fb02 f303 	mul.w	r3, r2, r3
 8010be2:	11da      	asrs	r2, r3, #7
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	601a      	str	r2, [r3, #0]
}
 8010be8:	bf00      	nop
 8010bea:	3728      	adds	r7, #40	; 0x28
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}
 8010bf0:	0c0a0804 	.word	0x0c0a0804
 8010bf4:	01e84800 	.word	0x01e84800

08010bf8 <RFW_TransmitLongPacket>:
#endif /* RFW_ENABLE == 1 */

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout,
                                void ( *TxLongPacketGetNextChunkCb )( uint8_t **buffer, uint8_t buffer_size ) )
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b087      	sub	sp, #28
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	4603      	mov	r3, r0
 8010c00:	60b9      	str	r1, [r7, #8]
 8010c02:	607a      	str	r2, [r7, #4]
 8010c04:	81fb      	strh	r3, [r7, #14]
    int32_t status = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	617b      	str	r3, [r7, #20]
        default:
            break;
        }
    }
#else
    status = -1;
 8010c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c0e:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8010c10:	697b      	ldr	r3, [r7, #20]
}
 8010c12:	4618      	mov	r0, r3
 8010c14:	371c      	adds	r7, #28
 8010c16:	46bd      	mov	sp, r7
 8010c18:	bc80      	pop	{r7}
 8010c1a:	4770      	bx	lr

08010c1c <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout,
                               void ( *RxLongPacketStoreChunkCb )( uint8_t *buffer, uint8_t chunk_size ) )
{
 8010c1c:	b480      	push	{r7}
 8010c1e:	b087      	sub	sp, #28
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	60b9      	str	r1, [r7, #8]
 8010c26:	607a      	str	r2, [r7, #4]
 8010c28:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	617b      	str	r3, [r7, #20]
        {
            SUBGRF_SetRx( 0xFFFFFF ); /* Rx Continuous */
        }
    }
#else
    status = -1;
 8010c2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010c32:	617b      	str	r3, [r7, #20]
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
 8010c34:	697b      	ldr	r3, [r7, #20]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	371c      	adds	r7, #28
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	bc80      	pop	{r7}
 8010c3e:	4770      	bx	lr

08010c40 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t *config, RadioEvents_t *RadioEvents, TimerEvent_t *TimeoutTimerEvent )
{
 8010c40:	b480      	push	{r7}
 8010c42:	b085      	sub	sp, #20
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	60f8      	str	r0, [r7, #12]
 8010c48:	60b9      	str	r1, [r7, #8]
 8010c4a:	607a      	str	r2, [r7, #4]
    RFWPacket.Init.Enable = 1;
    /* Initialize Timer for end of fixed packet, started at sync*/
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
 8010c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8010c50:	4618      	mov	r0, r3
 8010c52:	3714      	adds	r7, #20
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bc80      	pop	{r7}
 8010c58:	4770      	bx	lr

08010c5a <RFW_DeInit>:

void RFW_DeInit( void )
{
 8010c5a:	b480      	push	{r7}
 8010c5c:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 8010c5e:	bf00      	nop
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bc80      	pop	{r7}
 8010c64:	4770      	bx	lr

08010c66 <RFW_Is_Init>:

uint8_t RFW_Is_Init( void )
{
 8010c66:	b480      	push	{r7}
 8010c68:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
 8010c6a:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	bc80      	pop	{r7}
 8010c72:	4770      	bx	lr

08010c74 <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void )
{
 8010c74:	b480      	push	{r7}
 8010c76:	af00      	add	r7, sp, #0
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
 8010c78:	2300      	movs	r3, #0
#endif /* RFW_ENABLE == 1 */
}
 8010c7a:	4618      	mov	r0, r3
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bc80      	pop	{r7}
 8010c80:	4770      	bx	lr

08010c82 <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch )
{
 8010c82:	b480      	push	{r7}
 8010c84:	b083      	sub	sp, #12
 8010c86:	af00      	add	r7, sp, #0
 8010c88:	4603      	mov	r3, r0
 8010c8a:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8010c8c:	bf00      	nop
 8010c8e:	370c      	adds	r7, #12
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bc80      	pop	{r7}
 8010c94:	4770      	bx	lr

08010c96 <RFW_TransmitInit>:

int32_t RFW_TransmitInit( uint8_t *inOutBuffer, uint8_t size, uint8_t *outSize )
{
 8010c96:	b480      	push	{r7}
 8010c98:	b087      	sub	sp, #28
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	60f8      	str	r0, [r7, #12]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	607a      	str	r2, [r7, #4]
 8010ca2:	72fb      	strb	r3, [r7, #11]
    int32_t status = -1;
 8010ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ca8:	617b      	str	r3, [r7, #20]
        RFWPacket.LongPacketModeEnable = 0;

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
 8010caa:	697b      	ldr	r3, [r7, #20]
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	371c      	adds	r7, #28
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bc80      	pop	{r7}
 8010cb4:	4770      	bx	lr

08010cb6 <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8010cb6:	b480      	push	{r7}
 8010cb8:	af00      	add	r7, sp, #0
    RFWPacket.RxPayloadOffset = 0;

    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
 8010cba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* RFW_ENABLE == 1 */
}
 8010cbe:	4618      	mov	r0, r3
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bc80      	pop	{r7}
 8010cc4:	4770      	bx	lr

08010cc6 <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket( void )
{
 8010cc6:	b480      	push	{r7}
 8010cc8:	af00      	add	r7, sp, #0
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8010cca:	bf00      	nop
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bc80      	pop	{r7}
 8010cd0:	4770      	bx	lr

08010cd2 <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8010cd2:	b480      	push	{r7}
 8010cd4:	af00      	add	r7, sp, #0
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8010cd6:	bf00      	nop
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bc80      	pop	{r7}
 8010cdc:	4770      	bx	lr

08010cde <RFW_SetRadioModem>:

void RFW_SetRadioModem( RadioModems_t Modem )
{
 8010cde:	b480      	push	{r7}
 8010ce0:	b083      	sub	sp, #12
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8010ce8:	bf00      	nop
 8010cea:	370c      	adds	r7, #12
 8010cec:	46bd      	mov	sp, r7
 8010cee:	bc80      	pop	{r7}
 8010cf0:	4770      	bx	lr

08010cf2 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8010cf2:	b580      	push	{r7, lr}
 8010cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8010cf6:	f7f0 ffe5 	bl	8001cc4 <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8010cfa:	f000 f80b 	bl	8010d14 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8010cfe:	bf00      	nop
 8010d00:	bd80      	pop	{r7, pc}

08010d02 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8010d02:	b580      	push	{r7, lr}
 8010d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8010d06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d0a:	f000 fd5d 	bl	80117c8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8010d0e:	bf00      	nop
 8010d10:	bd80      	pop	{r7, pc}
	...

08010d14 <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8010d14:	b590      	push	{r4, r7, lr}
 8010d16:	b08b      	sub	sp, #44	; 0x2c
 8010d18:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */

  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 8010d1a:	4b2a      	ldr	r3, [pc, #168]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d1c:	4a2a      	ldr	r2, [pc, #168]	; (8010dc8 <SubghzApp_Init+0xb4>)
 8010d1e:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8010d20:	4b28      	ldr	r3, [pc, #160]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d22:	4a2a      	ldr	r2, [pc, #168]	; (8010dcc <SubghzApp_Init+0xb8>)
 8010d24:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8010d26:	4b27      	ldr	r3, [pc, #156]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d28:	4a29      	ldr	r2, [pc, #164]	; (8010dd0 <SubghzApp_Init+0xbc>)
 8010d2a:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8010d2c:	4b25      	ldr	r3, [pc, #148]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d2e:	4a29      	ldr	r2, [pc, #164]	; (8010dd4 <SubghzApp_Init+0xc0>)
 8010d30:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8010d32:	4b24      	ldr	r3, [pc, #144]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d34:	4a28      	ldr	r2, [pc, #160]	; (8010dd8 <SubghzApp_Init+0xc4>)
 8010d36:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 8010d38:	4b28      	ldr	r3, [pc, #160]	; (8010ddc <SubghzApp_Init+0xc8>)
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	4821      	ldr	r0, [pc, #132]	; (8010dc4 <SubghzApp_Init+0xb0>)
 8010d3e:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

  /* Radio Set frequency */
  Radio.SetChannel(RF_FREQUENCY);
 8010d40:	4b26      	ldr	r3, [pc, #152]	; (8010ddc <SubghzApp_Init+0xc8>)
 8010d42:	68db      	ldr	r3, [r3, #12]
 8010d44:	4826      	ldr	r0, [pc, #152]	; (8010de0 <SubghzApp_Init+0xcc>)
 8010d46:	4798      	blx	r3
//  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
//  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
//  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
//  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);

  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8010d48:	4b24      	ldr	r3, [pc, #144]	; (8010ddc <SubghzApp_Init+0xc8>)
 8010d4a:	69dc      	ldr	r4, [r3, #28]
 8010d4c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8010d50:	9308      	str	r3, [sp, #32]
 8010d52:	2300      	movs	r3, #0
 8010d54:	9307      	str	r3, [sp, #28]
 8010d56:	2300      	movs	r3, #0
 8010d58:	9306      	str	r3, [sp, #24]
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	9305      	str	r3, [sp, #20]
 8010d5e:	2301      	movs	r3, #1
 8010d60:	9304      	str	r3, [sp, #16]
 8010d62:	2300      	movs	r3, #0
 8010d64:	9303      	str	r3, [sp, #12]
 8010d66:	2308      	movs	r3, #8
 8010d68:	9302      	str	r3, [sp, #8]
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	2307      	movs	r3, #7
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	2300      	movs	r3, #0
 8010d74:	2200      	movs	r2, #0
 8010d76:	210e      	movs	r1, #14
 8010d78:	2001      	movs	r0, #1
 8010d7a:	47a0      	blx	r4
		  LORA_SPREADING_FACTOR, LORA_CODINGRATE,
		  LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
		  true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8010d7c:	4b17      	ldr	r3, [pc, #92]	; (8010ddc <SubghzApp_Init+0xc8>)
 8010d7e:	699c      	ldr	r4, [r3, #24]
 8010d80:	2301      	movs	r3, #1
 8010d82:	9309      	str	r3, [sp, #36]	; 0x24
 8010d84:	2300      	movs	r3, #0
 8010d86:	9308      	str	r3, [sp, #32]
 8010d88:	2300      	movs	r3, #0
 8010d8a:	9307      	str	r3, [sp, #28]
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	9306      	str	r3, [sp, #24]
 8010d90:	2301      	movs	r3, #1
 8010d92:	9305      	str	r3, [sp, #20]
 8010d94:	2300      	movs	r3, #0
 8010d96:	9304      	str	r3, [sp, #16]
 8010d98:	2300      	movs	r3, #0
 8010d9a:	9303      	str	r3, [sp, #12]
 8010d9c:	2305      	movs	r3, #5
 8010d9e:	9302      	str	r3, [sp, #8]
 8010da0:	2308      	movs	r3, #8
 8010da2:	9301      	str	r3, [sp, #4]
 8010da4:	2300      	movs	r3, #0
 8010da6:	9300      	str	r3, [sp, #0]
 8010da8:	2301      	movs	r3, #1
 8010daa:	2207      	movs	r2, #7
 8010dac:	2100      	movs	r1, #0
 8010dae:	2001      	movs	r0, #1
 8010db0:	47a0      	blx	r4
		  LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
		  LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
		  0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8010db2:	4b0a      	ldr	r3, [pc, #40]	; (8010ddc <SubghzApp_Init+0xc8>)
 8010db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010db6:	21ff      	movs	r1, #255	; 0xff
 8010db8:	2001      	movs	r0, #1
 8010dba:	4798      	blx	r3
#else
#error "Please define a modulation in the subghz_phy_app.h file."
#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

  /* USER CODE END SubghzApp_Init_2 */
}
 8010dbc:	bf00      	nop
 8010dbe:	3704      	adds	r7, #4
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	bd90      	pop	{r4, r7, pc}
 8010dc4:	200067c8 	.word	0x200067c8
 8010dc8:	08010e71 	.word	0x08010e71
 8010dcc:	08010e85 	.word	0x08010e85
 8010dd0:	08010eb9 	.word	0x08010eb9
 8010dd4:	08010ecd 	.word	0x08010ecd
 8010dd8:	08010ee1 	.word	0x08010ee1
 8010ddc:	08012c34 	.word	0x08012c34
 8010de0:	339e1c80 	.word	0x339e1c80

08010de4 <SubghzApp_SetLoRaConfig>:

/* USER CODE BEGIN EF */

void SubghzApp_SetLoRaConfig(int tx_output_power, int spreading_factor)
{
 8010de4:	b590      	push	{r4, r7, lr}
 8010de6:	b08d      	sub	sp, #52	; 0x34
 8010de8:	af0a      	add	r7, sp, #40	; 0x28
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
	Radio.SetTxConfig(MODEM_LORA, tx_output_power, 0, LORA_BANDWIDTH,
 8010dee:	4b1f      	ldr	r3, [pc, #124]	; (8010e6c <SubghzApp_SetLoRaConfig+0x88>)
 8010df0:	69dc      	ldr	r4, [r3, #28]
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	b259      	sxtb	r1, r3
 8010df6:	683b      	ldr	r3, [r7, #0]
 8010df8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8010dfc:	9208      	str	r2, [sp, #32]
 8010dfe:	2200      	movs	r2, #0
 8010e00:	9207      	str	r2, [sp, #28]
 8010e02:	2200      	movs	r2, #0
 8010e04:	9206      	str	r2, [sp, #24]
 8010e06:	2200      	movs	r2, #0
 8010e08:	9205      	str	r2, [sp, #20]
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	9204      	str	r2, [sp, #16]
 8010e0e:	2200      	movs	r2, #0
 8010e10:	9203      	str	r2, [sp, #12]
 8010e12:	2208      	movs	r2, #8
 8010e14:	9202      	str	r2, [sp, #8]
 8010e16:	2201      	movs	r2, #1
 8010e18:	9201      	str	r2, [sp, #4]
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	2300      	movs	r3, #0
 8010e1e:	2200      	movs	r2, #0
 8010e20:	2001      	movs	r0, #1
 8010e22:	47a0      	blx	r4
			spreading_factor, LORA_CODINGRATE,
			LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
			true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

	Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, spreading_factor,
 8010e24:	4b11      	ldr	r3, [pc, #68]	; (8010e6c <SubghzApp_SetLoRaConfig+0x88>)
 8010e26:	699c      	ldr	r4, [r3, #24]
 8010e28:	683a      	ldr	r2, [r7, #0]
 8010e2a:	2301      	movs	r3, #1
 8010e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8010e2e:	2300      	movs	r3, #0
 8010e30:	9308      	str	r3, [sp, #32]
 8010e32:	2300      	movs	r3, #0
 8010e34:	9307      	str	r3, [sp, #28]
 8010e36:	2300      	movs	r3, #0
 8010e38:	9306      	str	r3, [sp, #24]
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	9305      	str	r3, [sp, #20]
 8010e3e:	2300      	movs	r3, #0
 8010e40:	9304      	str	r3, [sp, #16]
 8010e42:	2300      	movs	r3, #0
 8010e44:	9303      	str	r3, [sp, #12]
 8010e46:	2305      	movs	r3, #5
 8010e48:	9302      	str	r3, [sp, #8]
 8010e4a:	2308      	movs	r3, #8
 8010e4c:	9301      	str	r3, [sp, #4]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	9300      	str	r3, [sp, #0]
 8010e52:	2301      	movs	r3, #1
 8010e54:	2100      	movs	r1, #0
 8010e56:	2001      	movs	r0, #1
 8010e58:	47a0      	blx	r4
			LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
			LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
			0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

	Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 8010e5a:	4b04      	ldr	r3, [pc, #16]	; (8010e6c <SubghzApp_SetLoRaConfig+0x88>)
 8010e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e5e:	21ff      	movs	r1, #255	; 0xff
 8010e60:	2001      	movs	r0, #1
 8010e62:	4798      	blx	r3
}
 8010e64:	bf00      	nop
 8010e66:	370c      	adds	r7, #12
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd90      	pop	{r4, r7, pc}
 8010e6c:	08012c34 	.word	0x08012c34

08010e70 <OnTxDone>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void OnTxDone(void)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	debug_print("Tx done callback\r\n");
 8010e74:	4802      	ldr	r0, [pc, #8]	; (8010e80 <OnTxDone+0x10>)
 8010e76:	f7f0 fb1b 	bl	80014b0 <debug_print>
  /* USER CODE END OnTxDone */
}
 8010e7a:	bf00      	nop
 8010e7c:	bd80      	pop	{r7, pc}
 8010e7e:	bf00      	nop
 8010e80:	080129d4 	.word	0x080129d4

08010e84 <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	4608      	mov	r0, r1
 8010e8e:	4611      	mov	r1, r2
 8010e90:	461a      	mov	r2, r3
 8010e92:	4603      	mov	r3, r0
 8010e94:	817b      	strh	r3, [r7, #10]
 8010e96:	460b      	mov	r3, r1
 8010e98:	813b      	strh	r3, [r7, #8]
 8010e9a:	4613      	mov	r3, r2
 8010e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	//debug_print("Rx done callback\r\n");
	decode_print_packet(payload, size, rssi, LoraSnr_FskCfo);
 8010e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010ea2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8010ea6:	8979      	ldrh	r1, [r7, #10]
 8010ea8:	68f8      	ldr	r0, [r7, #12]
 8010eaa:	f7f0 fb7b 	bl	80015a4 <decode_print_packet>
  /* USER CODE END OnRxDone */
}
 8010eae:	bf00      	nop
 8010eb0:	3710      	adds	r7, #16
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
	...

08010eb8 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	debug_print("Tx timeout callback\r\n");
 8010ebc:	4802      	ldr	r0, [pc, #8]	; (8010ec8 <OnTxTimeout+0x10>)
 8010ebe:	f7f0 faf7 	bl	80014b0 <debug_print>
  /* USER CODE END OnTxTimeout */
}
 8010ec2:	bf00      	nop
 8010ec4:	bd80      	pop	{r7, pc}
 8010ec6:	bf00      	nop
 8010ec8:	080129e8 	.word	0x080129e8

08010ecc <OnRxTimeout>:

static void OnRxTimeout(void)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	debug_print("Rx timeout callback\r\n");
 8010ed0:	4802      	ldr	r0, [pc, #8]	; (8010edc <OnRxTimeout+0x10>)
 8010ed2:	f7f0 faed 	bl	80014b0 <debug_print>
  /* USER CODE END OnRxTimeout */
}
 8010ed6:	bf00      	nop
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	08012a00 	.word	0x08012a00

08010ee0 <OnRxError>:

static void OnRxError(void)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	debug_print("Rx error callback\r\n");
 8010ee4:	4802      	ldr	r0, [pc, #8]	; (8010ef0 <OnRxError+0x10>)
 8010ee6:	f7f0 fae3 	bl	80014b0 <debug_print>
  /* USER CODE END OnRxError */
}
 8010eea:	bf00      	nop
 8010eec:	bd80      	pop	{r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	08012a18 	.word	0x08012a18

08010ef4 <LL_AHB2_GRP1_EnableClock>:
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b085      	sub	sp, #20
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8010efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010f00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	4313      	orrs	r3, r2
 8010f0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8010f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010f10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	4013      	ands	r3, r2
 8010f16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010f18:	68fb      	ldr	r3, [r7, #12]
}
 8010f1a:	bf00      	nop
 8010f1c:	3714      	adds	r7, #20
 8010f1e:	46bd      	mov	sp, r7
 8010f20:	bc80      	pop	{r7}
 8010f22:	4770      	bx	lr

08010f24 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b086      	sub	sp, #24
 8010f28:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
#else
  /* 2/ Or implement RBI_Init here */
  int32_t retcode = 0;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN RBI_Init_2 */
  //#warning user to provide its board code or to call his board driver functions
  GPIO_InitTypeDef gpio_init_structure = {0};
 8010f2e:	463b      	mov	r3, r7
 8010f30:	2200      	movs	r2, #0
 8010f32:	601a      	str	r2, [r3, #0]
 8010f34:	605a      	str	r2, [r3, #4]
 8010f36:	609a      	str	r2, [r3, #8]
 8010f38:	60da      	str	r2, [r3, #12]
 8010f3a:	611a      	str	r2, [r3, #16]

  //Enable the Radio Switch Clock
  RFIO_SEL_GPIO_CLK_ENABLE();
 8010f3c:	2004      	movs	r0, #4
 8010f3e:	f7ff ffd9 	bl	8010ef4 <LL_AHB2_GRP1_EnableClock>
  //Configure the Radio Switch pin
  gpio_init_structure.Pin   = RFIO_SEL_PIN;
 8010f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010f46:	603b      	str	r3, [r7, #0]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f50:	2303      	movs	r3, #3
 8010f52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(RFIO_SEL_GPIO_PORT, &gpio_init_structure);
 8010f54:	463b      	mov	r3, r7
 8010f56:	4619      	mov	r1, r3
 8010f58:	4806      	ldr	r0, [pc, #24]	; (8010f74 <RBI_Init+0x50>)
 8010f5a:	f7f3 f8eb 	bl	8004134 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_RESET);
 8010f5e:	2200      	movs	r2, #0
 8010f60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010f64:	4803      	ldr	r0, [pc, #12]	; (8010f74 <RBI_Init+0x50>)
 8010f66:	f7f3 fb2a 	bl	80045be <HAL_GPIO_WritePin>
  /* USER CODE END RBI_Init_2 */
  return retcode;
 8010f6a:	697b      	ldr	r3, [r7, #20]
#endif  /* USE_BSP_DRIVER  */
}
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	3718      	adds	r7, #24
 8010f70:	46bd      	mov	sp, r7
 8010f72:	bd80      	pop	{r7, pc}
 8010f74:	48000800 	.word	0x48000800

08010f78 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b084      	sub	sp, #16
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	4603      	mov	r3, r0
 8010f80:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#else
  /* 2/ Or implement RBI_ConfigRFSwitch here */
  int32_t retcode = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
//#warning user to provide its board code or to call his board driver functions

  // notes from brock : with one switch, only RX or TX => OFF=RX, HP=LP
  // quand RFIO_SEL = 0, RX ; si RFIO_SEL = 1, TX
  switch (Config)
 8010f86:	79fb      	ldrb	r3, [r7, #7]
 8010f88:	2b03      	cmp	r3, #3
 8010f8a:	d827      	bhi.n	8010fdc <RBI_ConfigRFSwitch+0x64>
 8010f8c:	a201      	add	r2, pc, #4	; (adr r2, 8010f94 <RBI_ConfigRFSwitch+0x1c>)
 8010f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f92:	bf00      	nop
 8010f94:	08010fa5 	.word	0x08010fa5
 8010f98:	08010fb3 	.word	0x08010fb3
 8010f9c:	08010fc1 	.word	0x08010fc1
 8010fa0:	08010fcf 	.word	0x08010fcf
  {
	case RBI_SWITCH_OFF:
	{
	  /* Turn off switch */
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_RESET);
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010faa:	480f      	ldr	r0, [pc, #60]	; (8010fe8 <RBI_ConfigRFSwitch+0x70>)
 8010fac:	f7f3 fb07 	bl	80045be <HAL_GPIO_WritePin>
	  break;
 8010fb0:	e015      	b.n	8010fde <RBI_ConfigRFSwitch+0x66>
	}
	case RBI_SWITCH_RX:
	{
	  /*Turns On in Rx Mode the RF Switch */
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_RESET);
 8010fb2:	2200      	movs	r2, #0
 8010fb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010fb8:	480b      	ldr	r0, [pc, #44]	; (8010fe8 <RBI_ConfigRFSwitch+0x70>)
 8010fba:	f7f3 fb00 	bl	80045be <HAL_GPIO_WritePin>
	  break;
 8010fbe:	e00e      	b.n	8010fde <RBI_ConfigRFSwitch+0x66>
	}
	case RBI_SWITCH_RFO_LP:
	{
	  /*Turns On in Tx Low Power the RF Switch */
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_SET);
 8010fc0:	2201      	movs	r2, #1
 8010fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010fc6:	4808      	ldr	r0, [pc, #32]	; (8010fe8 <RBI_ConfigRFSwitch+0x70>)
 8010fc8:	f7f3 faf9 	bl	80045be <HAL_GPIO_WritePin>
	  break;
 8010fcc:	e007      	b.n	8010fde <RBI_ConfigRFSwitch+0x66>
	}
	case RBI_SWITCH_RFO_HP:
	{
	  /*Turns On in Tx High Power the RF Switch */
		  HAL_GPIO_WritePin(RFIO_SEL_GPIO_PORT, RFIO_SEL_PIN, GPIO_PIN_SET);
 8010fce:	2201      	movs	r2, #1
 8010fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010fd4:	4804      	ldr	r0, [pc, #16]	; (8010fe8 <RBI_ConfigRFSwitch+0x70>)
 8010fd6:	f7f3 faf2 	bl	80045be <HAL_GPIO_WritePin>
	  break;
 8010fda:	e000      	b.n	8010fde <RBI_ConfigRFSwitch+0x66>
	}
	default:
	  break;
 8010fdc:	bf00      	nop
  }
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
 8010fde:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER */
}
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	3710      	adds	r7, #16
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	bd80      	pop	{r7, pc}
 8010fe8:	48000800 	.word	0x48000800

08010fec <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8010fec:	b480      	push	{r7}
 8010fee:	b083      	sub	sp, #12
 8010ff0:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
#else
  /* 2/ Or implement RBI_GetTxConfig here */
  int32_t retcode = RBI_CONF_RFO;
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
//#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
 8010ff6:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER */
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	370c      	adds	r7, #12
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bc80      	pop	{r7}
 8011000:	4770      	bx	lr

08011002 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8011002:	b480      	push	{r7}
 8011004:	b083      	sub	sp, #12
 8011006:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
#else
  /* 2/ Or implement RBI_IsTCXO here */
  int32_t retcode = IS_TCXO_SUPPORTED;
 8011008:	2300      	movs	r3, #0
 801100a:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsTCXO_2 */
//#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
 801100c:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	bc80      	pop	{r7}
 8011016:	4770      	bx	lr

08011018 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
#else
  /* 2/ Or implement RBI_IsDCDC here */
  int32_t retcode = IS_DCDC_SUPPORTED;
 801101e:	2301      	movs	r3, #1
 8011020:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN RBI_IsDCDC_2 */
////#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
 8011022:	687b      	ldr	r3, [r7, #4]
#endif  /* USE_BSP_DRIVER  */
}
 8011024:	4618      	mov	r0, r3
 8011026:	370c      	adds	r7, #12
 8011028:	46bd      	mov	sp, r7
 801102a:	bc80      	pop	{r7}
 801102c:	4770      	bx	lr

0801102e <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 801102e:	b480      	push	{r7}
 8011030:	b085      	sub	sp, #20
 8011032:	af00      	add	r7, sp, #0
 8011034:	4603      	mov	r3, r0
 8011036:	71fb      	strb	r3, [r7, #7]
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
#else
  /* 2/ Or implement RBI_RBI_GetRFOMaxPowerConfig here */
  int32_t ret = 0;
 8011038:	2300      	movs	r3, #0
 801103a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN RBI_GetRFOMaxPowerConfig_2 */
//#warning user to provide its board code or to call his board driver functions
  if (Config == RBI_RFO_LP_MAXPOWER)
 801103c:	79fb      	ldrb	r3, [r7, #7]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d102      	bne.n	8011048 <RBI_GetRFOMaxPowerConfig+0x1a>
  {
    ret = 15; /*dBm*/
 8011042:	230f      	movs	r3, #15
 8011044:	60fb      	str	r3, [r7, #12]
 8011046:	e001      	b.n	801104c <RBI_GetRFOMaxPowerConfig+0x1e>
  }
  else
  {
    ret = 22; /*dBm*/
 8011048:	2316      	movs	r3, #22
 801104a:	60fb      	str	r3, [r7, #12]
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
 801104c:	68fb      	ldr	r3, [r7, #12]
#endif  /* USE_BSP_DRIVER  */
}
 801104e:	4618      	mov	r0, r3
 8011050:	3714      	adds	r7, #20
 8011052:	46bd      	mov	sp, r7
 8011054:	bc80      	pop	{r7}
 8011056:	4770      	bx	lr

08011058 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011058:	b480      	push	{r7}
 801105a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801105c:	4b04      	ldr	r3, [pc, #16]	; (8011070 <UTIL_LPM_Init+0x18>)
 801105e:	2200      	movs	r2, #0
 8011060:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011062:	4b04      	ldr	r3, [pc, #16]	; (8011074 <UTIL_LPM_Init+0x1c>)
 8011064:	2200      	movs	r2, #0
 8011066:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011068:	bf00      	nop
 801106a:	46bd      	mov	sp, r7
 801106c:	bc80      	pop	{r7}
 801106e:	4770      	bx	lr
 8011070:	200067e4 	.word	0x200067e4
 8011074:	200067e8 	.word	0x200067e8

08011078 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011078:	b480      	push	{r7}
 801107a:	b087      	sub	sp, #28
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	460b      	mov	r3, r1
 8011082:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011084:	f3ef 8310 	mrs	r3, PRIMASK
 8011088:	613b      	str	r3, [r7, #16]
  return(result);
 801108a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801108c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801108e:	b672      	cpsid	i
}
 8011090:	bf00      	nop
  
  switch( state )
 8011092:	78fb      	ldrb	r3, [r7, #3]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d008      	beq.n	80110aa <UTIL_LPM_SetStopMode+0x32>
 8011098:	2b01      	cmp	r3, #1
 801109a:	d10e      	bne.n	80110ba <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801109c:	4b0d      	ldr	r3, [pc, #52]	; (80110d4 <UTIL_LPM_SetStopMode+0x5c>)
 801109e:	681a      	ldr	r2, [r3, #0]
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	4313      	orrs	r3, r2
 80110a4:	4a0b      	ldr	r2, [pc, #44]	; (80110d4 <UTIL_LPM_SetStopMode+0x5c>)
 80110a6:	6013      	str	r3, [r2, #0]
      break;
 80110a8:	e008      	b.n	80110bc <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	43da      	mvns	r2, r3
 80110ae:	4b09      	ldr	r3, [pc, #36]	; (80110d4 <UTIL_LPM_SetStopMode+0x5c>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	4013      	ands	r3, r2
 80110b4:	4a07      	ldr	r2, [pc, #28]	; (80110d4 <UTIL_LPM_SetStopMode+0x5c>)
 80110b6:	6013      	str	r3, [r2, #0]
      break;
 80110b8:	e000      	b.n	80110bc <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 80110ba:	bf00      	nop
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	f383 8810 	msr	PRIMASK, r3
}
 80110c6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80110c8:	bf00      	nop
 80110ca:	371c      	adds	r7, #28
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bc80      	pop	{r7}
 80110d0:	4770      	bx	lr
 80110d2:	bf00      	nop
 80110d4:	200067e4 	.word	0x200067e4

080110d8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 80110d8:	b480      	push	{r7}
 80110da:	b087      	sub	sp, #28
 80110dc:	af00      	add	r7, sp, #0
 80110de:	6078      	str	r0, [r7, #4]
 80110e0:	460b      	mov	r3, r1
 80110e2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80110e4:	f3ef 8310 	mrs	r3, PRIMASK
 80110e8:	613b      	str	r3, [r7, #16]
  return(result);
 80110ea:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80110ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80110ee:	b672      	cpsid	i
}
 80110f0:	bf00      	nop
  
  switch(state)
 80110f2:	78fb      	ldrb	r3, [r7, #3]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d008      	beq.n	801110a <UTIL_LPM_SetOffMode+0x32>
 80110f8:	2b01      	cmp	r3, #1
 80110fa:	d10e      	bne.n	801111a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80110fc:	4b0d      	ldr	r3, [pc, #52]	; (8011134 <UTIL_LPM_SetOffMode+0x5c>)
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	4313      	orrs	r3, r2
 8011104:	4a0b      	ldr	r2, [pc, #44]	; (8011134 <UTIL_LPM_SetOffMode+0x5c>)
 8011106:	6013      	str	r3, [r2, #0]
      break;
 8011108:	e008      	b.n	801111c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	43da      	mvns	r2, r3
 801110e:	4b09      	ldr	r3, [pc, #36]	; (8011134 <UTIL_LPM_SetOffMode+0x5c>)
 8011110:	681b      	ldr	r3, [r3, #0]
 8011112:	4013      	ands	r3, r2
 8011114:	4a07      	ldr	r2, [pc, #28]	; (8011134 <UTIL_LPM_SetOffMode+0x5c>)
 8011116:	6013      	str	r3, [r2, #0]
      break;
 8011118:	e000      	b.n	801111c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801111a:	bf00      	nop
 801111c:	697b      	ldr	r3, [r7, #20]
 801111e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	f383 8810 	msr	PRIMASK, r3
}
 8011126:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011128:	bf00      	nop
 801112a:	371c      	adds	r7, #28
 801112c:	46bd      	mov	sp, r7
 801112e:	bc80      	pop	{r7}
 8011130:	4770      	bx	lr
 8011132:	bf00      	nop
 8011134:	200067e8 	.word	0x200067e8

08011138 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b084      	sub	sp, #16
 801113c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801113e:	f3ef 8310 	mrs	r3, PRIMASK
 8011142:	60bb      	str	r3, [r7, #8]
  return(result);
 8011144:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 8011146:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8011148:	b672      	cpsid	i
}
 801114a:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801114c:	4b12      	ldr	r3, [pc, #72]	; (8011198 <UTIL_LPM_EnterLowPower+0x60>)
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d006      	beq.n	8011162 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8011154:	4b11      	ldr	r3, [pc, #68]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801115a:	4b10      	ldr	r3, [pc, #64]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 801115c:	685b      	ldr	r3, [r3, #4]
 801115e:	4798      	blx	r3
 8011160:	e010      	b.n	8011184 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8011162:	4b0f      	ldr	r3, [pc, #60]	; (80111a0 <UTIL_LPM_EnterLowPower+0x68>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d006      	beq.n	8011178 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801116a:	4b0c      	ldr	r3, [pc, #48]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 801116c:	689b      	ldr	r3, [r3, #8]
 801116e:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8011170:	4b0a      	ldr	r3, [pc, #40]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	4798      	blx	r3
 8011176:	e005      	b.n	8011184 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 8011178:	4b08      	ldr	r3, [pc, #32]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 801117a:	691b      	ldr	r3, [r3, #16]
 801117c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801117e:	4b07      	ldr	r3, [pc, #28]	; (801119c <UTIL_LPM_EnterLowPower+0x64>)
 8011180:	695b      	ldr	r3, [r3, #20]
 8011182:	4798      	blx	r3
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	f383 8810 	msr	PRIMASK, r3
}
 801118e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8011190:	bf00      	nop
 8011192:	3710      	adds	r7, #16
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}
 8011198:	200067e4 	.word	0x200067e4
 801119c:	08012a84 	.word	0x08012a84
 80111a0:	200067e8 	.word	0x200067e8

080111a4 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b087      	sub	sp, #28
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	4613      	mov	r3, r2
 80111b0:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	613b      	str	r3, [r7, #16]

  while( size-- )
 80111ba:	e007      	b.n	80111cc <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 80111bc:	693a      	ldr	r2, [r7, #16]
 80111be:	1c53      	adds	r3, r2, #1
 80111c0:	613b      	str	r3, [r7, #16]
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	1c59      	adds	r1, r3, #1
 80111c6:	6179      	str	r1, [r7, #20]
 80111c8:	7812      	ldrb	r2, [r2, #0]
 80111ca:	701a      	strb	r2, [r3, #0]
  while( size-- )
 80111cc:	88fb      	ldrh	r3, [r7, #6]
 80111ce:	1e5a      	subs	r2, r3, #1
 80111d0:	80fa      	strh	r2, [r7, #6]
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1f2      	bne.n	80111bc <UTIL_MEM_cpy_8+0x18>
    }
}
 80111d6:	bf00      	nop
 80111d8:	bf00      	nop
 80111da:	371c      	adds	r7, #28
 80111dc:	46bd      	mov	sp, r7
 80111de:	bc80      	pop	{r7}
 80111e0:	4770      	bx	lr

080111e2 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 80111e2:	b480      	push	{r7}
 80111e4:	b085      	sub	sp, #20
 80111e6:	af00      	add	r7, sp, #0
 80111e8:	6078      	str	r0, [r7, #4]
 80111ea:	460b      	mov	r3, r1
 80111ec:	70fb      	strb	r3, [r7, #3]
 80111ee:	4613      	mov	r3, r2
 80111f0:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	60fb      	str	r3, [r7, #12]
  while( size-- )
 80111f6:	e004      	b.n	8011202 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	1c5a      	adds	r2, r3, #1
 80111fc:	60fa      	str	r2, [r7, #12]
 80111fe:	78fa      	ldrb	r2, [r7, #3]
 8011200:	701a      	strb	r2, [r3, #0]
  while( size-- )
 8011202:	883b      	ldrh	r3, [r7, #0]
 8011204:	1e5a      	subs	r2, r3, #1
 8011206:	803a      	strh	r2, [r7, #0]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d1f5      	bne.n	80111f8 <UTIL_MEM_set_8+0x16>
  }
}
 801120c:	bf00      	nop
 801120e:	bf00      	nop
 8011210:	3714      	adds	r7, #20
 8011212:	46bd      	mov	sp, r7
 8011214:	bc80      	pop	{r7}
 8011216:	4770      	bx	lr

08011218 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8011218:	b082      	sub	sp, #8
 801121a:	b480      	push	{r7}
 801121c:	b087      	sub	sp, #28
 801121e:	af00      	add	r7, sp, #0
 8011220:	60f8      	str	r0, [r7, #12]
 8011222:	1d38      	adds	r0, r7, #4
 8011224:	e880 0006 	stmia.w	r0, {r1, r2}
 8011228:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801122a:	2300      	movs	r3, #0
 801122c:	613b      	str	r3, [r7, #16]
 801122e:	2300      	movs	r3, #0
 8011230:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 8011232:	687a      	ldr	r2, [r7, #4]
 8011234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011236:	4413      	add	r3, r2
 8011238:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801123a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801123e:	b29a      	uxth	r2, r3
 8011240:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8011244:	b29b      	uxth	r3, r3
 8011246:	4413      	add	r3, r2
 8011248:	b29b      	uxth	r3, r3
 801124a:	b21b      	sxth	r3, r3
 801124c:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801124e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011256:	db0a      	blt.n	801126e <SysTimeAdd+0x56>
  {
    c.Seconds++;
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	3301      	adds	r3, #1
 801125c:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801125e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8011262:	b29b      	uxth	r3, r3
 8011264:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8011268:	b29b      	uxth	r3, r3
 801126a:	b21b      	sxth	r3, r3
 801126c:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801126e:	68fb      	ldr	r3, [r7, #12]
 8011270:	461a      	mov	r2, r3
 8011272:	f107 0310 	add.w	r3, r7, #16
 8011276:	e893 0003 	ldmia.w	r3, {r0, r1}
 801127a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801127e:	68f8      	ldr	r0, [r7, #12]
 8011280:	371c      	adds	r7, #28
 8011282:	46bd      	mov	sp, r7
 8011284:	bc80      	pop	{r7}
 8011286:	b002      	add	sp, #8
 8011288:	4770      	bx	lr
	...

0801128c <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b08a      	sub	sp, #40	; 0x28
 8011290:	af02      	add	r7, sp, #8
 8011292:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8011294:	2300      	movs	r3, #0
 8011296:	61bb      	str	r3, [r7, #24]
 8011298:	2300      	movs	r3, #0
 801129a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801129c:	2300      	movs	r3, #0
 801129e:	613b      	str	r3, [r7, #16]
 80112a0:	2300      	movs	r3, #0
 80112a2:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80112a4:	4b14      	ldr	r3, [pc, #80]	; (80112f8 <SysTimeGet+0x6c>)
 80112a6:	691b      	ldr	r3, [r3, #16]
 80112a8:	f107 0218 	add.w	r2, r7, #24
 80112ac:	3204      	adds	r2, #4
 80112ae:	4610      	mov	r0, r2
 80112b0:	4798      	blx	r3
 80112b2:	4603      	mov	r3, r0
 80112b4:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80112b6:	4b10      	ldr	r3, [pc, #64]	; (80112f8 <SysTimeGet+0x6c>)
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	4798      	blx	r3
 80112bc:	4603      	mov	r3, r0
 80112be:	b21b      	sxth	r3, r3
 80112c0:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80112c2:	4b0d      	ldr	r3, [pc, #52]	; (80112f8 <SysTimeGet+0x6c>)
 80112c4:	685b      	ldr	r3, [r3, #4]
 80112c6:	4798      	blx	r3
 80112c8:	4603      	mov	r3, r0
 80112ca:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80112cc:	f107 0010 	add.w	r0, r7, #16
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	f107 0208 	add.w	r2, r7, #8
 80112da:	ca06      	ldmia	r2, {r1, r2}
 80112dc:	f7ff ff9c 	bl	8011218 <SysTimeAdd>

  return sysTime;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	461a      	mov	r2, r3
 80112e4:	f107 0310 	add.w	r3, r7, #16
 80112e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80112ec:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	3720      	adds	r7, #32
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	08012b68 	.word	0x08012b68

080112fc <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 80112fc:	b480      	push	{r7}
 80112fe:	b085      	sub	sp, #20
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  int i = 0;
 8011304:	2300      	movs	r3, #0
 8011306:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8011308:	e00e      	b.n	8011328 <ee_skip_atoi+0x2c>
 801130a:	68fa      	ldr	r2, [r7, #12]
 801130c:	4613      	mov	r3, r2
 801130e:	009b      	lsls	r3, r3, #2
 8011310:	4413      	add	r3, r2
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	4618      	mov	r0, r3
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	681b      	ldr	r3, [r3, #0]
 801131a:	1c59      	adds	r1, r3, #1
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	6011      	str	r1, [r2, #0]
 8011320:	781b      	ldrb	r3, [r3, #0]
 8011322:	4403      	add	r3, r0
 8011324:	3b30      	subs	r3, #48	; 0x30
 8011326:	60fb      	str	r3, [r7, #12]
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	681b      	ldr	r3, [r3, #0]
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	2b2f      	cmp	r3, #47	; 0x2f
 8011330:	d904      	bls.n	801133c <ee_skip_atoi+0x40>
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	781b      	ldrb	r3, [r3, #0]
 8011338:	2b39      	cmp	r3, #57	; 0x39
 801133a:	d9e6      	bls.n	801130a <ee_skip_atoi+0xe>
  return i;
 801133c:	68fb      	ldr	r3, [r7, #12]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3714      	adds	r7, #20
 8011342:	46bd      	mov	sp, r7
 8011344:	bc80      	pop	{r7}
 8011346:	4770      	bx	lr

08011348 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8011348:	b480      	push	{r7}
 801134a:	b099      	sub	sp, #100	; 0x64
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 8011356:	4b71      	ldr	r3, [pc, #452]	; (801151c <ee_number+0x1d4>)
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801135c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801135e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011362:	2b00      	cmp	r3, #0
 8011364:	d002      	beq.n	801136c <ee_number+0x24>
 8011366:	4b6e      	ldr	r3, [pc, #440]	; (8011520 <ee_number+0x1d8>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	2b01      	cmp	r3, #1
 8011370:	dd02      	ble.n	8011378 <ee_number+0x30>
 8011372:	683b      	ldr	r3, [r7, #0]
 8011374:	2b24      	cmp	r3, #36	; 0x24
 8011376:	dd01      	ble.n	801137c <ee_number+0x34>
 8011378:	2300      	movs	r3, #0
 801137a:	e0ca      	b.n	8011512 <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801137c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801137e:	f003 0301 	and.w	r3, r3, #1
 8011382:	2b00      	cmp	r3, #0
 8011384:	d001      	beq.n	801138a <ee_number+0x42>
 8011386:	2330      	movs	r3, #48	; 0x30
 8011388:	e000      	b.n	801138c <ee_number+0x44>
 801138a:	2320      	movs	r3, #32
 801138c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 8011390:	2300      	movs	r3, #0
 8011392:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 8011396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011398:	f003 0302 	and.w	r3, r3, #2
 801139c:	2b00      	cmp	r3, #0
 801139e:	d00b      	beq.n	80113b8 <ee_number+0x70>
  {
    if (num < 0)
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	da08      	bge.n	80113b8 <ee_number+0x70>
    {
      sign = '-';
 80113a6:	232d      	movs	r3, #45	; 0x2d
 80113a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	425b      	negs	r3, r3
 80113b0:	607b      	str	r3, [r7, #4]
      size--;
 80113b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80113b4:	3b01      	subs	r3, #1
 80113b6:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 80113b8:	2300      	movs	r3, #0
 80113ba:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d11e      	bne.n	8011400 <ee_number+0xb8>
    tmp[i++] = '0';
 80113c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113c4:	1c5a      	adds	r2, r3, #1
 80113c6:	657a      	str	r2, [r7, #84]	; 0x54
 80113c8:	3360      	adds	r3, #96	; 0x60
 80113ca:	443b      	add	r3, r7
 80113cc:	2230      	movs	r2, #48	; 0x30
 80113ce:	f803 2c50 	strb.w	r2, [r3, #-80]
 80113d2:	e018      	b.n	8011406 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80113dc:	fb01 f202 	mul.w	r2, r1, r2
 80113e0:	1a9b      	subs	r3, r3, r2
 80113e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80113e4:	441a      	add	r2, r3
 80113e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113e8:	1c59      	adds	r1, r3, #1
 80113ea:	6579      	str	r1, [r7, #84]	; 0x54
 80113ec:	7812      	ldrb	r2, [r2, #0]
 80113ee:	3360      	adds	r3, #96	; 0x60
 80113f0:	443b      	add	r3, r7
 80113f2:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 80113f6:	687a      	ldr	r2, [r7, #4]
 80113f8:	683b      	ldr	r3, [r7, #0]
 80113fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80113fe:	607b      	str	r3, [r7, #4]
    while (num != 0)
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d1e6      	bne.n	80113d4 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 8011406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801140a:	429a      	cmp	r2, r3
 801140c:	dd01      	ble.n	8011412 <ee_number+0xca>
 801140e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011410:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 8011412:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011416:	1ad3      	subs	r3, r2, r3
 8011418:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801141a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801141c:	f003 0301 	and.w	r3, r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	d112      	bne.n	801144a <ee_number+0x102>
 8011424:	e00c      	b.n	8011440 <ee_number+0xf8>
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	60fa      	str	r2, [r7, #12]
 801142c:	2220      	movs	r2, #32
 801142e:	701a      	strb	r2, [r3, #0]
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	3b01      	subs	r3, #1
 8011434:	60bb      	str	r3, [r7, #8]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d101      	bne.n	8011440 <ee_number+0xf8>
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	e068      	b.n	8011512 <ee_number+0x1ca>
 8011440:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011442:	1e5a      	subs	r2, r3, #1
 8011444:	66ba      	str	r2, [r7, #104]	; 0x68
 8011446:	2b00      	cmp	r3, #0
 8011448:	dced      	bgt.n	8011426 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801144a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801144e:	2b00      	cmp	r3, #0
 8011450:	d01b      	beq.n	801148a <ee_number+0x142>
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	1c5a      	adds	r2, r3, #1
 8011456:	60fa      	str	r2, [r7, #12]
 8011458:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 801145c:	701a      	strb	r2, [r3, #0]
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	3b01      	subs	r3, #1
 8011462:	60bb      	str	r3, [r7, #8]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d10f      	bne.n	801148a <ee_number+0x142>
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	e051      	b.n	8011512 <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	1c5a      	adds	r2, r3, #1
 8011472:	60fa      	str	r2, [r7, #12]
 8011474:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8011478:	701a      	strb	r2, [r3, #0]
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	3b01      	subs	r3, #1
 801147e:	60bb      	str	r3, [r7, #8]
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <ee_number+0x142>
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	e043      	b.n	8011512 <ee_number+0x1ca>
 801148a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801148c:	1e5a      	subs	r2, r3, #1
 801148e:	66ba      	str	r2, [r7, #104]	; 0x68
 8011490:	2b00      	cmp	r3, #0
 8011492:	dcec      	bgt.n	801146e <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 8011494:	e00c      	b.n	80114b0 <ee_number+0x168>
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	1c5a      	adds	r2, r3, #1
 801149a:	60fa      	str	r2, [r7, #12]
 801149c:	2230      	movs	r2, #48	; 0x30
 801149e:	701a      	strb	r2, [r3, #0]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	3b01      	subs	r3, #1
 80114a4:	60bb      	str	r3, [r7, #8]
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d101      	bne.n	80114b0 <ee_number+0x168>
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	e030      	b.n	8011512 <ee_number+0x1ca>
 80114b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80114b2:	1e5a      	subs	r2, r3, #1
 80114b4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80114b6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114b8:	429a      	cmp	r2, r3
 80114ba:	dbec      	blt.n	8011496 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80114bc:	e010      	b.n	80114e0 <ee_number+0x198>
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	1c5a      	adds	r2, r3, #1
 80114c2:	60fa      	str	r2, [r7, #12]
 80114c4:	f107 0110 	add.w	r1, r7, #16
 80114c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114ca:	440a      	add	r2, r1
 80114cc:	7812      	ldrb	r2, [r2, #0]
 80114ce:	701a      	strb	r2, [r3, #0]
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	3b01      	subs	r3, #1
 80114d4:	60bb      	str	r3, [r7, #8]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d101      	bne.n	80114e0 <ee_number+0x198>
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	e018      	b.n	8011512 <ee_number+0x1ca>
 80114e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114e2:	1e5a      	subs	r2, r3, #1
 80114e4:	657a      	str	r2, [r7, #84]	; 0x54
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	dce9      	bgt.n	80114be <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 80114ea:	e00c      	b.n	8011506 <ee_number+0x1be>
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	1c5a      	adds	r2, r3, #1
 80114f0:	60fa      	str	r2, [r7, #12]
 80114f2:	2220      	movs	r2, #32
 80114f4:	701a      	strb	r2, [r3, #0]
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	3b01      	subs	r3, #1
 80114fa:	60bb      	str	r3, [r7, #8]
 80114fc:	68bb      	ldr	r3, [r7, #8]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d101      	bne.n	8011506 <ee_number+0x1be>
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	e005      	b.n	8011512 <ee_number+0x1ca>
 8011506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011508:	1e5a      	subs	r2, r3, #1
 801150a:	66ba      	str	r2, [r7, #104]	; 0x68
 801150c:	2b00      	cmp	r3, #0
 801150e:	dced      	bgt.n	80114ec <ee_number+0x1a4>

  return str;
 8011510:	68fb      	ldr	r3, [r7, #12]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3764      	adds	r7, #100	; 0x64
 8011516:	46bd      	mov	sp, r7
 8011518:	bc80      	pop	{r7}
 801151a:	4770      	bx	lr
 801151c:	20000034 	.word	0x20000034
 8011520:	20000038 	.word	0x20000038

08011524 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b092      	sub	sp, #72	; 0x48
 8011528:	af04      	add	r7, sp, #16
 801152a:	60f8      	str	r0, [r7, #12]
 801152c:	60b9      	str	r1, [r7, #8]
 801152e:	607a      	str	r2, [r7, #4]
 8011530:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8011532:	68bb      	ldr	r3, [r7, #8]
 8011534:	2b00      	cmp	r3, #0
 8011536:	dc01      	bgt.n	801153c <tiny_vsnprintf_like+0x18>
  {
    return 0;
 8011538:	2300      	movs	r3, #0
 801153a:	e13e      	b.n	80117ba <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011540:	e128      	b.n	8011794 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 8011542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	1ad2      	subs	r2, r2, r3
 8011548:	68bb      	ldr	r3, [r7, #8]
 801154a:	3b01      	subs	r3, #1
 801154c:	429a      	cmp	r2, r3
 801154e:	f280 812e 	bge.w	80117ae <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	2b25      	cmp	r3, #37	; 0x25
 8011558:	d006      	beq.n	8011568 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801155a:	687a      	ldr	r2, [r7, #4]
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	1c59      	adds	r1, r3, #1
 8011560:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011562:	7812      	ldrb	r2, [r2, #0]
 8011564:	701a      	strb	r2, [r3, #0]
      continue;
 8011566:	e112      	b.n	801178e <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 8011568:	2300      	movs	r3, #0
 801156a:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	3301      	adds	r3, #1
 8011570:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	781b      	ldrb	r3, [r3, #0]
 8011576:	2b30      	cmp	r3, #48	; 0x30
 8011578:	d103      	bne.n	8011582 <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801157a:	6a3b      	ldr	r3, [r7, #32]
 801157c:	f043 0301 	orr.w	r3, r3, #1
 8011580:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 8011582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011586:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	781b      	ldrb	r3, [r3, #0]
 801158c:	2b2f      	cmp	r3, #47	; 0x2f
 801158e:	d908      	bls.n	80115a2 <tiny_vsnprintf_like+0x7e>
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	2b39      	cmp	r3, #57	; 0x39
 8011596:	d804      	bhi.n	80115a2 <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 8011598:	1d3b      	adds	r3, r7, #4
 801159a:	4618      	mov	r0, r3
 801159c:	f7ff feae 	bl	80112fc <ee_skip_atoi>
 80115a0:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 80115a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115a6:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 80115a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115ac:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 80115ae:	230a      	movs	r3, #10
 80115b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	781b      	ldrb	r3, [r3, #0]
 80115b6:	3b58      	subs	r3, #88	; 0x58
 80115b8:	2b20      	cmp	r3, #32
 80115ba:	f200 8094 	bhi.w	80116e6 <tiny_vsnprintf_like+0x1c2>
 80115be:	a201      	add	r2, pc, #4	; (adr r2, 80115c4 <tiny_vsnprintf_like+0xa0>)
 80115c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115c4:	080116cf 	.word	0x080116cf
 80115c8:	080116e7 	.word	0x080116e7
 80115cc:	080116e7 	.word	0x080116e7
 80115d0:	080116e7 	.word	0x080116e7
 80115d4:	080116e7 	.word	0x080116e7
 80115d8:	080116e7 	.word	0x080116e7
 80115dc:	080116e7 	.word	0x080116e7
 80115e0:	080116e7 	.word	0x080116e7
 80115e4:	080116e7 	.word	0x080116e7
 80115e8:	080116e7 	.word	0x080116e7
 80115ec:	080116e7 	.word	0x080116e7
 80115f0:	08011653 	.word	0x08011653
 80115f4:	080116dd 	.word	0x080116dd
 80115f8:	080116e7 	.word	0x080116e7
 80115fc:	080116e7 	.word	0x080116e7
 8011600:	080116e7 	.word	0x080116e7
 8011604:	080116e7 	.word	0x080116e7
 8011608:	080116dd 	.word	0x080116dd
 801160c:	080116e7 	.word	0x080116e7
 8011610:	080116e7 	.word	0x080116e7
 8011614:	080116e7 	.word	0x080116e7
 8011618:	080116e7 	.word	0x080116e7
 801161c:	080116e7 	.word	0x080116e7
 8011620:	080116e7 	.word	0x080116e7
 8011624:	080116e7 	.word	0x080116e7
 8011628:	080116e7 	.word	0x080116e7
 801162c:	080116e7 	.word	0x080116e7
 8011630:	08011673 	.word	0x08011673
 8011634:	080116e7 	.word	0x080116e7
 8011638:	08011733 	.word	0x08011733
 801163c:	080116e7 	.word	0x080116e7
 8011640:	080116e7 	.word	0x080116e7
 8011644:	080116d7 	.word	0x080116d7
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	1c5a      	adds	r2, r3, #1
 801164c:	62fa      	str	r2, [r7, #44]	; 0x2c
 801164e:	2220      	movs	r2, #32
 8011650:	701a      	strb	r2, [r3, #0]
 8011652:	69fb      	ldr	r3, [r7, #28]
 8011654:	3b01      	subs	r3, #1
 8011656:	61fb      	str	r3, [r7, #28]
 8011658:	69fb      	ldr	r3, [r7, #28]
 801165a:	2b00      	cmp	r3, #0
 801165c:	dcf4      	bgt.n	8011648 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	1d1a      	adds	r2, r3, #4
 8011662:	603a      	str	r2, [r7, #0]
 8011664:	6819      	ldr	r1, [r3, #0]
 8011666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011668:	1c5a      	adds	r2, r3, #1
 801166a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801166c:	b2ca      	uxtb	r2, r1
 801166e:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8011670:	e08d      	b.n	801178e <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	1d1a      	adds	r2, r3, #4
 8011676:	603a      	str	r2, [r7, #0]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	2b00      	cmp	r3, #0
 8011680:	d101      	bne.n	8011686 <tiny_vsnprintf_like+0x162>
 8011682:	4b50      	ldr	r3, [pc, #320]	; (80117c4 <tiny_vsnprintf_like+0x2a0>)
 8011684:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 8011686:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011688:	f7ee fd76 	bl	8000178 <strlen>
 801168c:	4603      	mov	r3, r0
 801168e:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8011690:	e004      	b.n	801169c <tiny_vsnprintf_like+0x178>
 8011692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011694:	1c5a      	adds	r2, r3, #1
 8011696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011698:	2220      	movs	r2, #32
 801169a:	701a      	strb	r2, [r3, #0]
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	1e5a      	subs	r2, r3, #1
 80116a0:	61fa      	str	r2, [r7, #28]
 80116a2:	693a      	ldr	r2, [r7, #16]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	dbf4      	blt.n	8011692 <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80116a8:	2300      	movs	r3, #0
 80116aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80116ac:	e00a      	b.n	80116c4 <tiny_vsnprintf_like+0x1a0>
 80116ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80116b0:	1c53      	adds	r3, r2, #1
 80116b2:	627b      	str	r3, [r7, #36]	; 0x24
 80116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b6:	1c59      	adds	r1, r3, #1
 80116b8:	62f9      	str	r1, [r7, #44]	; 0x2c
 80116ba:	7812      	ldrb	r2, [r2, #0]
 80116bc:	701a      	strb	r2, [r3, #0]
 80116be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116c0:	3301      	adds	r3, #1
 80116c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80116c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116c6:	693b      	ldr	r3, [r7, #16]
 80116c8:	429a      	cmp	r2, r3
 80116ca:	dbf0      	blt.n	80116ae <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 80116cc:	e05f      	b.n	801178e <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 80116ce:	6a3b      	ldr	r3, [r7, #32]
 80116d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80116d4:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 80116d6:	2310      	movs	r3, #16
 80116d8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 80116da:	e02b      	b.n	8011734 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 80116dc:	6a3b      	ldr	r3, [r7, #32]
 80116de:	f043 0302 	orr.w	r3, r3, #2
 80116e2:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 80116e4:	e025      	b.n	8011732 <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	781b      	ldrb	r3, [r3, #0]
 80116ea:	2b25      	cmp	r3, #37	; 0x25
 80116ec:	d004      	beq.n	80116f8 <tiny_vsnprintf_like+0x1d4>
 80116ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f0:	1c5a      	adds	r2, r3, #1
 80116f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80116f4:	2225      	movs	r2, #37	; 0x25
 80116f6:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 80116f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	1ad2      	subs	r2, r2, r3
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	3b01      	subs	r3, #1
 8011702:	429a      	cmp	r2, r3
 8011704:	da16      	bge.n	8011734 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	781b      	ldrb	r3, [r3, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d006      	beq.n	801171c <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801170e:	687a      	ldr	r2, [r7, #4]
 8011710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011712:	1c59      	adds	r1, r3, #1
 8011714:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011716:	7812      	ldrb	r2, [r2, #0]
 8011718:	701a      	strb	r2, [r3, #0]
 801171a:	e002      	b.n	8011722 <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	3b01      	subs	r3, #1
 8011720:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 8011722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	1ad2      	subs	r2, r2, r3
 8011728:	68bb      	ldr	r3, [r7, #8]
 801172a:	3b01      	subs	r3, #1
 801172c:	429a      	cmp	r2, r3
 801172e:	db2d      	blt.n	801178c <tiny_vsnprintf_like+0x268>
 8011730:	e000      	b.n	8011734 <tiny_vsnprintf_like+0x210>
        break;
 8011732:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	2b6c      	cmp	r3, #108	; 0x6c
 8011738:	d105      	bne.n	8011746 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	1d1a      	adds	r2, r3, #4
 801173e:	603a      	str	r2, [r7, #0]
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	637b      	str	r3, [r7, #52]	; 0x34
 8011744:	e00f      	b.n	8011766 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 8011746:	6a3b      	ldr	r3, [r7, #32]
 8011748:	f003 0302 	and.w	r3, r3, #2
 801174c:	2b00      	cmp	r3, #0
 801174e:	d005      	beq.n	801175c <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 8011750:	683b      	ldr	r3, [r7, #0]
 8011752:	1d1a      	adds	r2, r3, #4
 8011754:	603a      	str	r2, [r7, #0]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	637b      	str	r3, [r7, #52]	; 0x34
 801175a:	e004      	b.n	8011766 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	1d1a      	adds	r2, r3, #4
 8011760:	603a      	str	r2, [r7, #0]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	1e5a      	subs	r2, r3, #1
 801176a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	1acb      	subs	r3, r1, r3
 8011770:	1ad1      	subs	r1, r2, r3
 8011772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011774:	6a3b      	ldr	r3, [r7, #32]
 8011776:	9302      	str	r3, [sp, #8]
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	9301      	str	r3, [sp, #4]
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	9300      	str	r3, [sp, #0]
 8011780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011782:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011784:	f7ff fde0 	bl	8011348 <ee_number>
 8011788:	62f8      	str	r0, [r7, #44]	; 0x2c
 801178a:	e000      	b.n	801178e <tiny_vsnprintf_like+0x26a>
        continue;
 801178c:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	3301      	adds	r3, #1
 8011792:	607b      	str	r3, [r7, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	781b      	ldrb	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	f47f aed2 	bne.w	8011542 <tiny_vsnprintf_like+0x1e>
 801179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	1ad2      	subs	r2, r2, r3
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	3b01      	subs	r3, #1
 80117a8:	429a      	cmp	r2, r3
 80117aa:	f6bf aeca 	bge.w	8011542 <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	2200      	movs	r2, #0
 80117b2:	701a      	strb	r2, [r3, #0]
  return str - buf;
 80117b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	1ad3      	subs	r3, r2, r3
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3738      	adds	r7, #56	; 0x38
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	bf00      	nop
 80117c4:	08012a7c 	.word	0x08012a7c

080117c8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b090      	sub	sp, #64	; 0x40
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80117d0:	4b73      	ldr	r3, [pc, #460]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 80117d6:	4b72      	ldr	r3, [pc, #456]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 80117d8:	681a      	ldr	r2, [r3, #0]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	4013      	ands	r3, r2
 80117de:	4a70      	ldr	r2, [pc, #448]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 80117e0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80117e2:	4b70      	ldr	r3, [pc, #448]	; (80119a4 <UTIL_SEQ_Run+0x1dc>)
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 80117e8:	4b6f      	ldr	r3, [pc, #444]	; (80119a8 <UTIL_SEQ_Run+0x1e0>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 80117ee:	4b6f      	ldr	r3, [pc, #444]	; (80119ac <UTIL_SEQ_Run+0x1e4>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 80117f4:	4b6e      	ldr	r3, [pc, #440]	; (80119b0 <UTIL_SEQ_Run+0x1e8>)
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80117fa:	e08d      	b.n	8011918 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80117fc:	2300      	movs	r3, #0
 80117fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011800:	e002      	b.n	8011808 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011804:	3301      	adds	r3, #1
 8011806:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011808:	4a6a      	ldr	r2, [pc, #424]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 801180a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801180c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011812:	401a      	ands	r2, r3
 8011814:	4b62      	ldr	r3, [pc, #392]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4013      	ands	r3, r2
 801181a:	2b00      	cmp	r3, #0
 801181c:	d0f1      	beq.n	8011802 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801181e:	4a65      	ldr	r2, [pc, #404]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011822:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011828:	401a      	ands	r2, r3
 801182a:	4b5d      	ldr	r3, [pc, #372]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4013      	ands	r3, r2
 8011830:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011832:	4a60      	ldr	r2, [pc, #384]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011834:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011836:	00db      	lsls	r3, r3, #3
 8011838:	4413      	add	r3, r2
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801183e:	4013      	ands	r3, r2
 8011840:	2b00      	cmp	r3, #0
 8011842:	d106      	bne.n	8011852 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011844:	4a5b      	ldr	r2, [pc, #364]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011848:	00db      	lsls	r3, r3, #3
 801184a:	4413      	add	r3, r2
 801184c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011850:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011852:	4a58      	ldr	r2, [pc, #352]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011856:	00db      	lsls	r3, r3, #3
 8011858:	4413      	add	r3, r2
 801185a:	685a      	ldr	r2, [r3, #4]
 801185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185e:	4013      	ands	r3, r2
 8011860:	4618      	mov	r0, r3
 8011862:	f000 f8b9 	bl	80119d8 <SEQ_BitPosition>
 8011866:	4603      	mov	r3, r0
 8011868:	461a      	mov	r2, r3
 801186a:	4b53      	ldr	r3, [pc, #332]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 801186c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801186e:	4a51      	ldr	r2, [pc, #324]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011872:	00db      	lsls	r3, r3, #3
 8011874:	4413      	add	r3, r2
 8011876:	685a      	ldr	r2, [r3, #4]
 8011878:	4b4f      	ldr	r3, [pc, #316]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	2101      	movs	r1, #1
 801187e:	fa01 f303 	lsl.w	r3, r1, r3
 8011882:	43db      	mvns	r3, r3
 8011884:	401a      	ands	r2, r3
 8011886:	494b      	ldr	r1, [pc, #300]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 8011888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	440b      	add	r3, r1
 801188e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011890:	f3ef 8310 	mrs	r3, PRIMASK
 8011894:	61bb      	str	r3, [r7, #24]
  return(result);
 8011896:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011898:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801189a:	b672      	cpsid	i
}
 801189c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801189e:	4b46      	ldr	r3, [pc, #280]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	2201      	movs	r2, #1
 80118a4:	fa02 f303 	lsl.w	r3, r2, r3
 80118a8:	43da      	mvns	r2, r3
 80118aa:	4b3e      	ldr	r3, [pc, #248]	; (80119a4 <UTIL_SEQ_Run+0x1dc>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4013      	ands	r3, r2
 80118b0:	4a3c      	ldr	r2, [pc, #240]	; (80119a4 <UTIL_SEQ_Run+0x1dc>)
 80118b2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80118b4:	2301      	movs	r3, #1
 80118b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118b8:	e013      	b.n	80118e2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80118ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118bc:	3b01      	subs	r3, #1
 80118be:	4a3d      	ldr	r2, [pc, #244]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 80118c0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80118c4:	4b3c      	ldr	r3, [pc, #240]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2201      	movs	r2, #1
 80118ca:	fa02 f303 	lsl.w	r3, r2, r3
 80118ce:	43da      	mvns	r2, r3
 80118d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118d2:	3b01      	subs	r3, #1
 80118d4:	400a      	ands	r2, r1
 80118d6:	4937      	ldr	r1, [pc, #220]	; (80119b4 <UTIL_SEQ_Run+0x1ec>)
 80118d8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80118dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118de:	3b01      	subs	r3, #1
 80118e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1e8      	bne.n	80118ba <UTIL_SEQ_Run+0xf2>
 80118e8:	6a3b      	ldr	r3, [r7, #32]
 80118ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	f383 8810 	msr	PRIMASK, r3
}
 80118f2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80118f4:	4b30      	ldr	r3, [pc, #192]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	4a30      	ldr	r2, [pc, #192]	; (80119bc <UTIL_SEQ_Run+0x1f4>)
 80118fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118fe:	4798      	blx	r3

    local_taskset = TaskSet;
 8011900:	4b28      	ldr	r3, [pc, #160]	; (80119a4 <UTIL_SEQ_Run+0x1dc>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8011906:	4b28      	ldr	r3, [pc, #160]	; (80119a8 <UTIL_SEQ_Run+0x1e0>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 801190c:	4b27      	ldr	r3, [pc, #156]	; (80119ac <UTIL_SEQ_Run+0x1e4>)
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8011912:	4b27      	ldr	r3, [pc, #156]	; (80119b0 <UTIL_SEQ_Run+0x1e8>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801191a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801191c:	401a      	ands	r2, r3
 801191e:	4b20      	ldr	r3, [pc, #128]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	4013      	ands	r3, r2
 8011924:	2b00      	cmp	r3, #0
 8011926:	d005      	beq.n	8011934 <UTIL_SEQ_Run+0x16c>
 8011928:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192c:	4013      	ands	r3, r2
 801192e:	2b00      	cmp	r3, #0
 8011930:	f43f af64 	beq.w	80117fc <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011934:	4b20      	ldr	r3, [pc, #128]	; (80119b8 <UTIL_SEQ_Run+0x1f0>)
 8011936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801193a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801193c:	f000 f840 	bl	80119c0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011940:	f3ef 8310 	mrs	r3, PRIMASK
 8011944:	613b      	str	r3, [r7, #16]
  return(result);
 8011946:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011948:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801194a:	b672      	cpsid	i
}
 801194c:	bf00      	nop
  local_taskset = TaskSet;
 801194e:	4b15      	ldr	r3, [pc, #84]	; (80119a4 <UTIL_SEQ_Run+0x1dc>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8011954:	4b14      	ldr	r3, [pc, #80]	; (80119a8 <UTIL_SEQ_Run+0x1e0>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 801195a:	4b14      	ldr	r3, [pc, #80]	; (80119ac <UTIL_SEQ_Run+0x1e4>)
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	401a      	ands	r2, r3
 8011966:	4b0e      	ldr	r3, [pc, #56]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	4013      	ands	r3, r2
 801196c:	2b00      	cmp	r3, #0
 801196e:	d107      	bne.n	8011980 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011970:	4b0f      	ldr	r3, [pc, #60]	; (80119b0 <UTIL_SEQ_Run+0x1e8>)
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011976:	4013      	ands	r3, r2
 8011978:	2b00      	cmp	r3, #0
 801197a:	d101      	bne.n	8011980 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801197c:	f7f0 f9c6 	bl	8001d0c <UTIL_SEQ_Idle>
 8011980:	69fb      	ldr	r3, [r7, #28]
 8011982:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	f383 8810 	msr	PRIMASK, r3
}
 801198a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801198c:	f000 f81e 	bl	80119cc <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011990:	4a03      	ldr	r2, [pc, #12]	; (80119a0 <UTIL_SEQ_Run+0x1d8>)
 8011992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011994:	6013      	str	r3, [r2, #0]

  return;
 8011996:	bf00      	nop
}
 8011998:	3740      	adds	r7, #64	; 0x40
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	20000040 	.word	0x20000040
 80119a4:	200067ec 	.word	0x200067ec
 80119a8:	200067f0 	.word	0x200067f0
 80119ac:	2000003c 	.word	0x2000003c
 80119b0:	200067f4 	.word	0x200067f4
 80119b4:	20006800 	.word	0x20006800
 80119b8:	200067f8 	.word	0x200067f8
 80119bc:	200067fc 	.word	0x200067fc

080119c0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80119c0:	b480      	push	{r7}
 80119c2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80119c4:	bf00      	nop
}
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bc80      	pop	{r7}
 80119ca:	4770      	bx	lr

080119cc <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80119cc:	b480      	push	{r7}
 80119ce:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80119d0:	bf00      	nop
}
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bc80      	pop	{r7}
 80119d6:	4770      	bx	lr

080119d8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80119d8:	b480      	push	{r7}
 80119da:	b085      	sub	sp, #20
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80119e0:	2300      	movs	r3, #0
 80119e2:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	0c1b      	lsrs	r3, r3, #16
 80119ec:	041b      	lsls	r3, r3, #16
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d104      	bne.n	80119fc <SEQ_BitPosition+0x24>
 80119f2:	2310      	movs	r3, #16
 80119f4:	73fb      	strb	r3, [r7, #15]
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	041b      	lsls	r3, r3, #16
 80119fa:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80119fc:	68bb      	ldr	r3, [r7, #8]
 80119fe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d105      	bne.n	8011a12 <SEQ_BitPosition+0x3a>
 8011a06:	7bfb      	ldrb	r3, [r7, #15]
 8011a08:	3308      	adds	r3, #8
 8011a0a:	73fb      	strb	r3, [r7, #15]
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	021b      	lsls	r3, r3, #8
 8011a10:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d105      	bne.n	8011a28 <SEQ_BitPosition+0x50>
 8011a1c:	7bfb      	ldrb	r3, [r7, #15]
 8011a1e:	3304      	adds	r3, #4
 8011a20:	73fb      	strb	r3, [r7, #15]
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	011b      	lsls	r3, r3, #4
 8011a26:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011a28:	68bb      	ldr	r3, [r7, #8]
 8011a2a:	0f1b      	lsrs	r3, r3, #28
 8011a2c:	4a06      	ldr	r2, [pc, #24]	; (8011a48 <SEQ_BitPosition+0x70>)
 8011a2e:	5cd2      	ldrb	r2, [r2, r3]
 8011a30:	7bfb      	ldrb	r3, [r7, #15]
 8011a32:	4413      	add	r3, r2
 8011a34:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011a36:	7bfb      	ldrb	r3, [r7, #15]
 8011a38:	f1c3 031f 	rsb	r3, r3, #31
 8011a3c:	b2db      	uxtb	r3, r3
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3714      	adds	r7, #20
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bc80      	pop	{r7}
 8011a46:	4770      	bx	lr
 8011a48:	08012d74 	.word	0x08012d74

08011a4c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8011a50:	4b04      	ldr	r3, [pc, #16]	; (8011a64 <UTIL_TIMER_Init+0x18>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8011a56:	4b04      	ldr	r3, [pc, #16]	; (8011a68 <UTIL_TIMER_Init+0x1c>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	4798      	blx	r3
 8011a5c:	4603      	mov	r3, r0
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	bd80      	pop	{r7, pc}
 8011a62:	bf00      	nop
 8011a64:	20006808 	.word	0x20006808
 8011a68:	08012b3c 	.word	0x08012b3c

08011a6c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b084      	sub	sp, #16
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	60f8      	str	r0, [r7, #12]
 8011a74:	60b9      	str	r1, [r7, #8]
 8011a76:	603b      	str	r3, [r7, #0]
 8011a78:	4613      	mov	r3, r2
 8011a7a:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d023      	beq.n	8011aca <UTIL_TIMER_Create+0x5e>
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d020      	beq.n	8011aca <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8011a8e:	4b11      	ldr	r3, [pc, #68]	; (8011ad4 <UTIL_TIMER_Create+0x68>)
 8011a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	4798      	blx	r3
 8011a96:	4602      	mov	r2, r0
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	683a      	ldr	r2, [r7, #0]
 8011ab2:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	69ba      	ldr	r2, [r7, #24]
 8011ab8:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	79fa      	ldrb	r2, [r7, #7]
 8011abe:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	e000      	b.n	8011acc <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 8011aca:	2301      	movs	r3, #1
  }
}
 8011acc:	4618      	mov	r0, r3
 8011ace:	3710      	adds	r7, #16
 8011ad0:	46bd      	mov	sp, r7
 8011ad2:	bd80      	pop	{r7, pc}
 8011ad4:	08012b3c 	.word	0x08012b3c

08011ad8 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 8011ad8:	b580      	push	{r7, lr}
 8011ada:	b08a      	sub	sp, #40	; 0x28
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d056      	beq.n	8011b9a <UTIL_TIMER_Start+0xc2>
 8011aec:	6878      	ldr	r0, [r7, #4]
 8011aee:	f000 f9a9 	bl	8011e44 <TimerExists>
 8011af2:	4603      	mov	r3, r0
 8011af4:	f083 0301 	eor.w	r3, r3, #1
 8011af8:	b2db      	uxtb	r3, r3
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d04d      	beq.n	8011b9a <UTIL_TIMER_Start+0xc2>
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	7a5b      	ldrb	r3, [r3, #9]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d149      	bne.n	8011b9a <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011b06:	f3ef 8310 	mrs	r3, PRIMASK
 8011b0a:	613b      	str	r3, [r7, #16]
  return(result);
 8011b0c:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8011b0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011b10:	b672      	cpsid	i
}
 8011b12:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	685b      	ldr	r3, [r3, #4]
 8011b18:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8011b1a:	4b24      	ldr	r3, [pc, #144]	; (8011bac <UTIL_TIMER_Start+0xd4>)
 8011b1c:	6a1b      	ldr	r3, [r3, #32]
 8011b1e:	4798      	blx	r3
 8011b20:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 8011b22:	6a3a      	ldr	r2, [r7, #32]
 8011b24:	69bb      	ldr	r3, [r7, #24]
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d201      	bcs.n	8011b2e <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6a3a      	ldr	r2, [r7, #32]
 8011b32:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2200      	movs	r2, #0
 8011b38:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	2200      	movs	r2, #0
 8011b44:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 8011b46:	4b1a      	ldr	r3, [pc, #104]	; (8011bb0 <UTIL_TIMER_Start+0xd8>)
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d106      	bne.n	8011b5c <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 8011b4e:	4b17      	ldr	r3, [pc, #92]	; (8011bac <UTIL_TIMER_Start+0xd4>)
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f000 f9eb 	bl	8011f30 <TimerInsertNewHeadTimer>
 8011b5a:	e017      	b.n	8011b8c <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8011b5c:	4b13      	ldr	r3, [pc, #76]	; (8011bac <UTIL_TIMER_Start+0xd4>)
 8011b5e:	699b      	ldr	r3, [r3, #24]
 8011b60:	4798      	blx	r3
 8011b62:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	441a      	add	r2, r3
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	4b0e      	ldr	r3, [pc, #56]	; (8011bb0 <UTIL_TIMER_Start+0xd8>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	429a      	cmp	r2, r3
 8011b7c:	d203      	bcs.n	8011b86 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 8011b7e:	6878      	ldr	r0, [r7, #4]
 8011b80:	f000 f9d6 	bl	8011f30 <TimerInsertNewHeadTimer>
 8011b84:	e002      	b.n	8011b8c <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f000 f9a2 	bl	8011ed0 <TimerInsertTimer>
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	f383 8810 	msr	PRIMASK, r3
}
 8011b96:	bf00      	nop
  {
 8011b98:	e002      	b.n	8011ba0 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 8011ba0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	3728      	adds	r7, #40	; 0x28
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	bd80      	pop	{r7, pc}
 8011bac:	08012b3c 	.word	0x08012b3c
 8011bb0:	20006808 	.word	0x20006808

08011bb4 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b088      	sub	sp, #32
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d05b      	beq.n	8011c7e <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8011bca:	60fb      	str	r3, [r7, #12]
  return(result);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8011bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011bd0:	b672      	cpsid	i
}
 8011bd2:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8011bd4:	4b2d      	ldr	r3, [pc, #180]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8011bda:	4b2c      	ldr	r3, [pc, #176]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2201      	movs	r2, #1
 8011be4:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 8011be6:	4b29      	ldr	r3, [pc, #164]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d041      	beq.n	8011c72 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8011bf4:	4b25      	ldr	r3, [pc, #148]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d134      	bne.n	8011c68 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 8011bfe:	4b23      	ldr	r3, [pc, #140]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	2200      	movs	r2, #0
 8011c04:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 8011c06:	4b21      	ldr	r3, [pc, #132]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	695b      	ldr	r3, [r3, #20]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d00a      	beq.n	8011c26 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 8011c10:	4b1e      	ldr	r3, [pc, #120]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	695b      	ldr	r3, [r3, #20]
 8011c16:	4a1d      	ldr	r2, [pc, #116]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c18:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 8011c1a:	4b1c      	ldr	r3, [pc, #112]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	4618      	mov	r0, r3
 8011c20:	f000 f92c 	bl	8011e7c <TimerSetTimeout>
 8011c24:	e023      	b.n	8011c6e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 8011c26:	4b1a      	ldr	r3, [pc, #104]	; (8011c90 <UTIL_TIMER_Stop+0xdc>)
 8011c28:	68db      	ldr	r3, [r3, #12]
 8011c2a:	4798      	blx	r3
            TimerListHead = NULL;
 8011c2c:	4b17      	ldr	r3, [pc, #92]	; (8011c8c <UTIL_TIMER_Stop+0xd8>)
 8011c2e:	2200      	movs	r2, #0
 8011c30:	601a      	str	r2, [r3, #0]
 8011c32:	e01c      	b.n	8011c6e <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 8011c34:	697a      	ldr	r2, [r7, #20]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d110      	bne.n	8011c5e <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	695b      	ldr	r3, [r3, #20]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d006      	beq.n	8011c52 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 8011c44:	697b      	ldr	r3, [r7, #20]
 8011c46:	695b      	ldr	r3, [r3, #20]
 8011c48:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8011c4a:	69bb      	ldr	r3, [r7, #24]
 8011c4c:	697a      	ldr	r2, [r7, #20]
 8011c4e:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 8011c50:	e00d      	b.n	8011c6e <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 8011c56:	69bb      	ldr	r3, [r7, #24]
 8011c58:	697a      	ldr	r2, [r7, #20]
 8011c5a:	615a      	str	r2, [r3, #20]
            break;
 8011c5c:	e007      	b.n	8011c6e <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 8011c5e:	697b      	ldr	r3, [r7, #20]
 8011c60:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 8011c62:	697b      	ldr	r3, [r7, #20]
 8011c64:	695b      	ldr	r3, [r3, #20]
 8011c66:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d1e2      	bne.n	8011c34 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	77fb      	strb	r3, [r7, #31]
 8011c72:	693b      	ldr	r3, [r7, #16]
 8011c74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	f383 8810 	msr	PRIMASK, r3
}
 8011c7c:	e001      	b.n	8011c82 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 8011c7e:	2301      	movs	r3, #1
 8011c80:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 8011c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3720      	adds	r7, #32
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	bd80      	pop	{r7, pc}
 8011c8c:	20006808 	.word	0x20006808
 8011c90:	08012b3c 	.word	0x08012b3c

08011c94 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d102      	bne.n	8011cae <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	e014      	b.n	8011cd8 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8011cae:	4b0d      	ldr	r3, [pc, #52]	; (8011ce4 <UTIL_TIMER_SetPeriod+0x50>)
 8011cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cb2:	6838      	ldr	r0, [r7, #0]
 8011cb4:	4798      	blx	r3
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 8011cbc:	6878      	ldr	r0, [r7, #4]
 8011cbe:	f000 f8c1 	bl	8011e44 <TimerExists>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d007      	beq.n	8011cd8 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f7ff ff73 	bl	8011bb4 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7ff ff02 	bl	8011ad8 <UTIL_TIMER_Start>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 8011cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	3710      	adds	r7, #16
 8011cde:	46bd      	mov	sp, r7
 8011ce0:	bd80      	pop	{r7, pc}
 8011ce2:	bf00      	nop
 8011ce4:	08012b3c 	.word	0x08012b3c

08011ce8 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 8011ce8:	b590      	push	{r4, r7, lr}
 8011cea:	b089      	sub	sp, #36	; 0x24
 8011cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011cee:	f3ef 8310 	mrs	r3, PRIMASK
 8011cf2:	60bb      	str	r3, [r7, #8]
  return(result);
 8011cf4:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 8011cf6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8011cf8:	b672      	cpsid	i
}
 8011cfa:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 8011cfc:	4b38      	ldr	r3, [pc, #224]	; (8011de0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8011cfe:	695b      	ldr	r3, [r3, #20]
 8011d00:	4798      	blx	r3
 8011d02:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8011d04:	4b36      	ldr	r3, [pc, #216]	; (8011de0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8011d06:	691b      	ldr	r3, [r3, #16]
 8011d08:	4798      	blx	r3
 8011d0a:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 8011d0c:	693a      	ldr	r2, [r7, #16]
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 8011d14:	4b33      	ldr	r3, [pc, #204]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d16:	681b      	ldr	r3, [r3, #0]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d037      	beq.n	8011d8c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 8011d1c:	4b31      	ldr	r3, [pc, #196]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 8011d22:	69fb      	ldr	r3, [r7, #28]
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d206      	bcs.n	8011d3a <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 8011d2c:	69fb      	ldr	r3, [r7, #28]
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	68fb      	ldr	r3, [r7, #12]
 8011d32:	1ad2      	subs	r2, r2, r3
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	e002      	b.n	8011d40 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 8011d3a:	69fb      	ldr	r3, [r7, #28]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	695b      	ldr	r3, [r3, #20]
 8011d44:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 8011d46:	69fb      	ldr	r3, [r7, #28]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d1ea      	bne.n	8011d22 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011d4c:	e01e      	b.n	8011d8c <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 8011d4e:	4b25      	ldr	r3, [pc, #148]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 8011d54:	4b23      	ldr	r3, [pc, #140]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	695b      	ldr	r3, [r3, #20]
 8011d5a:	4a22      	ldr	r2, [pc, #136]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d5c:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 8011d5e:	69fb      	ldr	r3, [r7, #28]
 8011d60:	2200      	movs	r2, #0
 8011d62:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	2200      	movs	r2, #0
 8011d68:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 8011d6a:	69fb      	ldr	r3, [r7, #28]
 8011d6c:	68db      	ldr	r3, [r3, #12]
 8011d6e:	69fa      	ldr	r2, [r7, #28]
 8011d70:	6912      	ldr	r2, [r2, #16]
 8011d72:	4610      	mov	r0, r2
 8011d74:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	7adb      	ldrb	r3, [r3, #11]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d106      	bne.n	8011d8c <UTIL_TIMER_IRQ_Handler+0xa4>
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	7a9b      	ldrb	r3, [r3, #10]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d102      	bne.n	8011d8c <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 8011d86:	69f8      	ldr	r0, [r7, #28]
 8011d88:	f7ff fea6 	bl	8011ad8 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8011d8c:	4b15      	ldr	r3, [pc, #84]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d8e:	681b      	ldr	r3, [r3, #0]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00d      	beq.n	8011db0 <UTIL_TIMER_IRQ_Handler+0xc8>
 8011d94:	4b13      	ldr	r3, [pc, #76]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d0d7      	beq.n	8011d4e <UTIL_TIMER_IRQ_Handler+0x66>
 8011d9e:	4b11      	ldr	r3, [pc, #68]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	681c      	ldr	r4, [r3, #0]
 8011da4:	4b0e      	ldr	r3, [pc, #56]	; (8011de0 <UTIL_TIMER_IRQ_Handler+0xf8>)
 8011da6:	699b      	ldr	r3, [r3, #24]
 8011da8:	4798      	blx	r3
 8011daa:	4603      	mov	r3, r0
 8011dac:	429c      	cmp	r4, r3
 8011dae:	d3ce      	bcc.n	8011d4e <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8011db0:	4b0c      	ldr	r3, [pc, #48]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d009      	beq.n	8011dcc <UTIL_TIMER_IRQ_Handler+0xe4>
 8011db8:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	7a1b      	ldrb	r3, [r3, #8]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d104      	bne.n	8011dcc <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 8011dc2:	4b08      	ldr	r3, [pc, #32]	; (8011de4 <UTIL_TIMER_IRQ_Handler+0xfc>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	4618      	mov	r0, r3
 8011dc8:	f000 f858 	bl	8011e7c <TimerSetTimeout>
 8011dcc:	69bb      	ldr	r3, [r7, #24]
 8011dce:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	f383 8810 	msr	PRIMASK, r3
}
 8011dd6:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 8011dd8:	bf00      	nop
 8011dda:	3724      	adds	r7, #36	; 0x24
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd90      	pop	{r4, r7, pc}
 8011de0:	08012b3c 	.word	0x08012b3c
 8011de4:	20006808 	.word	0x20006808

08011de8 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8011dee:	4b06      	ldr	r3, [pc, #24]	; (8011e08 <UTIL_TIMER_GetCurrentTime+0x20>)
 8011df0:	69db      	ldr	r3, [r3, #28]
 8011df2:	4798      	blx	r3
 8011df4:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 8011df6:	4b04      	ldr	r3, [pc, #16]	; (8011e08 <UTIL_TIMER_GetCurrentTime+0x20>)
 8011df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	4798      	blx	r3
 8011dfe:	4603      	mov	r3, r0
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	08012b3c 	.word	0x08012b3c

08011e0c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8011e14:	4b0a      	ldr	r3, [pc, #40]	; (8011e40 <UTIL_TIMER_GetElapsedTime+0x34>)
 8011e16:	69db      	ldr	r3, [r3, #28]
 8011e18:	4798      	blx	r3
 8011e1a:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8011e1c:	4b08      	ldr	r3, [pc, #32]	; (8011e40 <UTIL_TIMER_GetElapsedTime+0x34>)
 8011e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	4798      	blx	r3
 8011e24:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8011e26:	4b06      	ldr	r3, [pc, #24]	; (8011e40 <UTIL_TIMER_GetElapsedTime+0x34>)
 8011e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e2a:	68f9      	ldr	r1, [r7, #12]
 8011e2c:	68ba      	ldr	r2, [r7, #8]
 8011e2e:	1a8a      	subs	r2, r1, r2
 8011e30:	4610      	mov	r0, r2
 8011e32:	4798      	blx	r3
 8011e34:	4603      	mov	r3, r0
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3710      	adds	r7, #16
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	08012b3c 	.word	0x08012b3c

08011e44 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 8011e44:	b480      	push	{r7}
 8011e46:	b085      	sub	sp, #20
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011e4c:	4b0a      	ldr	r3, [pc, #40]	; (8011e78 <TimerExists+0x34>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 8011e52:	e008      	b.n	8011e66 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	429a      	cmp	r2, r3
 8011e5a:	d101      	bne.n	8011e60 <TimerExists+0x1c>
    {
      return true;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e006      	b.n	8011e6e <TimerExists+0x2a>
    }
    cur = cur->Next;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	695b      	ldr	r3, [r3, #20]
 8011e64:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f3      	bne.n	8011e54 <TimerExists+0x10>
  }
  return false;
 8011e6c:	2300      	movs	r3, #0
}
 8011e6e:	4618      	mov	r0, r3
 8011e70:	3714      	adds	r7, #20
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bc80      	pop	{r7}
 8011e76:	4770      	bx	lr
 8011e78:	20006808 	.word	0x20006808

08011e7c <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8011e7c:	b590      	push	{r4, r7, lr}
 8011e7e:	b085      	sub	sp, #20
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8011e84:	4b11      	ldr	r3, [pc, #68]	; (8011ecc <TimerSetTimeout+0x50>)
 8011e86:	6a1b      	ldr	r3, [r3, #32]
 8011e88:	4798      	blx	r3
 8011e8a:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2201      	movs	r2, #1
 8011e90:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	681c      	ldr	r4, [r3, #0]
 8011e96:	4b0d      	ldr	r3, [pc, #52]	; (8011ecc <TimerSetTimeout+0x50>)
 8011e98:	699b      	ldr	r3, [r3, #24]
 8011e9a:	4798      	blx	r3
 8011e9c:	4602      	mov	r2, r0
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	429c      	cmp	r4, r3
 8011ea4:	d207      	bcs.n	8011eb6 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8011ea6:	4b09      	ldr	r3, [pc, #36]	; (8011ecc <TimerSetTimeout+0x50>)
 8011ea8:	699b      	ldr	r3, [r3, #24]
 8011eaa:	4798      	blx	r3
 8011eac:	4602      	mov	r2, r0
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	441a      	add	r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8011eb6:	4b05      	ldr	r3, [pc, #20]	; (8011ecc <TimerSetTimeout+0x50>)
 8011eb8:	689b      	ldr	r3, [r3, #8]
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	6812      	ldr	r2, [r2, #0]
 8011ebe:	4610      	mov	r0, r2
 8011ec0:	4798      	blx	r3
}
 8011ec2:	bf00      	nop
 8011ec4:	3714      	adds	r7, #20
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	bd90      	pop	{r4, r7, pc}
 8011eca:	bf00      	nop
 8011ecc:	08012b3c 	.word	0x08012b3c

08011ed0 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b085      	sub	sp, #20
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011ed8:	4b14      	ldr	r3, [pc, #80]	; (8011f2c <TimerInsertTimer+0x5c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8011ede:	4b13      	ldr	r3, [pc, #76]	; (8011f2c <TimerInsertTimer+0x5c>)
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	695b      	ldr	r3, [r3, #20]
 8011ee4:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 8011ee6:	e012      	b.n	8011f0e <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	681a      	ldr	r2, [r3, #0]
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	429a      	cmp	r2, r3
 8011ef2:	d905      	bls.n	8011f00 <TimerInsertTimer+0x30>
    {
        cur = next;
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	695b      	ldr	r3, [r3, #20]
 8011efc:	60bb      	str	r3, [r7, #8]
 8011efe:	e006      	b.n	8011f0e <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	687a      	ldr	r2, [r7, #4]
 8011f04:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	68ba      	ldr	r2, [r7, #8]
 8011f0a:	615a      	str	r2, [r3, #20]
        return;
 8011f0c:	e009      	b.n	8011f22 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	695b      	ldr	r3, [r3, #20]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d1e8      	bne.n	8011ee8 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	687a      	ldr	r2, [r7, #4]
 8011f1a:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	615a      	str	r2, [r3, #20]
}
 8011f22:	3714      	adds	r7, #20
 8011f24:	46bd      	mov	sp, r7
 8011f26:	bc80      	pop	{r7}
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop
 8011f2c:	20006808 	.word	0x20006808

08011f30 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8011f30:	b580      	push	{r7, lr}
 8011f32:	b084      	sub	sp, #16
 8011f34:	af00      	add	r7, sp, #0
 8011f36:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8011f38:	4b0b      	ldr	r3, [pc, #44]	; (8011f68 <TimerInsertNewHeadTimer+0x38>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	2200      	movs	r2, #0
 8011f48:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	68fa      	ldr	r2, [r7, #12]
 8011f4e:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 8011f50:	4a05      	ldr	r2, [pc, #20]	; (8011f68 <TimerInsertNewHeadTimer+0x38>)
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8011f56:	4b04      	ldr	r3, [pc, #16]	; (8011f68 <TimerInsertNewHeadTimer+0x38>)
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	f7ff ff8e 	bl	8011e7c <TimerSetTimeout>
}
 8011f60:	bf00      	nop
 8011f62:	3710      	adds	r7, #16
 8011f64:	46bd      	mov	sp, r7
 8011f66:	bd80      	pop	{r7, pc}
 8011f68:	20006808 	.word	0x20006808

08011f6c <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8011f70:	2218      	movs	r2, #24
 8011f72:	2100      	movs	r1, #0
 8011f74:	4807      	ldr	r0, [pc, #28]	; (8011f94 <UTIL_ADV_TRACE_Init+0x28>)
 8011f76:	f7ff f934 	bl	80111e2 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8011f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011f7e:	2100      	movs	r1, #0
 8011f80:	4805      	ldr	r0, [pc, #20]	; (8011f98 <UTIL_ADV_TRACE_Init+0x2c>)
 8011f82:	f7ff f92e 	bl	80111e2 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8011f86:	4b05      	ldr	r3, [pc, #20]	; (8011f9c <UTIL_ADV_TRACE_Init+0x30>)
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	4805      	ldr	r0, [pc, #20]	; (8011fa0 <UTIL_ADV_TRACE_Init+0x34>)
 8011f8c:	4798      	blx	r3
 8011f8e:	4603      	mov	r3, r0
}
 8011f90:	4618      	mov	r0, r3
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	2000680c 	.word	0x2000680c
 8011f98:	20006824 	.word	0x20006824
 8011f9c:	08012b7c 	.word	0x08012b7c
 8011fa0:	080121e9 	.word	0x080121e9

08011fa4 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 8011fa4:	b408      	push	{r3}
 8011fa6:	b580      	push	{r7, lr}
 8011fa8:	b08d      	sub	sp, #52	; 0x34
 8011faa:	af00      	add	r7, sp, #0
 8011fac:	60f8      	str	r0, [r7, #12]
 8011fae:	60b9      	str	r1, [r7, #8]
 8011fb0:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8011fba:	4b37      	ldr	r3, [pc, #220]	; (8012098 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8011fbc:	7a1b      	ldrb	r3, [r3, #8]
 8011fbe:	461a      	mov	r2, r3
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d902      	bls.n	8011fcc <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 8011fc6:	f06f 0304 	mvn.w	r3, #4
 8011fca:	e05e      	b.n	801208a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8011fcc:	4b32      	ldr	r3, [pc, #200]	; (8012098 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8011fce:	68da      	ldr	r2, [r3, #12]
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	4013      	ands	r3, r2
 8011fd4:	68ba      	ldr	r2, [r7, #8]
 8011fd6:	429a      	cmp	r2, r3
 8011fd8:	d002      	beq.n	8011fe0 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 8011fda:	f06f 0305 	mvn.w	r3, #5
 8011fde:	e054      	b.n	801208a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8011fe0:	4b2d      	ldr	r3, [pc, #180]	; (8012098 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d00a      	beq.n	8011ffe <UTIL_ADV_TRACE_COND_FSend+0x5a>
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d007      	beq.n	8011ffe <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8011fee:	4b2a      	ldr	r3, [pc, #168]	; (8012098 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	f107 0116 	add.w	r1, r7, #22
 8011ff6:	f107 0218 	add.w	r2, r7, #24
 8011ffa:	4610      	mov	r0, r2
 8011ffc:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 8011ffe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012002:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012008:	f44f 7180 	mov.w	r1, #256	; 0x100
 801200c:	4823      	ldr	r0, [pc, #140]	; (801209c <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801200e:	f7ff fa89 	bl	8011524 <tiny_vsnprintf_like>
 8012012:	4603      	mov	r3, r0
 8012014:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 8012016:	f000 f9f1 	bl	80123fc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801201a:	8afa      	ldrh	r2, [r7, #22]
 801201c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801201e:	4413      	add	r3, r2
 8012020:	b29b      	uxth	r3, r3
 8012022:	f107 0214 	add.w	r2, r7, #20
 8012026:	4611      	mov	r1, r2
 8012028:	4618      	mov	r0, r3
 801202a:	f000 f969 	bl	8012300 <TRACE_AllocateBufer>
 801202e:	4603      	mov	r3, r0
 8012030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012034:	d025      	beq.n	8012082 <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 8012036:	2300      	movs	r3, #0
 8012038:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801203a:	e00e      	b.n	801205a <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801203c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801203e:	8aba      	ldrh	r2, [r7, #20]
 8012040:	3330      	adds	r3, #48	; 0x30
 8012042:	443b      	add	r3, r7
 8012044:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 8012048:	4b15      	ldr	r3, [pc, #84]	; (80120a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801204a:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801204c:	8abb      	ldrh	r3, [r7, #20]
 801204e:	3301      	adds	r3, #1
 8012050:	b29b      	uxth	r3, r3
 8012052:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 8012054:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012056:	3301      	adds	r3, #1
 8012058:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801205a:	8afb      	ldrh	r3, [r7, #22]
 801205c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801205e:	429a      	cmp	r2, r3
 8012060:	d3ec      	bcc.n	801203c <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8012062:	8abb      	ldrh	r3, [r7, #20]
 8012064:	461a      	mov	r2, r3
 8012066:	4b0e      	ldr	r3, [pc, #56]	; (80120a0 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 8012068:	18d0      	adds	r0, r2, r3
 801206a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801206c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801206e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012072:	f7ff fa57 	bl	8011524 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 8012076:	f000 f9df 	bl	8012438 <TRACE_UnLock>

    return TRACE_Send();
 801207a:	f000 f831 	bl	80120e0 <TRACE_Send>
 801207e:	4603      	mov	r3, r0
 8012080:	e003      	b.n	801208a <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 8012082:	f000 f9d9 	bl	8012438 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 8012086:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801208a:	4618      	mov	r0, r3
 801208c:	3734      	adds	r7, #52	; 0x34
 801208e:	46bd      	mov	sp, r7
 8012090:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012094:	b001      	add	sp, #4
 8012096:	4770      	bx	lr
 8012098:	2000680c 	.word	0x2000680c
 801209c:	20006a24 	.word	0x20006a24
 80120a0:	20006824 	.word	0x20006824

080120a4 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 80120a4:	b480      	push	{r7}
 80120a6:	b083      	sub	sp, #12
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80120ac:	4a03      	ldr	r2, [pc, #12]	; (80120bc <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6053      	str	r3, [r2, #4]
}
 80120b2:	bf00      	nop
 80120b4:	370c      	adds	r7, #12
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bc80      	pop	{r7}
 80120ba:	4770      	bx	lr
 80120bc:	2000680c 	.word	0x2000680c

080120c0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b083      	sub	sp, #12
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	4603      	mov	r3, r0
 80120c8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80120ca:	4a04      	ldr	r2, [pc, #16]	; (80120dc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 80120cc:	79fb      	ldrb	r3, [r7, #7]
 80120ce:	7213      	strb	r3, [r2, #8]
}
 80120d0:	bf00      	nop
 80120d2:	370c      	adds	r7, #12
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bc80      	pop	{r7}
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	2000680c 	.word	0x2000680c

080120e0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 80120ea:	2300      	movs	r3, #0
 80120ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120ee:	f3ef 8310 	mrs	r3, PRIMASK
 80120f2:	613b      	str	r3, [r7, #16]
  return(result);
 80120f4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80120f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120f8:	b672      	cpsid	i
}
 80120fa:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 80120fc:	f000 f9ba 	bl	8012474 <TRACE_IsLocked>
 8012100:	4603      	mov	r3, r0
 8012102:	2b00      	cmp	r3, #0
 8012104:	d15d      	bne.n	80121c2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 8012106:	f000 f979 	bl	80123fc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801210a:	4b34      	ldr	r3, [pc, #208]	; (80121dc <TRACE_Send+0xfc>)
 801210c:	8a1a      	ldrh	r2, [r3, #16]
 801210e:	4b33      	ldr	r3, [pc, #204]	; (80121dc <TRACE_Send+0xfc>)
 8012110:	8a5b      	ldrh	r3, [r3, #18]
 8012112:	429a      	cmp	r2, r3
 8012114:	d04d      	beq.n	80121b2 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012116:	4b31      	ldr	r3, [pc, #196]	; (80121dc <TRACE_Send+0xfc>)
 8012118:	789b      	ldrb	r3, [r3, #2]
 801211a:	2b01      	cmp	r3, #1
 801211c:	d117      	bne.n	801214e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801211e:	4b2f      	ldr	r3, [pc, #188]	; (80121dc <TRACE_Send+0xfc>)
 8012120:	881a      	ldrh	r2, [r3, #0]
 8012122:	4b2e      	ldr	r3, [pc, #184]	; (80121dc <TRACE_Send+0xfc>)
 8012124:	8a1b      	ldrh	r3, [r3, #16]
 8012126:	1ad3      	subs	r3, r2, r3
 8012128:	b29a      	uxth	r2, r3
 801212a:	4b2c      	ldr	r3, [pc, #176]	; (80121dc <TRACE_Send+0xfc>)
 801212c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801212e:	4b2b      	ldr	r3, [pc, #172]	; (80121dc <TRACE_Send+0xfc>)
 8012130:	2202      	movs	r2, #2
 8012132:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012134:	4b29      	ldr	r3, [pc, #164]	; (80121dc <TRACE_Send+0xfc>)
 8012136:	2200      	movs	r2, #0
 8012138:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801213a:	4b28      	ldr	r3, [pc, #160]	; (80121dc <TRACE_Send+0xfc>)
 801213c:	8a9b      	ldrh	r3, [r3, #20]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d105      	bne.n	801214e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8012142:	4b26      	ldr	r3, [pc, #152]	; (80121dc <TRACE_Send+0xfc>)
 8012144:	2200      	movs	r2, #0
 8012146:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012148:	4b24      	ldr	r3, [pc, #144]	; (80121dc <TRACE_Send+0xfc>)
 801214a:	2200      	movs	r2, #0
 801214c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801214e:	4b23      	ldr	r3, [pc, #140]	; (80121dc <TRACE_Send+0xfc>)
 8012150:	789b      	ldrb	r3, [r3, #2]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d115      	bne.n	8012182 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012156:	4b21      	ldr	r3, [pc, #132]	; (80121dc <TRACE_Send+0xfc>)
 8012158:	8a5a      	ldrh	r2, [r3, #18]
 801215a:	4b20      	ldr	r3, [pc, #128]	; (80121dc <TRACE_Send+0xfc>)
 801215c:	8a1b      	ldrh	r3, [r3, #16]
 801215e:	429a      	cmp	r2, r3
 8012160:	d908      	bls.n	8012174 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8012162:	4b1e      	ldr	r3, [pc, #120]	; (80121dc <TRACE_Send+0xfc>)
 8012164:	8a5a      	ldrh	r2, [r3, #18]
 8012166:	4b1d      	ldr	r3, [pc, #116]	; (80121dc <TRACE_Send+0xfc>)
 8012168:	8a1b      	ldrh	r3, [r3, #16]
 801216a:	1ad3      	subs	r3, r2, r3
 801216c:	b29a      	uxth	r2, r3
 801216e:	4b1b      	ldr	r3, [pc, #108]	; (80121dc <TRACE_Send+0xfc>)
 8012170:	829a      	strh	r2, [r3, #20]
 8012172:	e006      	b.n	8012182 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8012174:	4b19      	ldr	r3, [pc, #100]	; (80121dc <TRACE_Send+0xfc>)
 8012176:	8a1b      	ldrh	r3, [r3, #16]
 8012178:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801217c:	b29a      	uxth	r2, r3
 801217e:	4b17      	ldr	r3, [pc, #92]	; (80121dc <TRACE_Send+0xfc>)
 8012180:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8012182:	4b16      	ldr	r3, [pc, #88]	; (80121dc <TRACE_Send+0xfc>)
 8012184:	8a1b      	ldrh	r3, [r3, #16]
 8012186:	461a      	mov	r2, r3
 8012188:	4b15      	ldr	r3, [pc, #84]	; (80121e0 <TRACE_Send+0x100>)
 801218a:	4413      	add	r3, r2
 801218c:	61bb      	str	r3, [r7, #24]
 801218e:	697b      	ldr	r3, [r7, #20]
 8012190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f383 8810 	msr	PRIMASK, r3
}
 8012198:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801219a:	f7ef fddd 	bl	8001d58 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801219e:	4b11      	ldr	r3, [pc, #68]	; (80121e4 <TRACE_Send+0x104>)
 80121a0:	68db      	ldr	r3, [r3, #12]
 80121a2:	4a0e      	ldr	r2, [pc, #56]	; (80121dc <TRACE_Send+0xfc>)
 80121a4:	8a92      	ldrh	r2, [r2, #20]
 80121a6:	4611      	mov	r1, r2
 80121a8:	69b8      	ldr	r0, [r7, #24]
 80121aa:	4798      	blx	r3
 80121ac:	4603      	mov	r3, r0
 80121ae:	77fb      	strb	r3, [r7, #31]
 80121b0:	e00d      	b.n	80121ce <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 80121b2:	f000 f941 	bl	8012438 <TRACE_UnLock>
 80121b6:	697b      	ldr	r3, [r7, #20]
 80121b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	f383 8810 	msr	PRIMASK, r3
}
 80121c0:	e005      	b.n	80121ce <TRACE_Send+0xee>
 80121c2:	697b      	ldr	r3, [r7, #20]
 80121c4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f383 8810 	msr	PRIMASK, r3
}
 80121cc:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 80121ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3720      	adds	r7, #32
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	2000680c 	.word	0x2000680c
 80121e0:	20006824 	.word	0x20006824
 80121e4:	08012b7c 	.word	0x08012b7c

080121e8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 80121f0:	2300      	movs	r3, #0
 80121f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80121f4:	f3ef 8310 	mrs	r3, PRIMASK
 80121f8:	617b      	str	r3, [r7, #20]
  return(result);
 80121fa:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 80121fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 80121fe:	b672      	cpsid	i
}
 8012200:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8012202:	4b3c      	ldr	r3, [pc, #240]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012204:	789b      	ldrb	r3, [r3, #2]
 8012206:	2b02      	cmp	r3, #2
 8012208:	d106      	bne.n	8012218 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801220a:	4b3a      	ldr	r3, [pc, #232]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801220c:	2200      	movs	r2, #0
 801220e:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012210:	4b38      	ldr	r3, [pc, #224]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012212:	2200      	movs	r2, #0
 8012214:	821a      	strh	r2, [r3, #16]
 8012216:	e00a      	b.n	801222e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8012218:	4b36      	ldr	r3, [pc, #216]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801221a:	8a1a      	ldrh	r2, [r3, #16]
 801221c:	4b35      	ldr	r3, [pc, #212]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801221e:	8a9b      	ldrh	r3, [r3, #20]
 8012220:	4413      	add	r3, r2
 8012222:	b29b      	uxth	r3, r3
 8012224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012228:	b29a      	uxth	r2, r3
 801222a:	4b32      	ldr	r3, [pc, #200]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801222c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801222e:	4b31      	ldr	r3, [pc, #196]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012230:	8a1a      	ldrh	r2, [r3, #16]
 8012232:	4b30      	ldr	r3, [pc, #192]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012234:	8a5b      	ldrh	r3, [r3, #18]
 8012236:	429a      	cmp	r2, r3
 8012238:	d04d      	beq.n	80122d6 <TRACE_TxCpltCallback+0xee>
 801223a:	4b2e      	ldr	r3, [pc, #184]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801223c:	8adb      	ldrh	r3, [r3, #22]
 801223e:	2b01      	cmp	r3, #1
 8012240:	d149      	bne.n	80122d6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8012242:	4b2c      	ldr	r3, [pc, #176]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012244:	789b      	ldrb	r3, [r3, #2]
 8012246:	2b01      	cmp	r3, #1
 8012248:	d117      	bne.n	801227a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801224a:	4b2a      	ldr	r3, [pc, #168]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801224c:	881a      	ldrh	r2, [r3, #0]
 801224e:	4b29      	ldr	r3, [pc, #164]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012250:	8a1b      	ldrh	r3, [r3, #16]
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	b29a      	uxth	r2, r3
 8012256:	4b27      	ldr	r3, [pc, #156]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012258:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801225a:	4b26      	ldr	r3, [pc, #152]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801225c:	2202      	movs	r2, #2
 801225e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8012260:	4b24      	ldr	r3, [pc, #144]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012262:	2200      	movs	r2, #0
 8012264:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8012266:	4b23      	ldr	r3, [pc, #140]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012268:	8a9b      	ldrh	r3, [r3, #20]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d105      	bne.n	801227a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801226e:	4b21      	ldr	r3, [pc, #132]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012270:	2200      	movs	r2, #0
 8012272:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8012274:	4b1f      	ldr	r3, [pc, #124]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012276:	2200      	movs	r2, #0
 8012278:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801227a:	4b1e      	ldr	r3, [pc, #120]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801227c:	789b      	ldrb	r3, [r3, #2]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d115      	bne.n	80122ae <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012282:	4b1c      	ldr	r3, [pc, #112]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012284:	8a5a      	ldrh	r2, [r3, #18]
 8012286:	4b1b      	ldr	r3, [pc, #108]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012288:	8a1b      	ldrh	r3, [r3, #16]
 801228a:	429a      	cmp	r2, r3
 801228c:	d908      	bls.n	80122a0 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801228e:	4b19      	ldr	r3, [pc, #100]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012290:	8a5a      	ldrh	r2, [r3, #18]
 8012292:	4b18      	ldr	r3, [pc, #96]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 8012294:	8a1b      	ldrh	r3, [r3, #16]
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	b29a      	uxth	r2, r3
 801229a:	4b16      	ldr	r3, [pc, #88]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 801229c:	829a      	strh	r2, [r3, #20]
 801229e:	e006      	b.n	80122ae <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80122a0:	4b14      	ldr	r3, [pc, #80]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 80122a2:	8a1b      	ldrh	r3, [r3, #16]
 80122a4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80122a8:	b29a      	uxth	r2, r3
 80122aa:	4b12      	ldr	r3, [pc, #72]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 80122ac:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80122ae:	4b11      	ldr	r3, [pc, #68]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 80122b0:	8a1b      	ldrh	r3, [r3, #16]
 80122b2:	461a      	mov	r2, r3
 80122b4:	4b10      	ldr	r3, [pc, #64]	; (80122f8 <TRACE_TxCpltCallback+0x110>)
 80122b6:	4413      	add	r3, r2
 80122b8:	61fb      	str	r3, [r7, #28]
 80122ba:	69bb      	ldr	r3, [r7, #24]
 80122bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122be:	693b      	ldr	r3, [r7, #16]
 80122c0:	f383 8810 	msr	PRIMASK, r3
}
 80122c4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80122c6:	4b0d      	ldr	r3, [pc, #52]	; (80122fc <TRACE_TxCpltCallback+0x114>)
 80122c8:	68db      	ldr	r3, [r3, #12]
 80122ca:	4a0a      	ldr	r2, [pc, #40]	; (80122f4 <TRACE_TxCpltCallback+0x10c>)
 80122cc:	8a92      	ldrh	r2, [r2, #20]
 80122ce:	4611      	mov	r1, r2
 80122d0:	69f8      	ldr	r0, [r7, #28]
 80122d2:	4798      	blx	r3
 80122d4:	e00a      	b.n	80122ec <TRACE_TxCpltCallback+0x104>
 80122d6:	69bb      	ldr	r3, [r7, #24]
 80122d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f383 8810 	msr	PRIMASK, r3
}
 80122e0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 80122e2:	f7ef fd41 	bl	8001d68 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80122e6:	f000 f8a7 	bl	8012438 <TRACE_UnLock>
  }
}
 80122ea:	bf00      	nop
 80122ec:	bf00      	nop
 80122ee:	3720      	adds	r7, #32
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	2000680c 	.word	0x2000680c
 80122f8:	20006824 	.word	0x20006824
 80122fc:	08012b7c 	.word	0x08012b7c

08012300 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8012300:	b480      	push	{r7}
 8012302:	b087      	sub	sp, #28
 8012304:	af00      	add	r7, sp, #0
 8012306:	4603      	mov	r3, r0
 8012308:	6039      	str	r1, [r7, #0]
 801230a:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801230c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012310:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012312:	f3ef 8310 	mrs	r3, PRIMASK
 8012316:	60fb      	str	r3, [r7, #12]
  return(result);
 8012318:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801231a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801231c:	b672      	cpsid	i
}
 801231e:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8012320:	4b35      	ldr	r3, [pc, #212]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012322:	8a5a      	ldrh	r2, [r3, #18]
 8012324:	4b34      	ldr	r3, [pc, #208]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012326:	8a1b      	ldrh	r3, [r3, #16]
 8012328:	429a      	cmp	r2, r3
 801232a:	d11b      	bne.n	8012364 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801232c:	4b32      	ldr	r3, [pc, #200]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801232e:	8a5b      	ldrh	r3, [r3, #18]
 8012330:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012334:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8012336:	88fa      	ldrh	r2, [r7, #6]
 8012338:	8afb      	ldrh	r3, [r7, #22]
 801233a:	429a      	cmp	r2, r3
 801233c:	d33a      	bcc.n	80123b4 <TRACE_AllocateBufer+0xb4>
 801233e:	4b2e      	ldr	r3, [pc, #184]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012340:	8a1b      	ldrh	r3, [r3, #16]
 8012342:	88fa      	ldrh	r2, [r7, #6]
 8012344:	429a      	cmp	r2, r3
 8012346:	d235      	bcs.n	80123b4 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8012348:	4b2b      	ldr	r3, [pc, #172]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801234a:	2201      	movs	r2, #1
 801234c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801234e:	4b2a      	ldr	r3, [pc, #168]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012350:	8a5a      	ldrh	r2, [r3, #18]
 8012352:	4b29      	ldr	r3, [pc, #164]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012354:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8012356:	4b28      	ldr	r3, [pc, #160]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012358:	8a1b      	ldrh	r3, [r3, #16]
 801235a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801235c:	4b26      	ldr	r3, [pc, #152]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801235e:	2200      	movs	r2, #0
 8012360:	825a      	strh	r2, [r3, #18]
 8012362:	e027      	b.n	80123b4 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8012364:	4b24      	ldr	r3, [pc, #144]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012366:	8a5a      	ldrh	r2, [r3, #18]
 8012368:	4b23      	ldr	r3, [pc, #140]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801236a:	8a1b      	ldrh	r3, [r3, #16]
 801236c:	429a      	cmp	r2, r3
 801236e:	d91b      	bls.n	80123a8 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8012370:	4b21      	ldr	r3, [pc, #132]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012372:	8a5b      	ldrh	r3, [r3, #18]
 8012374:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012378:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801237a:	88fa      	ldrh	r2, [r7, #6]
 801237c:	8afb      	ldrh	r3, [r7, #22]
 801237e:	429a      	cmp	r2, r3
 8012380:	d318      	bcc.n	80123b4 <TRACE_AllocateBufer+0xb4>
 8012382:	4b1d      	ldr	r3, [pc, #116]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012384:	8a1b      	ldrh	r3, [r3, #16]
 8012386:	88fa      	ldrh	r2, [r7, #6]
 8012388:	429a      	cmp	r2, r3
 801238a:	d213      	bcs.n	80123b4 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801238c:	4b1a      	ldr	r3, [pc, #104]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801238e:	2201      	movs	r2, #1
 8012390:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8012392:	4b19      	ldr	r3, [pc, #100]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012394:	8a5a      	ldrh	r2, [r3, #18]
 8012396:	4b18      	ldr	r3, [pc, #96]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 8012398:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801239a:	4b17      	ldr	r3, [pc, #92]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 801239c:	8a1b      	ldrh	r3, [r3, #16]
 801239e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80123a0:	4b15      	ldr	r3, [pc, #84]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123a2:	2200      	movs	r2, #0
 80123a4:	825a      	strh	r2, [r3, #18]
 80123a6:	e005      	b.n	80123b4 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80123a8:	4b13      	ldr	r3, [pc, #76]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123aa:	8a1a      	ldrh	r2, [r3, #16]
 80123ac:	4b12      	ldr	r3, [pc, #72]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123ae:	8a5b      	ldrh	r3, [r3, #18]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80123b4:	8afa      	ldrh	r2, [r7, #22]
 80123b6:	88fb      	ldrh	r3, [r7, #6]
 80123b8:	429a      	cmp	r2, r3
 80123ba:	d90f      	bls.n	80123dc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80123bc:	4b0e      	ldr	r3, [pc, #56]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123be:	8a5a      	ldrh	r2, [r3, #18]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80123c4:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123c6:	8a5a      	ldrh	r2, [r3, #18]
 80123c8:	88fb      	ldrh	r3, [r7, #6]
 80123ca:	4413      	add	r3, r2
 80123cc:	b29b      	uxth	r3, r3
 80123ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123d2:	b29a      	uxth	r2, r3
 80123d4:	4b08      	ldr	r3, [pc, #32]	; (80123f8 <TRACE_AllocateBufer+0xf8>)
 80123d6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 80123d8:	2300      	movs	r3, #0
 80123da:	82bb      	strh	r3, [r7, #20]
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80123e0:	68bb      	ldr	r3, [r7, #8]
 80123e2:	f383 8810 	msr	PRIMASK, r3
}
 80123e6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 80123e8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 80123ec:	4618      	mov	r0, r3
 80123ee:	371c      	adds	r7, #28
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bc80      	pop	{r7}
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	2000680c 	.word	0x2000680c

080123fc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b085      	sub	sp, #20
 8012400:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012402:	f3ef 8310 	mrs	r3, PRIMASK
 8012406:	607b      	str	r3, [r7, #4]
  return(result);
 8012408:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801240a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801240c:	b672      	cpsid	i
}
 801240e:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 8012410:	4b08      	ldr	r3, [pc, #32]	; (8012434 <TRACE_Lock+0x38>)
 8012412:	8adb      	ldrh	r3, [r3, #22]
 8012414:	3301      	adds	r3, #1
 8012416:	b29a      	uxth	r2, r3
 8012418:	4b06      	ldr	r3, [pc, #24]	; (8012434 <TRACE_Lock+0x38>)
 801241a:	82da      	strh	r2, [r3, #22]
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	f383 8810 	msr	PRIMASK, r3
}
 8012426:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012428:	bf00      	nop
 801242a:	3714      	adds	r7, #20
 801242c:	46bd      	mov	sp, r7
 801242e:	bc80      	pop	{r7}
 8012430:	4770      	bx	lr
 8012432:	bf00      	nop
 8012434:	2000680c 	.word	0x2000680c

08012438 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 8012438:	b480      	push	{r7}
 801243a:	b085      	sub	sp, #20
 801243c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801243e:	f3ef 8310 	mrs	r3, PRIMASK
 8012442:	607b      	str	r3, [r7, #4]
  return(result);
 8012444:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 8012446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8012448:	b672      	cpsid	i
}
 801244a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801244c:	4b08      	ldr	r3, [pc, #32]	; (8012470 <TRACE_UnLock+0x38>)
 801244e:	8adb      	ldrh	r3, [r3, #22]
 8012450:	3b01      	subs	r3, #1
 8012452:	b29a      	uxth	r2, r3
 8012454:	4b06      	ldr	r3, [pc, #24]	; (8012470 <TRACE_UnLock+0x38>)
 8012456:	82da      	strh	r2, [r3, #22]
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	f383 8810 	msr	PRIMASK, r3
}
 8012462:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8012464:	bf00      	nop
 8012466:	3714      	adds	r7, #20
 8012468:	46bd      	mov	sp, r7
 801246a:	bc80      	pop	{r7}
 801246c:	4770      	bx	lr
 801246e:	bf00      	nop
 8012470:	2000680c 	.word	0x2000680c

08012474 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 8012474:	b480      	push	{r7}
 8012476:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8012478:	4b05      	ldr	r3, [pc, #20]	; (8012490 <TRACE_IsLocked+0x1c>)
 801247a:	8adb      	ldrh	r3, [r3, #22]
 801247c:	2b00      	cmp	r3, #0
 801247e:	bf14      	ite	ne
 8012480:	2301      	movne	r3, #1
 8012482:	2300      	moveq	r3, #0
 8012484:	b2db      	uxtb	r3, r3
}
 8012486:	4618      	mov	r0, r3
 8012488:	46bd      	mov	sp, r7
 801248a:	bc80      	pop	{r7}
 801248c:	4770      	bx	lr
 801248e:	bf00      	nop
 8012490:	2000680c 	.word	0x2000680c

08012494 <memset>:
 8012494:	4402      	add	r2, r0
 8012496:	4603      	mov	r3, r0
 8012498:	4293      	cmp	r3, r2
 801249a:	d100      	bne.n	801249e <memset+0xa>
 801249c:	4770      	bx	lr
 801249e:	f803 1b01 	strb.w	r1, [r3], #1
 80124a2:	e7f9      	b.n	8012498 <memset+0x4>

080124a4 <__libc_init_array>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	4d0d      	ldr	r5, [pc, #52]	; (80124dc <__libc_init_array+0x38>)
 80124a8:	4c0d      	ldr	r4, [pc, #52]	; (80124e0 <__libc_init_array+0x3c>)
 80124aa:	1b64      	subs	r4, r4, r5
 80124ac:	10a4      	asrs	r4, r4, #2
 80124ae:	2600      	movs	r6, #0
 80124b0:	42a6      	cmp	r6, r4
 80124b2:	d109      	bne.n	80124c8 <__libc_init_array+0x24>
 80124b4:	4d0b      	ldr	r5, [pc, #44]	; (80124e4 <__libc_init_array+0x40>)
 80124b6:	4c0c      	ldr	r4, [pc, #48]	; (80124e8 <__libc_init_array+0x44>)
 80124b8:	f000 f818 	bl	80124ec <_init>
 80124bc:	1b64      	subs	r4, r4, r5
 80124be:	10a4      	asrs	r4, r4, #2
 80124c0:	2600      	movs	r6, #0
 80124c2:	42a6      	cmp	r6, r4
 80124c4:	d105      	bne.n	80124d2 <__libc_init_array+0x2e>
 80124c6:	bd70      	pop	{r4, r5, r6, pc}
 80124c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80124cc:	4798      	blx	r3
 80124ce:	3601      	adds	r6, #1
 80124d0:	e7ee      	b.n	80124b0 <__libc_init_array+0xc>
 80124d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80124d6:	4798      	blx	r3
 80124d8:	3601      	adds	r6, #1
 80124da:	e7f2      	b.n	80124c2 <__libc_init_array+0x1e>
 80124dc:	08012d8c 	.word	0x08012d8c
 80124e0:	08012d8c 	.word	0x08012d8c
 80124e4:	08012d8c 	.word	0x08012d8c
 80124e8:	08012d90 	.word	0x08012d90

080124ec <_init>:
 80124ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124ee:	bf00      	nop
 80124f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124f2:	bc08      	pop	{r3}
 80124f4:	469e      	mov	lr, r3
 80124f6:	4770      	bx	lr

080124f8 <_fini>:
 80124f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fa:	bf00      	nop
 80124fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124fe:	bc08      	pop	{r3}
 8012500:	469e      	mov	lr, r3
 8012502:	4770      	bx	lr
